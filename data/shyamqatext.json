{
    "Sheet1": [
        {
            "question:-": " What happens to the dimension(s) of input? ",
            "answer:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination. Other dimensions ofinputthat are not explicitly moved remain in"
        },
        {
            "question:-": "  What happens to other dimensions of input that are not explicitly moved? ",
            "answer:-": "   remain in their original order ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination. Other dimensions ofinputthat are not explicitly moved remain in",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.movedim.html#torch.movedim"
        },
        {
            "question:-": "  What is the input tensor? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Returns True if the data type ofinputis a complex data type i.e.,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.movedim.html#torch.movedim"
        },
        {
            "question:-": "  What are the original positions of the dims to move? ",
            "answer:-": "   source ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination. Other dimensions ofinputthat are not explicitly moved remain in",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.is_complex.html#torch.is_complex"
        },
        {
            "question:-": "  What must be the original positions of the dims to move? ",
            "answer:-": "   unique ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination. Other dimensions ofinputthat are not explicitly moved remain in",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.movedim.html#torch.movedim"
        },
        {
            "question:-": "  What is the name of the destination position for each of the original dims? ",
            "answer:-": "   destination ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination. Other dimensions ofinputthat are not explicitly moved remain in",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.movedim.html#torch.movedim"
        },
        {
            "question:-": "  Destination positions for each of the original dims must also be what? ",
            "answer:-": "   unique ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination. Other dimensions ofinputthat are not explicitly moved remain in",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.movedim.html#torch.movedim"
        },
        {
            "question:-": "  What must be unique for each of the original dims to move? ",
            "answer:-": "   Examples ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination. Other dimensions ofinputthat are not explicitly moved remain in",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.movedim.html#torch.movedim"
        },
        {
            "question:-": "  What are scaling factors on matrix-vector product betweenmat1 andmat2? ",
            "answer:-": "   alphaandbetaare scaling factors ",
            "context:-": "   alphaandbetaare scaling factors on matrix-vector product betweenmat1andmat2and the added matrixinputrespectively. Ifbetais 0, theninputwill be ignored, andnanandinfin",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.movedim.html#torch.movedim"
        },
        {
            "question:-": "  If input is ignored, what is it? ",
            "answer:-": "   Ifbetais 0, ",
            "context:-": "   Ifbetais 0, theninputwill be ignored, andnanandinfin",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.addmm.html#torch.addmm"
        },
        {
            "question:-": "  What are the arguments for inputs of typeFloatTensororDoubleTensor? ",
            "answer:-": "   argumentsbetaandalphamust be real numbers ",
            "context:-": "   alphaandbetaare scaling factors on matrix-vector product betweenmat1andmat2and the added matrixinputrespectively. Ifbetais 0, theninputwill be ignored, andnanandinfin",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.addmm.html#torch.addmm"
        },
        {
            "question:-": "  What does this operator support? ",
            "answer:-": "   TensorFloat32 ",
            "context:-": "   This operator supportsTensorFloat32. Note This function does notbroadcast.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.addmm.html#torch.addmm"
        },
        {
            "question:-": "  What is the second matrix to be matrix multiplied? ",
            "answer:-": "   mat2(Tensor) ",
            "context:-": "   alphaandbetaare scaling factors on matrix-vector product betweenmat1andmat2and the added matrixinputrespectively. Ifbetais 0, theninputwill be ignored, andnanandinfin",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bmm.html#torch.bmm"
        },
        {
            "question:-": "  What do alphaandbetaare scaling factors on? ",
            "answer:-": "   matrix-vector product ",
            "context:-": "   alphaandbetaare scaling factors on matrix-vector product betweenmat1andmat2and the added matrixinputrespectively. Ifbetais 0, theninputwill be ignored, andnanandinfin",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.addmm.html#torch.addmm"
        },
        {
            "question:-": "  If input is ignored, andnanandinfin it will not be propagated. ",
            "answer:-": "   Ifbetais 0, ",
            "context:-": "   Ifbetais 0, theninputwill be ignored, andnanandinfin",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.addmm.html#torch.addmm"
        },
        {
            "question:-": "  For inputs of typeFloatTensororDoubleTensor, argumentsbetaandalphamust be what ",
            "answer:-": "   real numbers ",
            "context:-": "   For inputs of typeFloatTensororDoubleTensor, argumentsbetaandalphamust be real numbers, otherwise they should be integers. This operator supportsTensorFloat32. input(Tensor) – matrix to be added mat1(Tensor) – the first matrix to be matrix multiplied mat2(Tensor) – the second matrix to be matrix multiplied beta(Number,optional) – multiplier forinput(β\\betaβ) alpha(Number,optional) – multiplier format1@mat2mat1 @ mat2mat1@mat2(α\\alphaα) out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.addmm.html#torch.addmm"
        },
        {
            "question:-": "  What is input(Tensor)? ",
            "answer:-": "   input(Tensor) – tensor to split ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.addmm.html#torch.addmm"
        },
        {
            "question:-": "  What do argumentsbeta andalphamust be? ",
            "answer:-": "   argumentsbetaandalphamust be real numbers ",
            "context:-": "   Ifbetais 0, theninputwill be ignored, andnanandinfin",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is the first matrix to be matrix multiplied? ",
            "answer:-": "   mat1(Tensor) ",
            "context:-": "   Ifbetais 0, theninputwill be ignored, andnanandinfin",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.addmm.html#torch.addmm"
        },
        {
            "question:-": "  What is the output tensor? ",
            "answer:-": "   out(Tensor,optional) ",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.addmm.html#torch.addmm"
        },
        {
            "question:-": "  What contains data structures for multi-dimensional tensors and defines mathematical operations over these tensors? ",
            "answer:-": "   The torch package ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What does the torch package provide? ",
            "answer:-": "   it provides many utilities for efficient serializing of Tensors and arbitrary types, and other useful utilities ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does torch have that enables you to run your tensor computations on an NVIDIA GPU with compute capability >= 3.0? ",
            "answer:-": "   CUDA counterpart ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the CUDA counterpart return? ",
            "answer:-": "   True ifobjis a PyTorch storage object ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What package contains data structures for multi-dimensional tensors? ",
            "answer:-": "   torch ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What utility does the torch package provide for Tensors and arbitrary types? ",
            "answer:-": "   efficient serializing ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the counterpart of the torch package? ",
            "answer:-": "   CUDA ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does True ifobjis return? ",
            "answer:-": "   PyTorch storage object ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What enables you to run your tensor computations on an NVIDIA GPU with compute capability >= 3.0? ",
            "answer:-": "   CUDA counterpart ",
            "context:-": "   It has a CUDA counterpart, that enables you to run your tensor computations",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does True return ifobjis a PyTorch tensor? ",
            "answer:-": "   PyTorch storage object ",
            "context:-": "   It has a CUDA counterpart, that enables you to run your tensor computations",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are two examples of a complex data type? ",
            "answer:-": "   one oftorch.complex64, andtorch.complex128 ",
            "context:-": "   Returns True if the data type ofinputis a complex data type i.e.,",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of data type is the data type ofinput? ",
            "answer:-": "   complex data type ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.is_complex.html#torch.is_complex"
        },
        {
            "question:-": "  What is the name of the GPU that allows you to run tensor computations on an NVIDIA GPU with compute capability >= 3.0 ",
            "answer:-": "   CUDA ",
            "context:-": "   It has a CUDA counterpart, that enables you to run your tensor computations",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns True if the data type ofinput is a what? ",
            "answer:-": "   complex data type ",
            "context:-": "   It has a CUDA counterpart, that enables you to run your tensor computations",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns True if the data type ofinputis a what type of data type? ",
            "answer:-": "   floating point ",
            "context:-": "   It has a CUDA counterpart, that enables you to run your tensor computations",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns True ifobjis a what? ",
            "answer:-": "   PyTorch storage object ",
            "context:-": "   Returns True ifobjis a PyTorch storage object.   Returns True if the data type ofinputis a complex data type i.e., one oftorch.complex64, andtorch.complex128.   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns True if the data type ofinputis a what? ",
            "answer:-": "   floating point data type ",
            "context:-": "   Returns True if the data type ofinputis a complex data type i.e., one oftorch.complex64, andtorch.complex128.   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is not equal to zero after type conversions? ",
            "answer:-": "   a single element tensor ",
            "context:-": "   Returns True ifobjis a PyTorch storage object.   Returns True if the data type ofinputis a complex data type i.e., one oftorch.complex64, andtorch.complex128.   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Returns True if the data type ofinputis a single element tensor which is not equal to zero after type conversion ",
            "answer:-": "   Sets the default floating point dtype tod ",
            "context:-": "   Returns True ifobjis a PyTorch tensor.   Returns True ifobjis a PyTorch storage object.   Returns True if the data type ofinputis a complex data type i.e., one oftorch.complex64, andtorch.complex128.   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned ifobjis a PyTorch storage object? ",
            "answer:-": "   PyTorch storage object ",
            "context:-": "   Returns True ifobjis a PyTorch storage object.   Returns True if the data type ofinputis a complex data type i.e., one oftorch.complex64, andtorch.complex128.   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns True what if theinputis a single element tensor? ",
            "answer:-": "   if theinputis a single element tensor ",
            "context:-": "   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do if the input is a single element tensor which is not equal to zero after type conversions? ",
            "answer:-": "   Sets the default floating point dtype tod ",
            "context:-": "   Returns True ifobjis a PyTorch storage object.   Returns True if the data type ofinputis a complex data type i.e., one oftorch.complex64, andtorch.complex128.   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Sets the default floating point dtype tod return? ",
            "answer:-": "   current default floating pointtorch.dtype ",
            "context:-": "   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do if the data type ofinputis a single element tensor which is not equal to zero after type conversions ",
            "answer:-": "   Sets the default floating point dtype tod ",
            "context:-": "   Returns True if the data type ofinputis a complex data type i.e., one oftorch.complex64, andtorch.complex128.   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what if the data type ofinputis a floating point data type? ",
            "answer:-": "   True ",
            "context:-": "   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do if the input is a single element tensor? ",
            "answer:-": "   Sets the default floating point dtype tod ",
            "context:-": "   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Sets what to floating point tensor typet? ",
            "answer:-": "   defaulttorch.Tensortype ",
            "context:-": "   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when the defaulttorch.Tensortype is set to floating point tensor typet? ",
            "answer:-": "   the total number of elements in theinputtensor ",
            "context:-": "   Returns True ifobjis a PyTorch tensor.   Returns True ifobjis a PyTorch storage object.   Returns True if the data type ofinputis a complex data type i.e., one oftorch.complex64, andtorch.complex128.   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Set options for what? ",
            "answer:-": "   printing ",
            "context:-": "   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what if theinputis a single element tensor which is not equal to zero after type conversions? ",
            "answer:-": "   True ",
            "context:-": "   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Sets what? ",
            "answer:-": "   default floating point dtype tod ",
            "context:-": "   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the default floating pointtorch.dtype? ",
            "answer:-": "   current ",
            "context:-": "   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned by the defaulttorch.Tensortype? ",
            "answer:-": "   the total number of elements in theinputtensor ",
            "context:-": "   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Disables what on CPU? ",
            "answer:-": "   denormal floating numbers ",
            "context:-": "   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Disables denormal floating numbers on CPU? ",
            "answer:-": "   Note ",
            "context:-": "   Returns True ifobjis a PyTorch storage object.   Returns True if the data type ofinputis a complex data type i.e., one oftorch.complex64, andtorch.complex128.   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the default floating point dtype tod? ",
            "answer:-": "   current default floating pointtorch.dtype ",
            "context:-": "   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned by setting the defaulttorch.Tensortype to floating point tensor typet? ",
            "answer:-": "   the total number of elements in theinputtensor ",
            "context:-": "   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What do you get? ",
            "answer:-": "   current default floating pointtorch.dtype ",
            "context:-": "   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the defaulttorch.Tensortype set to? ",
            "answer:-": "   floating point tensor typet ",
            "context:-": "   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the total number of elements in what? ",
            "answer:-": "   theinputtensor ",
            "context:-": "   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do to denormal floating numbers on CPU? ",
            "answer:-": "   Disables ",
            "context:-": "   Returns True ifobjis a PyTorch tensor.   Returns True ifobjis a PyTorch storage object.   Returns True if the data type ofinputis a complex data type i.e., one oftorch.complex64, andtorch.complex128.   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the command that disables denormal floating numbers on CPU? ",
            "answer:-": "   Note ",
            "context:-": "   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what in the inputtensor? ",
            "answer:-": "   total number of elements ",
            "context:-": "   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is set to floating point tensor typet? ",
            "answer:-": "   defaulttorch.Tensortype ",
            "context:-": "   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does this do? ",
            "answer:-": "   Concatenates a sequence of tensors along a new dimension ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the variable that can be used to set denormal floating numbers on the CPU? ",
            "answer:-": "   Note ",
            "context:-": "   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does this function do? ",
            "answer:-": "   Computes the Kaiser window ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are listed under Random sampling? ",
            "answer:-": "   Random sampling creation ops ",
            "context:-": "   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do to a tensor? ",
            "answer:-": "   Splits a tensor into a specific number of chunks ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the return return? ",
            "answer:-": "   the total number of elements in theinputtensor ",
            "context:-": "   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of creation ops are listed under Random sampling? ",
            "answer:-": "   Random sampling ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is constructed withdata? ",
            "answer:-": "   a tensor ",
            "context:-": "   Constructs a tensor withdata.   Constructs asparse tensor in COO(rdinate) formatwith specified values at the givenindices.   Convert the data into atorch.Tensor.   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do? ",
            "answer:-": "   Draws binary random numbers (0 or 1) from a Bernoulli distribution ",
            "context:-": "   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do on the CPU? ",
            "answer:-": "   Disables denormal floating numbers ",
            "context:-": "   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it construct withdata? ",
            "answer:-": "   tensor ",
            "context:-": "   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do to disable denormal floating numbers on CPU? ",
            "answer:-": "   Set options for printing ",
            "context:-": "   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor does it construct? ",
            "answer:-": "   tensor withdata ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What format is the asparse tensor in? ",
            "answer:-": "   COO(rdinate) ",
            "context:-": "   Constructs a tensor withdata.   Constructs asparse tensor in COO(rdinate) formatwith specified values at the givenindices.   Convert the data into atorch.Tensor.   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What creation ops are listed under Random sampling? ",
            "answer:-": "   Random sampling ",
            "context:-": "   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does asparse tensor in COO(rdinate) format contain? ",
            "answer:-": "   specified values at the givenindices ",
            "context:-": "   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What do you convert the data into? ",
            "answer:-": "   atorch.Tensor ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the asparse tensor contain? ",
            "answer:-": "   specified values at the givenindices ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the data converted into? ",
            "answer:-": "   atorch.Tensor ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Convert the data into what? ",
            "answer:-": "   atorch.Tensor ",
            "context:-": "   Convert the data into atorch.Tensor.   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Create a view of an existingtorch.Tensorinputwith what? ",
            "answer:-": "   specifiedsize,strideandstorage_offset ",
            "context:-": "   Convert the data into atorch.Tensor.   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where is the aTensor created from? ",
            "answer:-": "   anumpy.ndarray ",
            "context:-": "   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the tensor filled with? ",
            "answer:-": "   uninitialized data ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the size of the scalar value0? ",
            "answer:-": "   the same size asinput ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the shape of the scalar value1? ",
            "answer:-": "   the shape defined by the variable argumentsize ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the size of the scalar value1? ",
            "answer:-": "   the same size asinput ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the shape of the scalar value0? ",
            "answer:-": "   the shape defined by the variable argumentsize ",
            "context:-": "   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the aTensor created from? ",
            "answer:-": "   anumpy.ndarray ",
            "context:-": "   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with the shape defined by the variable argumentsize. Returns a tensor filled with what value ",
            "answer:-": "   scalar value1 ",
            "context:-": "   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with what value? ",
            "answer:-": "   scalar value1 ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the scalar value0 return? ",
            "answer:-": "   the shape defined by the variable argumentsize ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when the scalar value0 is returned? ",
            "answer:-": "   a tensor ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with the scalar value0, with what as input? ",
            "answer:-": "   same size ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize. Returns a ",
            "answer:-": "   same size ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned with the same size asinput? ",
            "answer:-": "   a tensor filled with the scalar value0 ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What shape does the scalar value1 have? ",
            "answer:-": "   the shape defined by the variable argumentsize ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the shape defined by the variable argumentsize? ",
            "answer:-": "   the same size asinput ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the size of the tensor? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with the scalar value1 with what? ",
            "answer:-": "   the shape defined by the variable argumentsize ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with the scalar value1, with what as input? ",
            "answer:-": "   same size ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what tensor of sizeendstartstepleftlceil fractextend -  ",
            "answer:-": "   1-D tensor ",
            "context:-": "   Constructs asparse tensor in COO(rdinate) formatwith specified values at the givenindices.   Convert the data into atorch.Tensor.   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What defines the shape of the tensor? ",
            "answer:-": "   variable argumentsize ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what type of tensor? ",
            "answer:-": "   a 1-D tensor ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the tensor of sizeendstartstepleftlceil fractextend? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the tensor of sizeendstartstep+1leftlfloor fractextend? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what type of scalar value? ",
            "answer:-": "   a tensor ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where are the values from the interval[start,end]taken? ",
            "answer:-": "   fromstart ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with the scalar value of how many tensors? ",
            "answer:-": "1",
            "context:-": "   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the tensor of sizeendstartstep? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How big is the tensor of sizeendstartstep? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is created when the values are evenly spaced fromstarttoend? ",
            "answer:-": "   one-dimensional ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where are the values from the interval[start,end] taken? ",
            "answer:-": "   fromstart ",
            "context:-": "   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How many tensors does this function return? ",
            "answer:-": "1",
            "context:-": "   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor of sizesteps is created? ",
            "answer:-": "   one-dimensional ",
            "context:-": "   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor of sizesteps of how many dimensions? ",
            "answer:-": "1",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the logarithmic scale of the tensor? ",
            "answer:-": "   basebase ",
            "context:-": "   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is returned with zeros and ones on the diagonal? ",
            "answer:-": "   2-D ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  On a logarithmic scale, what is used to create a one-dimensional tensor of sizesteps? ",
            "answer:-": "   basebase ",
            "context:-": "   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a 2-D tensor with what? ",
            "answer:-": "   ones on the diagonal and zeros elsewhere ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with what? ",
            "answer:-": "   uninitialized data ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is created? ",
            "answer:-": "   one-dimensional ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns an uninitialized tensor with the same size as input? ",
            "answer:-": "   Returns an uninitialized tensor with the same size asinput ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the Splitsinput do? ",
            "answer:-": "   Concatenates the given sequence ofseqtensors in the given dimension ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What splits a tensor with three or more dimensions into multiple tensors depthwise according toindices_or_section ",
            "answer:-": "   Splitsinput ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How does one create a new tensor? ",
            "answer:-": "   horizontally stacking the tensors intensors ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Stack tensors in sequence depthwise (along what axis)? ",
            "answer:-": "   third axis ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the axis specified by? ",
            "answer:-": "   bydim ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the given sequence ofseqtensors in the given dimension do? ",
            "answer:-": "   Concatenates ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens when a tensor is broken into chunks? ",
            "answer:-": "   Splits ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Splitsinput use to split a tensor into multiple tensors depthwise? ",
            "answer:-": "   indices_or_sections ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What creates a new tensor? ",
            "answer:-": "   horizontally stacking the tensors intensors ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do to create a new tensor? ",
            "answer:-": "   Stack tensors ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the axis where values are collected? ",
            "answer:-": "   bydim ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Splits a tensor into a specific number of what? ",
            "answer:-": "   chunks ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How many dimensions does a Splitsinput have? ",
            "answer:-": "   three or more ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Splitsinput do? ",
            "answer:-": "   Gathers values along an axis specified bydim ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How many dimensions does a tensor have? ",
            "answer:-": "   one or more dimensions ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Splits a tensor into? ",
            "answer:-": "   a specific number of chunks ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How many tensors does Splitsinput split into? ",
            "answer:-": "   multiple tensors depthwise ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a tensor do in sequence depthwise? ",
            "answer:-": "   Stack tensors ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the axis specified by Splitsinput? ",
            "answer:-": "   bydim ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How many tensors can a tensor with one or more dimensions be split into? ",
            "answer:-": "   multiple tensors horizontally ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a tensor with three or more dimensions called? ",
            "answer:-": "   Splitsinput ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Splitsinput is a tensor with how many dimensions? ",
            "answer:-": "   one or more dimensions ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).    ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  Stack tensors in sequence where? ",
            "answer:-": "   horizontally ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Splitsinput use to split a tensor? ",
            "answer:-": "   indices_or_sections ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Splitsinput do to create a new tensor? ",
            "answer:-": "   Stack tensors ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What do tensors with one or more dimensions splitsinput into? ",
            "answer:-": "   multiple tensors horizontally ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Stack tensors in sequence horizontally (what? ",
            "answer:-": "   column wise ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_section ",
            "answer:-": "   Splitsinput ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How do you stack tensors in order to create a new tensor? ",
            "answer:-": "   Stack tensors in sequence horizontally ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the index of the new tensor that indexes theinputtensor along dimensiondimusing the entries inindex? ",
            "answer:-": "   aLongTensor ",
            "context:-": "   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where do tensors stack in sequence? ",
            "answer:-": "   depthwise ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Stack tensors do? ",
            "answer:-": "   Gathers values along an axis specified bydim ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the tensor that splitsinput into multiple tensors horizontally? ",
            "answer:-": "   indices_or_sections ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Stack tensors in sequence horizontally (what way)? ",
            "answer:-": "   column wise ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does aLongTensor do? ",
            "answer:-": "   indexes theinputtensor along dimensiondimusing the entries inindex ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a tensor with one or more dimensions called? ",
            "answer:-": "   Splitsinput ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Stack tensors in sequence which way? ",
            "answer:-": "   horizontally ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the index of a new tensor that indexes theinputtensor along dimension? ",
            "answer:-": "   aLongTensor ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Which tensor indexes theinputtensor according to the boolean maskmask? ",
            "answer:-": "   1-D ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is splitsinput? ",
            "answer:-": "   a tensor with three or more dimensions ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the boolean maskmask? ",
            "answer:-": "   aBoolTensor ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the function that gathers values along an axis specified bydim? ",
            "answer:-": "   Gathers values along an axis specified bydim ",
            "context:-": "   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of a tensor that indexes theinputtensor along dimensiondimusing the entries inindex? ",
            "answer:-": "   Stack ",
            "context:-": "   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the tensor that indexes theinputtensor along dimensiondimusing the entries inindex? ",
            "answer:-": "   aLongTensor ",
            "context:-": "   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor indexes theinputtensor according to the boolean maskmask? ",
            "answer:-": "   1-D ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How do you stack tensors in sequence horizontally? ",
            "answer:-": "   Stack tensors ",
            "context:-": "   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of a tensor that splitsinput into multiple tensors horizontally? ",
            "answer:-": "   Stack ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the new tensor that indexes theinputtensor along dimensiondimusing the entries inindex? ",
            "answer:-": "   aLongTensor ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does aBoolTensor do? ",
            "answer:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a tensor with one or more dimensions do horizontally? ",
            "answer:-": "   Stack tensors ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does move the dimension(s) ofinputat the position(s) insourceto the position(s) indestination? ",
            "answer:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How do you stack tensors in sequence? ",
            "answer:-": "   horizontally ",
            "context:-": "   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the index of the new tensor that indexes theinputtensor along dimension? ",
            "answer:-": "   aLongTensor ",
            "context:-": "   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor does aBoolTensor return? ",
            "answer:-": "   1-D ",
            "context:-": "   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a new tensor that is a narrowed version ofinputtensor? ",
            "answer:-": "   Alias fortorch.movedim() ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What kind of version of inputtensor is the new tensor? ",
            "answer:-": "   narrowed ",
            "context:-": "   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Stack tensors in sequence what? ",
            "answer:-": "   horizontally ",
            "context:-": "   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does fortorch.movedim() do? ",
            "answer:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is used to move the dimension(s) ofinputat the position(s) insourceto the position(s) indestination? ",
            "answer:-": "   Alias fortorch.movedim() ",
            "context:-": "   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor that is what? ",
            "answer:-": "   a narrowed version ofinputtensor ",
            "context:-": "   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor which indexes theinputtensor according to the boolean maskmask which is ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What method returns a new tensor that is a narrowed version ofinputtensor? ",
            "answer:-": "   Alias fortorch.movedim() ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the index that returns a new tensor that indexes theinputtensor along dimensiondimusing ",
            "answer:-": "   aLongTensor ",
            "context:-": "   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new 1-D tensor which indexes theinputtensor according to what boolean maskmask ",
            "answer:-": "   aBoolTensor ",
            "context:-": "   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor that indexes theinputtensor according to what boolean maskmask? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor that is a narrowed version ofinputtensor? ",
            "answer:-": "   Alias fortorch.movedim() ",
            "context:-": "   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is the new tensor? ",
            "answer:-": "   narrowed ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return a tensor with the same data and number of elements asinput, but with? ",
            "answer:-": "   the specified shape ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a tensor with the same data and number of elements asinput but with the specified shape? ",
            "answer:-": "   Alias oftorch.vstack() ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the version of oftorch.Tensor.scatter_()? ",
            "answer:-": "   Out-of-place ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does move the dimension(s) ofinput? ",
            "answer:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with the same data and number of elements asinput, but with what? ",
            "answer:-": "   specified shape ",
            "context:-": "   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a tensor with the same data and number of elements as input? ",
            "answer:-": "   Alias oftorch.vstack() ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the version oftorch.Tensor.scatter_()? ",
            "answer:-": "   Out-of-place ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do to the dimension(s) ofinput? ",
            "answer:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the tensor split into? ",
            "answer:-": "   chunks ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that moves the dimension(s) ofinput to the position(s) indestination? ",
            "answer:-": "   Alias fortorch.movedim() ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with the same data and number of elements as input, but with what? ",
            "answer:-": "   specified shape ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Out-of-place version oftorch.Tensor.scatter_add_() Splits the tensor into ",
            "answer:-": "   chunks ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that splits a tensor into chunks? ",
            "answer:-": "   Out-of-place version oftorch.Tensor.scatter_() ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with all the dimensions of what? ",
            "answer:-": "   size1removed ",
            "context:-": "   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What function returns a new tensor that is a narrowed version ofinputtensor? ",
            "answer:-": "   Alias fortorch.movedim() ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned with the same data and number of elements as input but with the specified shape? ",
            "answer:-": "   a tensor ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with what? ",
            "answer:-": "   all the dimensions ofinputof size1removed ",
            "context:-": "   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens to a sequence of tensors along a new dimension? ",
            "answer:-": "   Concatenates ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that concatenates a sequence of tensors along a new dimension? ",
            "answer:-": "   Alias fortorch.transpose() ",
            "context:-": "   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that converts a sequence of tensors along a new dimension? ",
            "answer:-": "   Alias fortorch.transpose() ",
            "context:-": "   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return a tensor with the same data and number of elements as input but with? ",
            "answer:-": "   the specified shape ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with all the dimensions ofinputof what? ",
            "answer:-": "   size1removed ",
            "context:-": "   Returns a tensor with all the dimensions ofinputof size1removed. For example, ifinputis of shape",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.transpose() do? ",
            "answer:-": "   Alias fortorch.transpose() ",
            "context:-": "   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What splits the tensor into chunks? ",
            "answer:-": "   Out-of-place version oftorch.Tensor.scatter_() ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with what data removed? ",
            "answer:-": "   all the dimensions ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is another name for fortorch.transpose()? ",
            "answer:-": "   Alias fortorch.transpose() ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the generator object produce? ",
            "answer:-": "   pseudo random numbers ",
            "context:-": "     Creates and returns a generator object that manages the state of the algorithm which produces pseudo random numbers.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of random number is the seed for generating random numbers? ",
            "answer:-": "   non-deterministic ",
            "context:-": "   Sets the seed for generating random numbers to a non-deterministic random number.   Sets the seed for generating random numbers.   Returns the initial seed for generating random numbers as a Pythonlong.   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do to a non-deterministic random number? ",
            "answer:-": "   Sets the seed for generating random numbers ",
            "context:-": "   Sets the seed for generating random numbers to a non-deterministic random number.   Sets the seed for generating random numbers.   Returns the initial seed for generating random numbers as a Pythonlong.   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the initial seed for generating random numbers? ",
            "answer:-": "   Pythonlong ",
            "context:-": "   Returns the initial seed for generating random numbers as a Pythonlong.   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the random number generator state? ",
            "answer:-": "   atorch.ByteTensor ",
            "context:-": "   Sets the seed for generating random numbers to a non-deterministic random number.   Sets the seed for generating random numbers.   Returns the initial seed for generating random numbers as a Pythonlong.   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does atorch.ByteTensor set? ",
            "answer:-": "   the random number generator state ",
            "context:-": "   Sets the seed for generating random numbers.   Returns the initial seed for generating random numbers as a Pythonlong.   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the random number generator state? ",
            "answer:-": "   atorch.ByteTensor ",
            "context:-": "   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does each row containnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of  ",
            "answer:-": "   a tensor ",
            "context:-": "   Returns the initial seed for generating random numbers as a Pythonlong.   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does atorch.ByteTensor do? ",
            "answer:-": "   Draws binary random numbers ",
            "context:-": "   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the random number generator state as what? ",
            "answer:-": "   atorch.ByteTensor ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row ",
            "answer:-": "   a tensor ",
            "context:-": "   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What are given to the tensor of random numbers drawn from separate normal distributions? ",
            "answer:-": "   mean and standard deviation ",
            "context:-": "   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a what of random numbers drawn from separate normal distributions whose mean and standard deviation are given? ",
            "answer:-": "   tensor ",
            "context:-": "   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the function do that draws binary random numbers from a Bernoulli distribution? ",
            "answer:-": "   Draws binary random numbers ",
            "context:-": "   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are given to the random numbers drawn from separate normal distributions? ",
            "answer:-": "   mean and standard deviation ",
            "context:-": "   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does each element in the tensor have? ",
            "answer:-": "   rate parameter given by the corresponding element ininputi ",
            "context:-": "   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor of random numbers drawn from separate normal distributions what are given? ",
            "answer:-": "   whose mean and standard deviation ",
            "context:-": "   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  The tensor returns a tensor of the same size as input with each element sampled from what distribution? ",
            "answer:-": "   Poisson ",
            "context:-": "   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What distribution is each element sampled from? ",
            "answer:-": "   Poisson distribution ",
            "context:-": "   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned with each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininput? ",
            "answer:-": "   a tensor of the same size asinput ",
            "context:-": "   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with what from a uniform distribution on the interval? ",
            "answer:-": "   random numbers ",
            "context:-": "   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of distribution is the tensor filled with random numbers from? ",
            "answer:-": "   uniform distribution ",
            "context:-": "   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where are the random integers generated uniformly? ",
            "answer:-": "   betweenlow(inclusive) andhigh(exclusive) ",
            "context:-": "   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1) Returns a  ",
            "answer:-": "   a tensor ",
            "context:-": "   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive)? ",
            "answer:-": "   exclusive ",
            "context:-": "   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned with the same shape as Tensorinput? ",
            "answer:-": "   tensor ",
            "context:-": "   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of distribution is used to fill a tensor with the same size as input? ",
            "answer:-": "   uniform distribution ",
            "context:-": "   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Random integers are generated uniformly betweenlow(inclusive) andhigh(exclusive)? ",
            "answer:-": "   exclusive ",
            "context:-": "   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1]? ",
            "answer:-": "   a tensor ",
            "context:-": "   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive)? ",
            "answer:-": "   tensor ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What shape does a tensor have? ",
            "answer:-": "   same shape ",
            "context:-": "   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the standard normal distribution? ",
            "answer:-": "   mean0and variance1 ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How are the random integers generated? ",
            "answer:-": "   uniformly ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with the same size as inputthat is filled with random numbers from a normal distribution with what? ",
            "answer:-": "   mean 0 and variance 1. ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a tensor with the same size as input? ",
            "answer:-": "   random permutation of integers from0ton-1 ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with the same size as input that is filled with random numbers from a normal distribution with what? ",
            "answer:-": "   mean 0 and variance 1. ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a random permutation of integers? ",
            "answer:-": "   from0ton-1 ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where are a few more in-place random sampling functions defined? ",
            "answer:-": "   Tensors ",
            "context:-": "   There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How do you refer to the documentation of in-place random sampling functions? ",
            "answer:-": "   Click through ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is another name for a normal distribution with mean0and variance1? ",
            "answer:-": "   standard normal distribution ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when a tensor is filled with random numbers from a normal distribution with mean 0 and variance 1? ",
            "answer:-": "   a tensor with the same size asinput ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are there a few more defined on Tensors? ",
            "answer:-": "   in-place random sampling functions ",
            "context:-": "   There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Click through to refer to what? ",
            "answer:-": "   their documentation ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What distribution does Tensor.log_normal_() sample from? ",
            "answer:-": "   log-normal ",
            "context:-": "   There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of distribution are random numbers sampled from? ",
            "answer:-": "   discrete uniform distribution ",
            "context:-": "   torch.Tensor.bernoulli_()- in-place version oftorch.bernoulli() torch.Tensor.cauchy_()- numbers drawn from the Cauchy distribution torch.Tensor.exponential_()- numbers drawn from the exponential distribution torch.Tensor.geometric_()- elements drawn from the geometric distribution torch.Tensor.log_normal_()- samples from the log-normal distribution torch.Tensor.normal_()- in-place version oftorch.normal() torch.Tensor.random_()- numbers sampled from the discrete uniform distribution  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are numbers sampled from the discrete uniform distribution torch? ",
            "answer:-": "   Tensor.random_() ",
            "context:-": "   torch.Tensor.bernoulli_()- in-place version oftorch.bernoulli() torch.Tensor.cauchy_()- numbers drawn from the Cauchy distribution torch.Tensor.exponential_()- numbers drawn from the exponential distribution torch.Tensor.geometric_()- elements drawn from the geometric distribution torch.Tensor.log_normal_()- samples from the log-normal distribution torch.Tensor.normal_()- in-place version oftorch.normal() torch.Tensor.random_()- numbers sampled from the discrete uniform distribution  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of distribution are the numbers in the Tensor.uniform_() sampled from? ",
            "answer:-": "   continuous uniform distribution ",
            "context:-": "   torch.Tensor.cauchy_()- numbers drawn from the Cauchy distribution torch.Tensor.exponential_()- numbers drawn from the exponential distribution torch.Tensor.geometric_()- elements drawn from the geometric distribution torch.Tensor.log_normal_()- samples from the log-normal distribution torch.Tensor.normal_()- in-place version oftorch.normal() torch.Tensor.random_()- numbers sampled from the discrete uniform distribution torch.Tensor.uniform_()- numbers sampled from the continuous uniform distribution  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of distribution are the numbers sampled from? ",
            "answer:-": "   continuous uniform distribution ",
            "context:-": "   torch.Tensor.cauchy_()- numbers drawn from the Cauchy distribution torch.Tensor.exponential_()- numbers drawn from the exponential distribution torch.Tensor.geometric_()- elements drawn from the geometric distribution torch.Tensor.log_normal_()- samples from the log-normal distribution torch.Tensor.normal_()- in-place version oftorch.normal() torch.Tensor.random_()- numbers sampled from the discrete uniform distribution torch.Tensor.uniform_()- numbers sampled from the continuous uniform distribution  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the engine that generates Sobol sequences? ",
            "answer:-": "   SobolEngine Thetorch.quasirandom ",
            "context:-": "   quasirandom.SobolEngine Thetorch.quasirandom.SobolEngineis an engine for generating (scrambled) Sobol sequences.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of sequence is generated by the SobolEngine Thetorch? ",
            "answer:-": "   quasirandom ",
            "context:-": "   quasirandom.SobolEngine Thetorch.quasirandom.SobolEngineis an engine for generating (scrambled) Sobol sequences.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does withtorch.save() save to a disk file? ",
            "answer:-": "   an object ",
            "context:-": "     Saves an object to a disk file.   Loads an object saved withtorch.save()from a file.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What method saves an object from a file? ",
            "answer:-": "   withtorch.save() ",
            "context:-": "     Saves an object to a disk file.   Loads an object saved withtorch.save()from a file.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do when an object is saved to a disk file? ",
            "answer:-": "   Saves an object to a disk file ",
            "context:-": "     Saves an object to a disk file.   Loads an object saved withtorch.save()from a file.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Loads an object saved what from a file? ",
            "answer:-": "   withtorch.save() ",
            "context:-": "     Saves an object to a disk file.   Loads an object saved withtorch.save()from a file.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Return? ",
            "answer:-": "   the number of threads used for parallelizing CPU operations ",
            "context:-": "     Returns the number of threads used for parallelizing CPU operations   Sets the number of threads used for intraop parallelism on CPU.   Returns the number of threads used for inter-op parallelism on CPU (e.g.   Sets the number of threads used for interop parallelism (e.g.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does this return? ",
            "answer:-": "   the number of threads used for inter-op parallelism on CPU ",
            "context:-": "     Returns the number of threads used for parallelizing CPU operations   Sets the number of threads used for intraop parallelism on CPU.   Returns the number of threads used for inter-op parallelism on CPU (e.g.   Sets the number of threads used for interop parallelism (e.g.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Sets the number of threads used for inter-op parallelism on CPU? ",
            "answer:-": "   the number of threads used for interop parallelism ",
            "context:-": "     Returns the number of threads used for parallelizing CPU operations   Sets the number of threads used for intraop parallelism on CPU.   Returns the number of threads used for inter-op parallelism on CPU (e.g.   Sets the number of threads used for interop parallelism (e.g.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the number of threads used for parallelizing CPU operations? ",
            "answer:-": "   Returns the number of threads used for parallelizing CPU operations ",
            "context:-": "     Returns the number of threads used for parallelizing CPU operations   Sets the number of threads used for intraop parallelism on CPU.   Returns the number of threads used for inter-op parallelism on CPU (e.g.   Sets the number of threads used for interop parallelism (e.g.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the number of threads used for what parallelism on CPU? ",
            "answer:-": "   inter-op ",
            "context:-": "     Returns the number of threads used for parallelizing CPU operations   Sets the number of threads used for intraop parallelism on CPU.   Returns the number of threads used for inter-op parallelism on CPU (e.g.   Sets the number of threads used for interop parallelism (e.g.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Returns the number of threads used for inter-op parallelism on CPU? ",
            "answer:-": "   Sets the number of threads used for interop parallelism ",
            "context:-": "     Returns the number of threads used for parallelizing CPU operations   Sets the number of threads used for intraop parallelism on CPU.   Returns the number of threads used for inter-op parallelism on CPU (e.g.   Sets the number of threads used for interop parallelism (e.g.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a context-manager do? ",
            "answer:-": "   disabled gradient calculation ",
            "context:-": "   Examples",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a context-manager enable? ",
            "answer:-": "   gradient calculation ",
            "context:-": "   Examples",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does context-manager set gradient calculation to? ",
            "answer:-": "   on or off ",
            "context:-": "   Examples",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does grad mode return if grad mode is currently enabled? ",
            "answer:-": "   True ",
            "context:-": "   Examples",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a Context-manager that enables or disables inference mode return if inference mode is currently enabled? ",
            "answer:-": "   True ",
            "context:-": "   Examples",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the manager that disabled gradient calculation? ",
            "answer:-": "   Context-manager ",
            "context:-": "   Examples",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a Context-manager do? ",
            "answer:-": "   enables gradient calculation ",
            "context:-": "   Examples",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a Context-manager set gradient calculation to? ",
            "answer:-": "   on or off ",
            "context:-": "   Examples",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is currently enabled by the Context-manager? ",
            "answer:-": "   grad mode ",
            "context:-": "   Examples",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What mode does a Context-manager enable or disable? ",
            "answer:-": "   inference mode ",
            "context:-": "   Examples",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.abs() compute of each element ininput? ",
            "answer:-": "   absolute value ",
            "context:-": "   Computes the absolute value of each element ininput.   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.abs() compute? ",
            "answer:-": "   the element-wise angle ",
            "context:-": "   Computes the absolute value of each element ininput.   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the inverse hyperbolic cosine of the elements ofinput? ",
            "answer:-": "   Alias fortorch.acosh() ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acos() return a new tensor with? ",
            "answer:-": "   inverse hyperbolic cosine ",
            "context:-": "   Computes the absolute value of each element ininput.   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acosh() do? ",
            "answer:-": "   Adds the scalarotherto each element of the inputinput ",
            "context:-": "   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the element-wise division oftensor1bytensor2 do? ",
            "answer:-": "   multiply the result by the scalarvalueand add it toinput ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What computes the inverse cosine of each element ininput? ",
            "answer:-": "   Alias fortorch.abs ",
            "context:-": "   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What function returns a new tensor with the inverse hyperbolic cosine of the elements ofinput? ",
            "answer:-": "   Alias fortorch.acosh() ",
            "context:-": "   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Alias fortorch.acos() returns a new tensor with what cosine of the elements of input? ",
            "answer:-": "   inverse hyperbolic ",
            "context:-": "   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the element-wise division performed by Alias fortorch.acosh? ",
            "answer:-": "   oftensor1bytensor2 ",
            "context:-": "   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acos() return? ",
            "answer:-": "   inverse hyperbolic cosine ",
            "context:-": "   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acosh() add to each element of inputinput? ",
            "answer:-": "   scalarotherto ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a new tensor with the inverse hyperbolic cosine of the elements of input ",
            "answer:-": "   Alias fortorch.acosh() ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the element-wise division performed by Alias fortorch.acosh()? ",
            "answer:-": "   oftensor1bytensor2 ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acos() compute of each element ininput? ",
            "answer:-": "   inverse cosine ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that computes the inverse cosine of each element ininput? ",
            "answer:-": "   Alias fortorch.acos() ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of cosine does Alias fortorch.acos() compute? ",
            "answer:-": "   hyperbolic ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the cosine of each element in input? ",
            "answer:-": "   inverse ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what cosine of the elements of input? ",
            "answer:-": "   inverse hyperbolic ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a new tensor with the inverse hyperbolic cosine of the elements ofin ",
            "answer:-": "   Alias fortorch.acosh() ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of cosine of the elements of input is returned by Alias fortorch.acos()? ",
            "answer:-": "   hyperbolic ",
            "context:-": "   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acosh() add to each element of the inputinput? ",
            "answer:-": "   scalarotherto ",
            "context:-": "   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acos() perform? ",
            "answer:-": "   the element-wise multiplication ",
            "context:-": "   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of cosine does Alias fortorch.acos() return? ",
            "answer:-": "   inverse hyperbolic ",
            "context:-": "   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the element-wise multiplication performed by Alias fortorch.acosh? ",
            "answer:-": "   oftensor1bytensor2 ",
            "context:-": "   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the inverse of the elements of input? ",
            "answer:-": "   hyperbolic sine ",
            "context:-": "   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What performs oftensor1bytensor2? ",
            "answer:-": "   element-wise division ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does oftensor1bytensor2 perform? ",
            "answer:-": "   element-wise multiplication ",
            "context:-": "   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  In what unit is the element-wise angle of the given inputtensor calculated? ",
            "answer:-": "   radians ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the cosine of the elements of input? ",
            "answer:-": "   inverse hyperbolic ",
            "context:-": "   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the element-wise division? ",
            "answer:-": "   oftensor1bytensor2 ",
            "context:-": "   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the element-wise multiplication? ",
            "answer:-": "   oftensor1bytensor2 ",
            "context:-": "   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes what of the given inputtensor? ",
            "answer:-": "   the element-wise angle ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Note Starting in PyTorch 1.8, angle returns pi for negative real numbers,",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that adds the scalarotherto each element of the inputinput? ",
            "answer:-": "   Alias fortorch.acosh() ",
            "context:-": "   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.angle.html#torch.angle"
        },
        {
            "question:-": "  What does oftensor1bytensor do? ",
            "answer:-": "   element-wise division ",
            "context:-": "   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the value of the element-wise angle of the given inputtensor? ",
            "answer:-": "   radians ",
            "context:-": "   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  The new tensor is returned with what element of the elements of input? ",
            "answer:-": "   arcsine ",
            "context:-": "   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that adds the scalarotherto each element of the input? ",
            "answer:-": "   Alias fortorch.acosh() ",
            "context:-": "   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the element-wise division performed by Alias fortorch.acosh? ",
            "answer:-": "   oftensor1bytensor2 ",
            "context:-": "   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what of the elements of input? ",
            "answer:-": "   arcsine ",
            "context:-": "   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Adds what to each element of the inputinput? ",
            "answer:-": "   scalarotherto ",
            "context:-": "   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does oftensor1bytensor perform? ",
            "answer:-": "   element-wise division ",
            "context:-": "   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the element that returns a new tensor? ",
            "answer:-": "   arcsine ",
            "context:-": "   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the tensor that returns a new tensor with the arcsine of the elements ofinput ",
            "answer:-": "   Alias fortorch.asin ",
            "context:-": "   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new resulting tensor? ",
            "answer:-": "   Adds the scalarotherto each element of the inputinput ",
            "context:-": "   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a new tensor with the arcsine of the elements ofinput? ",
            "answer:-": "   Alias fortorch.asin() ",
            "context:-": "   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the result of the element-wise multiplication oftensor1bytensor2 multiplied by? ",
            "answer:-": "   the scalarvalue ",
            "context:-": "   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the inverse hyperbolic sine of the elements of input? ",
            "answer:-": "   arctangent ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the arcsine of the elements ofinput? ",
            "answer:-": "   Alias fortorch.asin ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the arcsine of the elements of input? ",
            "answer:-": "   inverse hyperbolic sine ",
            "context:-": "   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the inverse hyperbolic sine of the elements ofinput? ",
            "answer:-": "   Alias fortorch.asinh() ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the element-wise division? ",
            "answer:-": "   oftensor1bytensor2 ",
            "context:-": "   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what of the elements ofinput? ",
            "answer:-": "   cosine ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does oftensor1bytensor2 multiply the result by? ",
            "answer:-": "   scalarvalue ",
            "context:-": "   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the arctangent of the elements ofinput? ",
            "answer:-": "   Alias fortorch.asinh() ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the element-wise multiplication? ",
            "answer:-": "   oftensor1bytensor2 ",
            "context:-": "   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the element-wise angle of the given inputtensor? ",
            "answer:-": "   radians ",
            "context:-": "   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.asin() return a new tensor with? ",
            "answer:-": "   inverse hyperbolic sine ",
            "context:-": "   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Alias fortorch.asinh(). Returns a new tensor with what of the elements ofinput ",
            "answer:-": "   arctangent ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  In what unit is the element-wise angle of a given inputtensor computed? ",
            "answer:-": "   radians ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.asinh() return? ",
            "answer:-": "   arctangent ",
            "context:-": "   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the inverse hyperbolic tangent of the elements ofinput? ",
            "answer:-": "   Alias fortorch.atan() ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.atan() return? ",
            "answer:-": "   inverse hyperbolic tangent ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the sine of the elements of input? ",
            "answer:-": "   inverse hyperbolic ",
            "context:-": "   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the inverse hyperbolic tangent of the elements ofinput? ",
            "answer:-": "   arctangent ",
            "context:-": "   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.atan() return a new tensor with? ",
            "answer:-": "   inverse hyperbolic tangent ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of sine does Alias fortorch.asin() return? ",
            "answer:-": "   inverse hyperbolic ",
            "context:-": "   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What element of input does Alias fortorch.asinh() return? ",
            "answer:-": "   arctangent ",
            "context:-": "   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the tensor returned by Alias fortorch.asin? ",
            "answer:-": "   inverse hyperbolic sine ",
            "context:-": "   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What element of the elements of input does Alias fortorch.asinh() return? ",
            "answer:-": "   arctangent ",
            "context:-": "   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the Alias fortorch.atan() return? ",
            "answer:-": "   inverse hyperbolic tangent ",
            "context:-": "   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a new tensor with the inverse hyperbolic sine of the elements ofinput? ",
            "answer:-": "   Alias fortorch.atanh() ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  With consideration of what is the arctangent ofinputi/otheri / textother_iinput ",
            "answer:-": "   the quadrant ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the inverse hyperbolic tangent of the elements of input? ",
            "answer:-": "   arctangent ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes what of the given input tensor? ",
            "answer:-": "   the bitwise NOT ",
            "context:-": "   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what sine of the elements of input? ",
            "answer:-": "   inverse hyperbolic ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Inputi/otheritextinput_i / textother_iinputi ",
            "answer:-": "   the quadrant ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the what of the given input tensor? ",
            "answer:-": "   bitwise ",
            "context:-": "   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tangent does the new tensor have? ",
            "answer:-": "   hyperbolic ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do with the inverse hyperbolic tangent of the elements of input? ",
            "answer:-": "   Computes the bitwise NOT of the given input tensor ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the Alias fortorch.atanh() do? ",
            "answer:-": "   Computes the bitwise OR ofinputandother ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the arctangent of the elements of input? ",
            "answer:-": "   Alias fortorch.asinh() ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the inverse hyperbolic tangent of the elements of input? ",
            "answer:-": "   Alias fortorch.atan() ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a new tensor with the inverse hyperbolic tangent of the elements of input ",
            "answer:-": "   Alias fortorch.atanh() ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.atanh() do? ",
            "answer:-": "   Computes the bitwise NOT of the given input tensor ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the bitwise OR of inputandother. ",
            "answer:-": "   AND ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes what? ",
            "answer:-": "   the natural logarithm of the absolute value of the gamma function oninput ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the indices of the maximum value of all elements in what? ",
            "answer:-": "   theinputtensor ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor. This is the second value returned bytorch.max(). See its",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Returns the indices of the minimum value of what? ",
            "answer:-": "   the flattened tensor or along a dimension ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor.   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What happens if all elements ininputevaluate toTrue? ",
            "answer:-": "   Tests ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Which element returns the maximum value of all elements in theinputtensor? ",
            "answer:-": "   input tensor ",
            "context:-": "   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the inputevaluate return? ",
            "answer:-": "   the maximum value of all elements in theinputtensor ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor.   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the indices of the maximum value of all elements in the inputtensor? ",
            "answer:-": "   Returns the indices of the maximum value of all elements in theinputtensor ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor.   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what? ",
            "answer:-": "   numerical rank of a 2-D tensor ",
            "context:-": "   Returns the numerical rank of a 2-D tensor. The method to compute the",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value of the inputtensor in the given dimension(s)dim? ",
            "answer:-": "   the minimum value of each slice ",
            "context:-": "   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  Returns the maximum value of all elements ininputtensor. ",
            "answer:-": "   Tests if all elements ininputevaluate toTrue ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor.   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Which element returns the maximum value of all elements ininputtensor? ",
            "answer:-": "   input tensor ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor.   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value of all elements in the inputtensor? ",
            "answer:-": "   mean value ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return? ",
            "answer:-": "   the minimum value of all elements in theinputtensor ",
            "context:-": "   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the return return return? ",
            "answer:-": "   the product of all elements in theinputtensor ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the minimum value of all elements in what? ",
            "answer:-": "   theinputtensor ",
            "context:-": "   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of (input-other)? ",
            "answer:-": "   p-norm ",
            "context:-": "   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the maximum value of each slice of the inputtensor in the given dimension(s)dim? ",
            "answer:-": "   the indices of the minimum value(s) of the flattened tensor or along a dimension ",
            "context:-": "   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do when all elements ininputevaluate toTrue? ",
            "answer:-": "   Tests if all elements ininputevaluate toTrue ",
            "context:-": "   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the minimum value of all elements in the inputtensor? ",
            "answer:-": "   Returns the minimum value of all elements in theinputtensor ",
            "context:-": "   the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the what of (input-other)? ",
            "answer:-": "   p-norm ",
            "context:-": "   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return the maximum value of each slice of theinputtensor in the given dimensiondim? ",
            "answer:-": "   the minimum value of each slice of theinputtensor in the given dimension(s)dim ",
            "context:-": "   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the input tensor do? ",
            "answer:-": "   Tests if all elements ininputevaluate toTrue ",
            "context:-": "   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return the maximum value of all elements in the inputtensor? ",
            "answer:-": "   the minimum value of all elements in theinputtensor ",
            "context:-": "   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the value of (input-other)? ",
            "answer:-": "   p-norm ",
            "context:-": "   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value of each slice of theinputtensor in the given dimension(s)dim? ",
            "answer:-": "   minimum value ",
            "context:-": "   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the minimum value of each slice of theinputtensor in the given dimension(s)dim? ",
            "answer:-": "   Returns the minimum value of each slice ",
            "context:-": "   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the minimum value of all elements in theinputtensor? ",
            "answer:-": "   Returns the minimum value of all elements in theinputtensor ",
            "context:-": "   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned for each row of the inputtensor in the given dimensiondim? ",
            "answer:-": "   the p-norm of (input-other) Returns the log of summed exponentials ",
            "context:-": "   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned in the given dimension(s)dim? ",
            "answer:-": "   the minimum value of each slice of theinputtensor ",
            "context:-": "   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim. ",
            "answer:-": "   p-norm ",
            "context:-": "   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of each row of the inputtensor in the given dimensiondim? ",
            "answer:-": "   the p-norm of (input-other) Returns the log of summed exponentials ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the maximum value of all elements in theinputtensor? ",
            "answer:-": "   Returns the maximum value of all elements in theinputtensor ",
            "context:-": "   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What value does the input tensor return? ",
            "answer:-": "   the minimum value of all elements in theinputtensor ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the p-norm of (input-other) return? ",
            "answer:-": "   the mean value of all elements in theinputtensor ",
            "context:-": "   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when the p-norm of (input-other) returns the log of summed exponentials of each row of ",
            "answer:-": "   the mean value of all elements in theinputtensor ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the value of the values ininput? ",
            "answer:-": "   median ",
            "context:-": "   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does ignoringNaNvalues return? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it test if all elements ininputevaluate toTrue? ",
            "answer:-": "   Tests if all elements ininputevaluate toTrue ",
            "context:-": "   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is used to test if all elements ininputevaluate toTrue? ",
            "answer:-": "   input tensor ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the input tensor return? ",
            "answer:-": "   the product of all elements in theinputtensor ",
            "context:-": "   the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value of the values ininput? ",
            "answer:-": "   median ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value ignoringNaNvalues? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What value of the values in input is returned? ",
            "answer:-": "   median ",
            "context:-": "   the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned ignoringNaNvalues? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the maximum value of all elements in the inputtensor? ",
            "answer:-": "   input tensor ",
            "context:-": "   the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the inputtensor return? ",
            "answer:-": "   the p-norm of (input-other) ",
            "context:-": "   the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the input tensor return ignoringNaNvalues? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What value of all elements in theinputtensor is returned? ",
            "answer:-": "   maximum value ",
            "context:-": "   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the log of summed exponentials of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   the p-norm of (input-other) Returns the log of summed exponentials ",
            "context:-": "   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value of all elements in theinputtensor? ",
            "answer:-": "   mean value ",
            "context:-": "   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the median of the values ininput, ignoring what? ",
            "answer:-": "   NaNvalues ",
            "context:-": "   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the minimum value of all elements in theinputtensor? ",
            "answer:-": "   p-norm ",
            "context:-": "   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned, ignoringNaNvalues? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the mode value of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   a namedtuple ",
            "context:-": "   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   the p-norm of (input-other) Returns the log of summed exponentials ",
            "context:-": "   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of the values ininput, ignoringNaNvalues? ",
            "answer:-": "   the median ",
            "context:-": "   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the mode value of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   namedtuple ",
            "context:-": "   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   p-norm ",
            "context:-": "   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the mode value of a given tensor? ",
            "answer:-": "   matrix norm or vector norm ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return the log of summed exponentials of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   the p-norm ",
            "context:-": "   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of the values ininput? ",
            "answer:-": "   the median ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of a given tensor? ",
            "answer:-": "   matrix norm or vector norm ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does each row of the inputtensor in the given dimensiondim return? ",
            "answer:-": "   the log of summed exponentials ",
            "context:-": "   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the function return? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the mode value of each row of the inputtensor in the given dimensiondim? ",
            "answer:-": "   a namedtuple ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   the log of summed exponentials ",
            "context:-": "   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value in the inputtensor? ",
            "answer:-": "   mean value of all elements ",
            "context:-": "   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the mean value of all elements in what? ",
            "answer:-": "   theinputtensor ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of norm does a given tensor return? ",
            "answer:-": "   matrix norm or vector norm ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the sum of all elements, treating Not a Numbers (NaNs) as what? ",
            "answer:-": "   zero ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the mode value of each row of the inputtensor in the given dimensiondim? ",
            "answer:-": "   namedtuple ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it return, ignoringNaNvalues? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are Not a Numbers (NaNs) treated as? ",
            "answer:-": "   zero ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when calculating the sum of all elements in the inputtensor? ",
            "answer:-": "   the product of all elements in theinputtensor ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are the quantiles of each row of theinputtensor along the dimensiondim? ",
            "answer:-": "   q-th ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the median of the values ininput, what? ",
            "answer:-": "   ignoringNaNvalues ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the what of a given tensor? ",
            "answer:-": "   matrix norm or vector norm ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does this function check if allinputandothersatisfy the condition? ",
            "answer:-": "   Returns the indices that sort a tensor along a given dimension in ascending order by value ",
            "context:-": "   This function checks if allinputandothersatisfy the condition",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  If two tensors have the same size and elements, what is element-wise equality? ",
            "answer:-": "   Trueif two tensors have the same size and elements ",
            "context:-": "   Returns the indices that sort a tensor along a given dimension in ascending order by value.   Computes element-wise equality   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns the indices that sort a tensor along a given dimension in ascending order by ",
            "answer:-": "   Alias fortorch.ge() ",
            "context:-": "   Returns the indices that sort a tensor along a given dimension in ascending order by value.   Computes element-wise equality   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.gt() do? ",
            "answer:-": "   Computesinput ",
            "context:-": "   Returns the indices that sort a tensor along a given dimension in ascending order by value.   Computes element-wise equality   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What function checks if allinputandothersatisfy the condition? ",
            "answer:-": "   Alias fortorch.gt() ",
            "context:-": "   This function checks if allinputandothersatisfy the condition",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the indices that sort a tensor along a given dimension in what order? ",
            "answer:-": "   ascending order by value ",
            "context:-": "   Returns the indices that sort a tensor along a given dimension in ascending order by value.   Computes element-wise equality   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that computes othertextinput > textotherinput>otherelement- ",
            "answer:-": "   Alias fortorch.gt() ",
            "context:-": "   Returns the indices that sort a tensor along a given dimension in ascending order by value.   Computes element-wise equality   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is true if two tensors have the same size and elements? ",
            "answer:-": "   Trueif two tensors have the same size and elements ",
            "context:-": "   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that computes othertextinput geq textotherinputother ",
            "answer:-": "   Alias fortorch.ge() ",
            "context:-": "   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.ge() do? ",
            "answer:-": "   Computesinput ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that computesinput>othertextinput > textotherinputother ",
            "answer:-": "   Alias fortorch.gt() ",
            "context:-": "   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return a new tensor with if each element ofinputis \"close\" to the corresponding element ofother? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what representation if each element isfiniteor not? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Computesinput>othertextinput > textotherinput>otherelement-wise? ",
            "answer:-": "   Alias fortorch.ge() ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that computesinput>othertextinput > textotherinput>other ",
            "answer:-": "   Alias fortorch.gt() ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Tests if each element ofinputis what? ",
            "answer:-": "   positive infinity ",
            "context:-": "   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Tests if each element ofinputis what or not? ",
            "answer:-": "   positive infinity ",
            "context:-": "   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the Alias fortorch.gt() do? ",
            "answer:-": "   Computesinput ",
            "context:-": "   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that computes input>othertextinput > textotherinput>othere ",
            "answer:-": "   Alias fortorch.gt() ",
            "context:-": "   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a new tensor with boolean elements? ",
            "answer:-": "   Alias fortorch.gt() ",
            "context:-": "   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the value of each element of input? ",
            "answer:-": "   infinite ",
            "context:-": "   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.gt() do if each element ofinputis negative infinity or not? ",
            "answer:-": "   Tests ",
            "context:-": "   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a new tensor with boolean elements represent? ",
            "answer:-": "   if each element ofinputis “close” to the corresponding element ofother ",
            "context:-": "   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with boolean elements representing what? ",
            "answer:-": "   if each element ofinputis real-valued or not ",
            "context:-": "   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Is each element ofinput positive or negative infinity or not? ",
            "answer:-": "   infinite ",
            "context:-": "   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Tests if each element ofinputis what infinity or not? ",
            "answer:-": "   negative ",
            "context:-": "   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what representation if each element ofinputis close to the corresponding element ofother? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Is each element of input infinite or not? ",
            "answer:-": "   infinite ",
            "context:-": "   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do if each element ofinputis negative infinity or not? ",
            "answer:-": "   Tests ",
            "context:-": "   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do if each element ofinputis positive infinity or not? ",
            "answer:-": "   Tests ",
            "context:-": "   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What element represents if each element ofinputis NaN or not? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what representation if each element ofinputis real-valued or not? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what elements? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the value of each element ofinput? ",
            "answer:-": "   infinite ",
            "context:-": "   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the infinity of each element ofinput? ",
            "answer:-": "   negative ",
            "context:-": "   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with boolean elements representing if each element ofinputis what? ",
            "answer:-": "   NaN ",
            "context:-": "   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with boolean elements representing if each element ofinput is what? ",
            "answer:-": "   real-valued ",
            "context:-": "   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Is each element of input infinite or infinite? ",
            "answer:-": "   infinite ",
            "context:-": "   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what type of elements? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what elements representing if each element ofinputis NaN or not? ",
            "answer:-": "   boolean ",
            "context:-": "   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the tensor that returns the smallest element of each row of the inputtensor in the given dimensiondim ",
            "answer:-": "   namedtuple ",
            "context:-": "   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the tensor wherevaluesis thekth smallest element of each row of the inputtensor in the ",
            "answer:-": "   namedtuple ",
            "context:-": "   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do if each element ofinput is negative infinity or not? ",
            "answer:-": "   Tests ",
            "context:-": "   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the value of a namedtuple? ",
            "answer:-": "   thekth smallest element of each row of theinputtensor in the given dimensiondim ",
            "context:-": "   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that computesinputothertextinput leq textotherin ",
            "answer:-": "   Alias fortorch.le() ",
            "context:-": "   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is STFT? ",
            "answer:-": "   Short-time Fourier transform ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the short time Fourier Transform? ",
            "answer:-": "   Inverse ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Who created the Blackman window function? ",
            "answer:-": "   Bartlett ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the window function? ",
            "answer:-": "   Hamming ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Which window function computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta? ",
            "answer:-": "   Hann ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the Kaiser window computed with? ",
            "answer:-": "   window lengthwindow_lengthand shape parameterbeta ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is another name for Short-time Fourier transform? ",
            "answer:-": "   Inverse short time Fourier Transform ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the view of each input tensor with zero dimensions? ",
            "answer:-": "   3-dimensional ",
            "context:-": "   Returns a 3-dimensional view of each input tensor with zero dimensions.   Count the frequency of each value in an array of non-negative ints.   Create a block diagonal matrix from provided tensors.   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does each value count in an array of non-negative ints? ",
            "answer:-": "   frequency ",
            "context:-": "   Returns a 1-dimensional view of each input tensor with zero dimensions.   Returns a 2-dimensional view of each input tensor with zero dimensions.   Returns a 3-dimensional view of each input tensor with zero dimensions.   Count the frequency of each value in an array of non-negative ints.   Create a block diagonal matrix from provided tensors.   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do with provided tensors? ",
            "answer:-": "   Create a block diagonal matrix ",
            "context:-": "   Returns a 2-dimensional view of each input tensor with zero dimensions.   Returns a 3-dimensional view of each input tensor with zero dimensions.   Count the frequency of each value in an array of non-negative ints.   Create a block diagonal matrix from provided tensors.   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Broadcast the given tensors according to? ",
            "answer:-": "   Broadcasting semantics ",
            "context:-": "   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Broadcastsinputto what? ",
            "answer:-": "   shapeshape ",
            "context:-": "   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of input is Broadcast_tensors() used for? ",
            "answer:-": "   shapes ",
            "context:-": "   Returns a 3-dimensional view of each input tensor with zero dimensions.   Count the frequency of each value in an array of non-negative ints.   Create a block diagonal matrix from provided tensors.   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Count the what of each value in an array of non-negative ints? ",
            "answer:-": "   frequency ",
            "context:-": "   Returns a 2-dimensional view of each input tensor with zero dimensions.   Returns a 3-dimensional view of each input tensor with zero dimensions.   Count the frequency of each value in an array of non-negative ints.   Create a block diagonal matrix from provided tensors.   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a 3-dimensional view of each input tensor with what dimension? ",
            "answer:-": "   zero ",
            "context:-": "   Returns a 3-dimensional view of each input tensor with zero dimensions.   Count the frequency of each value in an array of non-negative ints.   Create a block diagonal matrix from provided tensors.   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the count of each value in an array of non-negative ints? ",
            "answer:-": "   frequency ",
            "context:-": "   Returns a 3-dimensional view of each input tensor with zero dimensions.   Count the frequency of each value in an array of non-negative ints.   Create a block diagonal matrix from provided tensors.   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What do you do with the provided tensors? ",
            "answer:-": "   Create a block diagonal matrix ",
            "context:-": "   Returns a 3-dimensional view of each input tensor with zero dimensions.   Count the frequency of each value in an array of non-negative ints.   Create a block diagonal matrix from provided tensors.   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of input is broadcasted? ",
            "answer:-": "   shapeshape ",
            "context:-": "   Returns a 3-dimensional view of each input tensor with zero dimensions.   Count the frequency of each value in an array of non-negative ints.   Create a block diagonal matrix from provided tensors.   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where are the indices of the buckets to which each value in the inputbelongs? ",
            "answer:-": "   the boundaries of the buckets are set byboundaries ",
            "context:-": "   Returns a 3-dimensional view of each input tensor with zero dimensions.   Count the frequency of each value in an array of non-negative ints.   Create a block diagonal matrix from provided tensors.   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the same as Broadcast_tensors() but for? ",
            "answer:-": "   shapes ",
            "context:-": "   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where are the indices of the buckets to which each value in theinputbelongs? ",
            "answer:-": "   the boundaries of the buckets are set byboundaries ",
            "context:-": "   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the given sequence of tensors? ",
            "answer:-": "   Do cartesian product ",
            "context:-": "   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is batched between each pair of the two collections of row vectors? ",
            "answer:-": "   p-norm distance ",
            "context:-": "   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when calculating the p-norm distance between each pair of the two collections of row vectors? ",
            "answer:-": "   copy ofinput ",
            "context:-": "   Broadcasts the given tensors according toBroadcasting semantics.   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the input to the shapeshape? ",
            "answer:-": "   Broadcastsinput ",
            "context:-": "   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Broadcastsinputto what shape? ",
            "answer:-": "   shapes ",
            "context:-": "   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Broadcastsinput return? ",
            "answer:-": "   the indices of the buckets ",
            "context:-": "   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned by Broadcastsinput to the shapeshape? ",
            "answer:-": "   Do cartesian product of the given sequence of tensors ",
            "context:-": "   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes batched what? ",
            "answer:-": "   p-norm distance between each pair of the two collections of row vectors ",
            "context:-": "   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when the p-norm distance between each pair of row vectors is computed? ",
            "answer:-": "   a copy ofinput ",
            "context:-": "   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do to return a copy ofinput? ",
            "answer:-": "   Compute combinations of lengthrrrof the given tensor ",
            "context:-": "   Broadcastsinputto the shapeshape.   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the product of the given sequence of tensors? ",
            "answer:-": "   cartesian ",
            "context:-": "   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the function that returns the cross product of vectors in dimensiondimofinputandother? ",
            "answer:-": "   Compute combinations of lengthrrrof the given tensor ",
            "context:-": "   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does dimensiondimofinputandother return? ",
            "answer:-": "   the cross product of vectors ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.     ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the cumulative maximum of elements ofinputin the dimensiondim? ",
            "answer:-": "   a namedtuple ",
            "context:-": "   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the cumulative maximum of elements ofinputin the dimensiondim? ",
            "answer:-": "   a namedtuple ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the cumulative minimum of elements ofinputin the dimensiondim? ",
            "answer:-": "   a namedtuple ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when a namedtuple(values,indices) returns the cumulative minimum of elements ofinputin the dimensiondim ",
            "answer:-": "   cumulative product of elements ofinputin the dimensiondim ",
            "context:-": "   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Returns the cumulative product of elements ofinputin the dimensiondim? ",
            "answer:-": "   the cumulative sum of elements ofinputin the dimensiondim ",
            "context:-": "   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.     ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the sum of elements ofinputin the dimensiondim? ",
            "answer:-": "   cumulative product ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.     ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when a namedtuple(values,indices) returns the cumulative product of elements ofinputin the dimensiondim ",
            "answer:-": "   the cumulative sum of elements ofinputin the dimensiondim ",
            "context:-": "   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is reduced in the batch matrix-matrix product of matrices stored inbatch1andbatch2? ",
            "answer:-": "   add step ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is performed of the matricesmat1andmat2? ",
            "answer:-": "   matrix multiplication ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the matrixmatand the vectorvec perform? ",
            "answer:-": "   matrix-vector product ",
            "context:-": "   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it perform and adds it to the matrixinput? ",
            "answer:-": "   outer-product of vectorsvec1andvec2 ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it perform of matrices inbatch1andbatch2? ",
            "answer:-": "   batch matrix-matrix product ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens to all matrix multiplications along the first dimension? ",
            "answer:-": "   all matrix multiplications get accumulated along the first dimension ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the matrix multiplication of matrices perform? ",
            "answer:-": "   matricesmat1andmat2 ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What product of the matrixmatand the vectorvec? ",
            "answer:-": "   matrix-vector product ",
            "context:-": "   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens to the outer-product of vectorsvec1andvec2? ",
            "answer:-": "   adds it to the matrixinput ",
            "context:-": "   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the matrices that performs a batch matrix-matrix product? ",
            "answer:-": "   inbatch1andbatch2 ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Performs what of the matricesmat1 andmat2? ",
            "answer:-": "   matrix multiplication ",
            "context:-": "   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What product of vectorsvec1 andvec2 is added to the matrixinput? ",
            "answer:-": "   outer-product ",
            "context:-": "   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What performs a batch matrix-matrix product of matrices stored ininputandmat2? ",
            "answer:-": "   batch matrix-matrix product of matrices inbatch1andbatch2. ",
            "context:-": "   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where are matrices stored? ",
            "answer:-": "   ininputandmat2 ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the matrix product of? ",
            "answer:-": "   NNN2-D tensors ",
            "context:-": "   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is performed of the matrixmatand the vectorvec? ",
            "answer:-": "   matrix-vector product ",
            "context:-": "   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the matrix-vector product of matrices perform? ",
            "answer:-": "   batch matrix-matrix product of matrices inbatch1andbatch2 ",
            "context:-": "   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the matrix product of what? ",
            "answer:-": "   NNN2-D tensors ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Who computes the decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices ",
            "answer:-": "   Cholesky ",
            "context:-": "   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Performs the outer-product of what and adds it to the matrixinput? ",
            "answer:-": "   vectorsvec1andvec2 ",
            "context:-": "   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What performs the outer-product of vectorsvec1 andvec2? ",
            "answer:-": "   batch matrix-matrix product of matrices inbatch1andbatch2 ",
            "context:-": "   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What decomposition of a symmetric positive-definite matrixAAor is computed for batches of symmetric positive-definite matrices ",
            "answer:-": "   Cholesky ",
            "context:-": "   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the inverse of a symmetric positive-definite matrix? ",
            "answer:-": "   returns matrixinv ",
            "context:-": "   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a linear system of equations with a positive semidefinite matrix to be inverted do? ",
            "answer:-": "   Solves ",
            "context:-": "   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is used to perform a batch matrix-matrix product? ",
            "answer:-": "   matrices stored ininputandmat2 ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the matrix product of theNNN2-D tensors? ",
            "answer:-": "   Returns the matrix product of theNNN2-D tensors ",
            "context:-": "   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices ",
            "answer:-": "   Cholesky ",
            "context:-": "   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the inverse of a symmetric positive-definite matrixAAAusing what? ",
            "answer:-": "   Cholesky factoruuu ",
            "context:-": "   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Solves what with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu? ",
            "answer:-": "   a ar system of equations ",
            "context:-": "   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the Cholesky factoruuu return? ",
            "answer:-": "   returns matrixinv ",
            "context:-": "   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the Cholesky factoruuu compute? ",
            "answer:-": "   dot product of two 1D tensors ",
            "context:-": "   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of theNNN2-D tensors? ",
            "answer:-": "   matrix product ",
            "context:-": "   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu return? ",
            "answer:-": "   matrixinv ",
            "context:-": "   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the Cholesky decomposition of for batches of symmetric positive-definite matrices? ",
            "answer:-": "   symmetric positive-definite matrixAAAor ",
            "context:-": "   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the inverse of a symmetric positive-definite matrix do? ",
            "answer:-": "   returns matrixinv ",
            "context:-": "   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a real square matrix compute? ",
            "answer:-": "   eigenvalues and eigenvectors ",
            "context:-": "   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned by Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu? ",
            "answer:-": "   matrixinv ",
            "context:-": "   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes what of a real square matrix? ",
            "answer:-": "   eigenvalues and eigenvectors ",
            "context:-": "   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Solves a linear system of equations with a positive semidefinite matrix to be inverted given what? ",
            "answer:-": "   Cholesky factor matrixuuu ",
            "context:-": "   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the dot product of two 1D tensors? ",
            "answer:-": "   Computes the dot product of two 1D tensors ",
            "context:-": "   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does this low-level function call directly? ",
            "answer:-": "   LAPACK’s geqrf ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the low-level function for calling LAPACK's geqrf directly? ",
            "answer:-": "   Alias oftorch.outer() ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the dot product for? ",
            "answer:-": "   1D tensors ",
            "context:-": "   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the matrixuuu of a positive semidefinite matrix? ",
            "answer:-": "   Cholesky factor ",
            "context:-": "    Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is this function for calling LAPACK's geqrf directly? ",
            "answer:-": "   low-level function ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the dot product for what? ",
            "answer:-": "   1D tensors ",
            "context:-": "   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a linear system of equations with a positive semidefinite matrix have to be inverted given? ",
            "answer:-": "   Cholesky factor matrixuuu ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does this function compute? ",
            "answer:-": "   the base two exponential function ofinput ",
            "context:-": "   Computes the exponential of the elements minus 1",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the eigenvalues and eigenvectors of what? ",
            "answer:-": "   real square matrix ",
            "context:-": "   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What does Alias oftorch.outer compute the dot product for? ",
            "answer:-": "   1D tensors ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that computes the dot product for 1D tensors? ",
            "answer:-": "   Alias fortorch.linalg.inv() ",
            "context:-": "   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  A linear system of equations with a positive semidefinite matrix to be inverted given what matrix? ",
            "answer:-": "   Cholesky factor matrix ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the low-level function for calling LAPACK’s geqrf directly? ",
            "answer:-": "   Alias oftorch.outer() ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a low-level function for calling LAPACK’s geqrf directly? ",
            "answer:-": "   Computes the eigenvalues and eigenvectors of a real square matrix ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is this function for calling LAPACK’s geqrf directly? ",
            "answer:-": "   low-level function ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias oftorch.outer() compute the dot product for? ",
            "answer:-": "   1D tensors ",
            "context:-": "   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.linalg.det() call? ",
            "answer:-": "   Alias fortorch.linalg.inv() ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the eigenvalues and eigenvectors of a real square matrix? ",
            "answer:-": "   dot product ",
            "context:-": "   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Is this a low-level function for calling LAPACK's geqrf directly? ",
            "answer:-": "   low-level function ",
            "context:-": "   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What calculates the dot product for 1D tensors? ",
            "answer:-": "   Alias oftorch.outer() ",
            "context:-": "   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.linalg.det() calculate of a square matrix or batches of square matrices ",
            "answer:-": "   log determinant ",
            "context:-": "   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What calculates the log determinant of a square matrix or batches of square matrices? ",
            "answer:-": "   Alias fortorch.linalg.slogdet() ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.linalg.det() calculate? ",
            "answer:-": "   log determinant ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What computes the dot product for 1D tensors? ",
            "answer:-": "   Alias oftorch.outer() ",
            "context:-": "     Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the dot product for 1D tensors? ",
            "answer:-": "   Alias oftorch.outer() ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a low-level function for calling LAPACK's geqrf directly? ",
            "answer:-": "   Alias oftorch.outer() ",
            "context:-": "   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias oftorch.outer() do? ",
            "answer:-": "   Computes the dot product for 1D tensors ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What problems does Alias fortorch.linalg.slogdet() solve? ",
            "answer:-": "   least squares and least norm problems ",
            "context:-": "     Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes what of a matrix or batches of matricesA? ",
            "answer:-": "   LU factorization ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the smallest size and scalar kind? ",
            "answer:-": "   thetorch.dtype ",
            "context:-": "     Returns thetorch.dtypewith the smallest size and scalar kind that is not smaller nor of lower kind than eithertype1ortype2.   Sets whether PyTorch operations must use “deterministic” algorithms.   Returns True if the global deterministic flag is turned on.   When this flag is False (default) then some PyTorch warnings may only appear once per process.   Returns True if the global warn_always flag is turned on.   A wrapper around Python’s assert which is symbolically traceable.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does thetorch.dtype do? ",
            "answer:-": "   Sets whether PyTorch operations must use “deterministic” algorithms ",
            "context:-": "     Returns thetorch.dtypewith the smallest size and scalar kind that is not smaller nor of lower kind than eithertype1ortype2.   Sets whether PyTorch operations must use “deterministic” algorithms.   Returns True if the global deterministic flag is turned on.   When this flag is False (default) then some PyTorch warnings may only appear once per process.   Returns True if the global warn_always flag is turned on.   A wrapper around Python’s assert which is symbolically traceable.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  If the global deterministic flag is turned on, what does it return? ",
            "answer:-": "   True ",
            "context:-": "     Returns thetorch.dtypewith the smallest size and scalar kind that is not smaller nor of lower kind than eithertype1ortype2.   Sets whether PyTorch operations must use “deterministic” algorithms.   Returns True if the global deterministic flag is turned on.   When this flag is False (default) then some PyTorch warnings may only appear once per process.   Returns True if the global warn_always flag is turned on.   A wrapper around Python’s assert which is symbolically traceable.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  When the global deterministic flag is turned on, some PyTorch warnings may only appear how many times per process? ",
            "answer:-": "   once per process ",
            "context:-": "     Returns thetorch.dtypewith the smallest size and scalar kind that is not smaller nor of lower kind than eithertype1ortype2.   Sets whether PyTorch operations must use “deterministic” algorithms.   Returns True if the global deterministic flag is turned on.   When this flag is False (default) then some PyTorch warnings may only appear once per process.   Returns True if the global warn_always flag is turned on.   A wrapper around Python’s assert which is symbolically traceable.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what if the global warn_always flag is turned on? ",
            "answer:-": "   True ",
            "context:-": "     Returns thetorch.dtypewith the smallest size and scalar kind that is not smaller nor of lower kind than eithertype1ortype2.   Sets whether PyTorch operations must use “deterministic” algorithms.   Returns True if the global deterministic flag is turned on.   When this flag is False (default) then some PyTorch warnings may only appear once per process.   Returns True if the global warn_always flag is turned on.   A wrapper around Python’s assert which is symbolically traceable.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  A wrapper around what's assert which is symbolically traceable? ",
            "answer:-": "   Python ",
            "context:-": "     Returns thetorch.dtypewith the smallest size and scalar kind that is not smaller nor of lower kind than eithertype1ortype2.   Sets whether PyTorch operations must use “deterministic” algorithms.   Returns True if the global deterministic flag is turned on.   When this flag is False (default) then some PyTorch warnings may only appear once per process.   Returns True if the global warn_always flag is turned on.   A wrapper around Python’s assert which is symbolically traceable.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the product of all elements in the inputtensor? ",
            "answer:-": "   Returns the product of all elements in theinputtensor ",
            "context:-": "   Returns the product of all elements in theinputtensor. input(Tensor) – the input tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the input tensor? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Note The returned tensor shares the storage with the input tensor,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What is the desired data type of returned tensor? ",
            "answer:-": "   dtype ",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What is casted todtype before the operation is performed? ",
            "answer:-": "   the input tensor ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  Why is the input tensor casted todtypebefore the operation is performed? ",
            "answer:-": "   preventing data type overflows ",
            "context:-": "   Returns the product of all elements in theinputtensor. input(Tensor) – the input tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  Returns the product of each row of the inputtensor in the given dimensiondim. ",
            "answer:-": "   None ",
            "context:-": "   Returns the product of all elements in theinputtensor. input(Tensor) – the input tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What is returned by the inputtensor? ",
            "answer:-": "   the product of each row of theinputtensor in the given dimensiondim ",
            "context:-": "   Returns the product of all elements in theinputtensor. input(Tensor) – the input tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  If specified, the input tensor is casted before the operation is performed. ",
            "answer:-": "   todtype ",
            "context:-": "   input(Tensor) – the input tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What is casted todtype useful for preventing? ",
            "answer:-": "   data type overflows ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What is the default value of the input tensor? ",
            "answer:-": "   None ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  dtype(torch.dtype, optional) – what type of returned tensor? ",
            "answer:-": "   desired data type ",
            "context:-": "   input(Tensor) – the input tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  Why is the input tensor casted todtype before the operation is performed? ",
            "answer:-": "   data type overflows ",
            "context:-": "   input(Tensor) – the input tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What is returned in the given dimensiondim? ",
            "answer:-": "   the product of each row of theinputtensor ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  This is useful for preventing what? ",
            "answer:-": "   data type overflows ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What is the function that returns the product of each row of the inputtensor in the given dimensiondim? ",
            "answer:-": "   Returns the product of each row of theinputtensor in the given dimensiondim ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What indicates that the output tensor is of the same size asinput? ",
            "answer:-": "   IfkeepdimisTrue ",
            "context:-": "   IfkeepdimisTrue, the output tensor is of the same size",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What does the output tensor have if keepdimisTrue? ",
            "answer:-": "   1 fewer dimension thaninput ",
            "context:-": "   Returns the product of each row of theinputtensor in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What is the dimension to reduce? ",
            "answer:-": "   dim(int) ",
            "context:-": "   input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What returns whether the output tensor hasdimretained or not? ",
            "answer:-": "   keepdim(bool) ",
            "context:-": "   input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What is returned by the output tensor if keepdimisTrue? ",
            "answer:-": "   Returns the product of each row of theinputtensor in the given dimensiondim ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  If the output tensor is of the same size as input, what does it do? ",
            "answer:-": "   IfkeepdimisTrue ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  If keepdimisTrue, the output tensor is of the same size asinput except in the dimensiondimwhere it is ",
            "answer:-": "   1 fewer dimension ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What determines whether the output tensor hasdimretained or not? ",
            "answer:-": "   keepdim(bool) ",
            "context:-": "   IfkeepdimisTrue, the output tensor is of the same size",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What does return in the given dimensiondim? ",
            "answer:-": "   the product of each row of theinputtensor ",
            "context:-": "   Returns the product of each row of theinputtensor in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  When is the output tensor of the same size asinput? ",
            "answer:-": "   IfkeepdimisTrue ",
            "context:-": "   Returns the product of each row of theinputtensor in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What returns the product of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   Returns the product of each row of theinputtensor in the given dimensiondim ",
            "context:-": "   Returns the product of each row of theinputtensor in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What returns the output tensor of the same size asinput except in the dimensiondim where it is of size 1? ",
            "answer:-": "   IfkeepdimisTrue ",
            "context:-": "   Returns the product of each row of theinputtensor in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  If keepdimisTrue, the output tensor has how many dimension fewer than input? ",
            "answer:-": "1",
            "context:-": "   Returns the product of each row of theinputtensor in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What happens if the output tensor is squeezed? ",
            "answer:-": "   1 fewer dimension thaninput ",
            "context:-": "   IfkeepdimisTrue, the output tensor is of the same size",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What makes the output tensor of the same size as input? ",
            "answer:-": "   IfkeepdimisTrue ",
            "context:-": "   IfkeepdimisTrue, the output tensor is of the same size",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  IfkeepdimisTrue, the output tensor has how much less dimension than input? ",
            "answer:-": "1",
            "context:-": "   IfkeepdimisTrue, the output tensor is of the same size",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What is the name of the file that is used by Alias fortorch.special.exp2? ",
            "answer:-": "   Alias fortorch.special.exp2() ",
            "context:-": "   Alias fortorch.special.exp2().  ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.prod.html#torch.prod"
        },
        {
            "question:-": "  What does Alias fortorch.special.exp2() do? ",
            "answer:-": "   Alias fortorch.special.exp2() ",
            "context:-": "   Alias fortorch.special.exp2().  ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.exp2.html#torch.exp2"
        },
        {
            "question:-": "  What type of element does the function return? ",
            "answer:-": "   tensor ",
            "context:-": "   Return a tensor of elements selected from eitherxory, depending oncondition. The operation is defined as",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.exp2.html#torch.exp2"
        },
        {
            "question:-": "  What is the operation defined as? ",
            "answer:-": "   tensorscondition,x,ymust bebroadcastable ",
            "context:-": "   Return a tensor of elements selected from eitherxory, depending oncondition. The operation is defined as",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What is the current valid scalar and tensor combination? ",
            "answer:-": "1",
            "context:-": "   Return a tensor of elements selected from eitherxory, depending oncondition. The operation is defined as",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What is the Scalar of presently valid scalar and tensor combination? ",
            "answer:-": "   integral dtype and torch ",
            "context:-": "   Return a tensor of elements selected from eitherxory, depending oncondition. The operation is defined as",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What is the scalar of dtype and torch? ",
            "answer:-": "   x ",
            "context:-": "   Return a tensor of elements selected from eitherxory, depending oncondition. The operation is defined as",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  Return what of elements selected from eitherxory, depending oncondition? ",
            "answer:-": "   a tensor ",
            "context:-": "   Return a tensor of elements selected from eitherxory, depending oncondition. The operation is defined as",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What are two examples of scalar and tensor combination? ",
            "answer:-": "   floating dtype and torch ",
            "context:-": "   Return a tensor of elements selected from eitherxory, depending oncondition. The operation is defined as",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What is a valid scalar and tensor combination? ",
            "answer:-": "   floating dtype and torch ",
            "context:-": "   Currently valid scalar and tensor combination are",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What condition returns a tensor of elements selected from eitherxory or bothxory? ",
            "answer:-": "   BoolTensor ",
            "context:-": "   Return a tensor of elements selected from eitherxory, depending oncondition. The operation is defined as",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What are two examples of valid scalar and tensor combination? ",
            "answer:-": "   floating dtype and torch ",
            "context:-": "   Return a tensor of elements selected from eitherxory, depending oncondition. The operation is defined as",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  Where are values selected? ",
            "answer:-": "   indices ",
            "context:-": "   The tensorscondition,x,ymust bebroadcastable. Note Currently valid scalar and tensor combination are",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What are two examples of a valid scalar and tensor combination? ",
            "answer:-": "   integral dtype and torch ",
            "context:-": "   The tensorscondition,x,ymust bebroadcastable. Note Currently valid scalar and tensor combination are",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What is the Scalar of floating dtype and torch? ",
            "answer:-": "   integral dtype and torch ",
            "context:-": "   Currently valid scalar and tensor combination are",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What are bebroadcastable? ",
            "answer:-": "   tensorscondition,x,ymust ",
            "context:-": "   The tensorscondition,x,ymust bebroadcastable. Note Currently valid scalar and tensor combination are",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What must bebroadcastable? ",
            "answer:-": "   tensorscondition,x,y ",
            "context:-": "   The tensorscondition,x,ymust bebroadcastable. Note Currently valid scalar and tensor combination are",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What are two examples of current valid scalar and tensor combination? ",
            "answer:-": "   Currently valid scalar and tensor combination ",
            "context:-": "   Note Currently valid scalar and tensor combination are",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What condition(BoolTensor) yields x? ",
            "answer:-": "   True ",
            "context:-": "   Note Currently valid scalar and tensor combination are",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What type of dtype and torch? ",
            "answer:-": "   complex ",
            "context:-": "   Note Currently valid scalar and tensor combination are",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What condition(BoolTensor) is nonzero? ",
            "answer:-": "   True ",
            "context:-": "   Currently valid scalar and tensor combination are",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What type of dtype and torch are presently valid scalar and tensor combination? ",
            "answer:-": "   complex ",
            "context:-": "   Currently valid scalar and tensor combination are",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What ield x if condition(BoolTensor) is True? ",
            "answer:-": "   y ",
            "context:-": "   condition(BoolTensor) – When True (nonzero), yield x, otherwise yield y x(TensororScalar) – value (if ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What does torch.where(condition,as_tuple=True) refer to? ",
            "answer:-": "   alsotorch.nonzero ",
            "context:-": "   condition(BoolTensor) – When True (nonzero), yield x, otherwise yield y x(TensororScalar) – value (if ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What does condition(BoolTensor) ield x? ",
            "answer:-": "   y ",
            "context:-": "   condition(BoolTensor) – When True (nonzero), yield x, otherwise yield y x(TensororScalar) – value (if ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What is another name for torch.where(condition)is identical to totorch.nonzero(condition,as_tup ",
            "answer:-": "   alsotorch.nonzero() ",
            "context:-": "   condition(BoolTensor) – When True (nonzero), yield x, otherwise yield y x(TensororScalar) – value (if ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What is the equivalent of input.torch.empty_like(input)? ",
            "answer:-": "   totorch.empty ",
            "context:-": "   Returns an uninitialized tensor with the same size asinput.torch.empty_like(input)is equivalent totorch.empty(input.size(),dtype=input.dtype,layout=input.layout,device=input.device). input(Tensor) – the size ofinputwill determine size of the output tensor. dtype(torch.dtype, optional) – the desired data type of returned Tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What determines the size of the output tensor? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.empty_like.html#torch.empty_like"
        },
        {
            "question:-": "  What is the desired data type of returned Tensor? ",
            "answer:-": "   dtype ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What defaults to the dtype ofinput? ",
            "answer:-": "   ifNone ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned Tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What is the desired layout of the returned tensor? ",
            "answer:-": "   layout ",
            "context:-": "   Returns an uninitialized tensor with the same size asinput.torch.empty_like(input)is equivalent totorch.empty(input.size(),dtype=input.dtype,layout=input.layout,device=input.device). input(Tensor) – the size ofinputwill determine size of the output tensor. dtype(torch.dtype, optional) – the desired data type of returned Tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What defaults to the layout ofinput? ",
            "answer:-": "   ifNone ",
            "context:-": "   layout(torch.layout, optional) – the desired layout of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.empty_like.html#torch.empty_like"
        },
        {
            "question:-": "  What type of tensor is returned with the same size as input? ",
            "answer:-": "   uninitialized tensor ",
            "context:-": "   Returns an uninitialized tensor with the same size asinput.torch.empty_like(input)is equivalent totorch.empty(input.size(),dtype=input.dtype,layout=input.layout,device=input.device). input(Tensor) – the size ofinputwill determine size of the output tensor. dtype(torch.dtype, optional) – the desired data type of returned Tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  dtype(torch.dtype, optional) – what type of returned Tensor? ",
            "answer:-": "   the desired data type ",
            "context:-": "   Returns an uninitialized tensor with the same size asinput.torch.empty_like(input)is equivalent totorch.empty(input.size(),dtype=input.dtype,layout=input.layout,device=input.device). input(Tensor) – the size ofinputwill determine size of the output tensor. dtype(torch.dtype, optional) – the desired data type of returned Tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.empty_like.html#torch.empty_like"
        },
        {
            "question:-": "  What defaults to the dtype of input? ",
            "answer:-": "   ifNone ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.empty_like.html#torch.empty_like"
        },
        {
            "question:-": "  What is the desired layout of returned tensor? ",
            "answer:-": "   layout ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  Default",
            "answer:-": "   device ofinput ",
            "context:-": "   high(int) – One above the highest integer to be drawn from the distribution. dtype(torch.dtype, optional) – the desired data type of returned Tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What defaults to the layout of input? ",
            "answer:-": "   ifNone ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What is the desired device of returned tensor? ",
            "answer:-": "   device ",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What defaults to the device ofinput? ",
            "answer:-": "   ifNone ",
            "context:-": "   layout(torch.layout, optional) – the desired layout of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What determines size of output tensor? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   input(Tensor) – the size ofinputwill determine size of the output tensor. dtype(torch.dtype, optional) – the desired data type of returned Tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What does ifNone default to? ",
            "answer:-": "   defaults to the device ofinput ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.empty_like.html#torch.empty_like"
        },
        {
            "question:-": "  What should record operations on the returned tensor? ",
            "answer:-": "   autograd ",
            "context:-": "   layout(torch.layout, optional) – the desired layout of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What is the default value for autograd to record operations on the returned tensor? ",
            "answer:-": "   False ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned Tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What defaults to the device of input? ",
            "answer:-": "   ifNone ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned Tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What is the default setting for autograd to record operations on the returned tensor? ",
            "answer:-": "   False ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What must inputandmat2 be? ",
            "answer:-": "   3-D tensors ",
            "context:-": "   inputandmat2must be 3-D tensors each containing",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What is seetorch.matmul() used for? ",
            "answer:-": "   broadcasting matrix products ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2. inputandmat2must be 3-D tensors each containing",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bmm.html#torch.bmm"
        },
        {
            "question:-": "  What is the first batch of matrices to be multiplied? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2. inputandmat2must be 3-D tensors each containing",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bmm.html#torch.bmm"
        },
        {
            "question:-": "  What does seetorch.matmul() do? ",
            "answer:-": "   notbroadcast ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2. inputandmat2must be 3-D tensors each containing",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bmm.html#torch.bmm"
        },
        {
            "question:-": "  What is used for broadcasting matrix products? ",
            "answer:-": "   seetorch.matmul() ",
            "context:-": "   This operator supportsTensorFloat32. Note This function does notbroadcast.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bmm.html#torch.bmm"
        },
        {
            "question:-": "  What is the second batch of matrices to be multiplied? ",
            "answer:-": "   mat2(Tensor) ",
            "context:-": "   Ifinputis a(b×n×m)(b \\times n \\times m)(b×n×m)tensor,mat2is a(b×m×p)(b \\times m \\times p)(b×m×p)tensor,outwill be a(b×n×p)(b \\times n \\times p)(b×n×p)tensor. This operator supportsTensorFloat32. Note This function does notbroadcast.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bmm.html#torch.bmm"
        },
        {
            "question:-": "  What function is used for broadcasting matrix products? ",
            "answer:-": "   seetorch.matmul() ",
            "context:-": "   inputandmat2must be 3-D tensors each containing",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bmm.html#torch.bmm"
        },
        {
            "question:-": "  What is the flag to choose between? ",
            "answer:-": "   a faster non-deterministic calculation, or a slower deterministic calculation ",
            "context:-": "   This operator supportsTensorFloat32. Note This function does notbroadcast.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bmm.html#torch.bmm"
        },
        {
            "question:-": "  This argument is only available for what? ",
            "answer:-": "   sparse-dense CUDA bmm ",
            "context:-": "   This operator supportsTensorFloat32. Note This function does notbroadcast.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bmm.html#torch.bmm"
        },
        {
            "question:-": "  What is false out(Tensor,optional)? ",
            "answer:-": "   the output tensor ",
            "context:-": "   Warning torch.matrix_rank()is deprecated in favor oftorch.linalg.matrix_rank()and will be removed in a future PyTorch release. The parametersymmetricwas",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bmm.html#torch.bmm"
        },
        {
            "question:-": "  What defines the shape of the output tensor? ",
            "answer:-": "   size ",
            "context:-": "   size(int...) – a sequence of integers defining the shape of the output tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  Can be a variable number of arguments or what? ",
            "answer:-": "   a collection like a list or tuple ",
            "context:-": "   The shape of the tensor is defined by the variable argumentsize. size(int...) – a sequence of integers defining the shape of the output tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  What is generator(torch.Generator, optional)? ",
            "answer:-": "   pseudorandom number generator ",
            "context:-": "   Returns a tensor filled with random numbers from a normal distribution",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  What is returned from a normal distribution with mean0and variance1? ",
            "answer:-": "   a tensor filled with random numbers ",
            "context:-": "   Returns a tensor filled with random numbers from a normal distribution",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  What is defined by the variable argumentsize? ",
            "answer:-": "   The shape of the tensor ",
            "context:-": "   Returns a tensor filled with random numbers from a normal distribution",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  What is a sequence of integers defining the shape of the output tensor? ",
            "answer:-": "   size(int...) ",
            "context:-": "   Returns a tensor filled with random numbers from a normal distribution",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  What can size(int...) be? ",
            "answer:-": "   a variable number of arguments or a collection like a list or tuple ",
            "context:-": "   Returns a tensor filled with random numbers from a normal distribution",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  What uses a global default? ",
            "answer:-": "   ifNone ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  dtype(torch.dtype, optional) – what? ",
            "answer:-": "   desired data type of returned tensor ",
            "context:-": "   out(Tensor,optional) – the output tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the global default of the returned tensor? ",
            "answer:-": "   Default ",
            "context:-": "   The shape of the tensor is defined by the variable argumentsize. size(int...) – a sequence of integers defining the shape of the output tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  Can be a collection like a list or tuple? ",
            "answer:-": "   variable number of arguments ",
            "context:-": "   size(int...) – a sequence of integers defining the shape of the output tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  ifNone uses a global default what? ",
            "answer:-": "   Default ",
            "context:-": "   size(int...) – a sequence of integers defining the shape of the output tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  What does generator(Tensor,optional) provide for sampling out? ",
            "answer:-": "   output tensor ",
            "context:-": "   generator(torch.Generator, optional) – a pseudorandom number generator for sampling out(Tensor,optional) – the output tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  What is the desired layout of returned Tensor? ",
            "answer:-": "   layout ",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  What is the default layout of the returned Tensor? ",
            "answer:-": "   Default",
            "context:-": "   out(Tensor,optional) – the output tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the default layout of returned Tensor? ",
            "answer:-": "   Default",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  Out(Tensor,optional) - what does out(Tensor,optional) contain? ",
            "answer:-": "   output tensor ",
            "context:-": "   out(Tensor,optional) – the output tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the default type of returned tensor? ",
            "answer:-": "   Default ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  What is the default layout of returned tensor? ",
            "answer:-": "   Default",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  What is the Poisson distribution generator? ",
            "answer:-": "   pseudorandom number generator ",
            "context:-": "   Returns a tensor of the same size asinputwith each element",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the input tensor containing the rates of the Poisson distribution generator? ",
            "answer:-": "   a pseudorandom number generator ",
            "context:-": "   Returns a tensor of the same size asinputwith each element",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.poisson.html#torch.poisson"
        },
        {
            "question:-": "  What is returned for each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininput? ",
            "answer:-": "   a tensor of the same size ",
            "context:-": "   Returns a tensor of the same size asinputwith each element",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.poisson.html#torch.poisson"
        },
        {
            "question:-": "  What is equivalent to concatenation along the first axis after all 1-D tensors have been reshaped? ",
            "answer:-": "   Stack tensors ",
            "context:-": "   Stack tensors in sequence vertically (row wise). This is equivalent to concatenation along the first axis after all 1-D tensors have been reshaped bytorch.atleast_2d(). tensors(sequence of Tensors) – sequence of tensors to concatenate out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.poisson.html#torch.poisson"
        },
        {
            "question:-": "  How are all 1-D tensors reshaped? ",
            "answer:-": "   bytorch.atleast_2d() ",
            "context:-": "   Stack tensors in sequence vertically (row wise). This is equivalent to concatenation along the first axis after all 1-D tensors have been reshaped bytorch.atleast_2d(). tensors(sequence of Tensors) – sequence of tensors to concatenate out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.vstack.html#torch.vstack"
        },
        {
            "question:-": "  What does tensors(sequence of Tensors) concatenate out(Tensor,optional ",
            "answer:-": "   output tensor ",
            "context:-": "   Stack tensors in sequence vertically (row wise). This is equivalent to concatenation along the first axis after all 1-D tensors have been reshaped bytorch.atleast_2d(). tensors(sequence of Tensors) – sequence of tensors to concatenate out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.vstack.html#torch.vstack"
        },
        {
            "question:-": "  What is an example of a sequence of tensors to concatenate out(Tensor,optional) – ",
            "answer:-": "   Example ",
            "context:-": "   Stack tensors in sequence vertically (row wise). This is equivalent to concatenation along the first axis after all 1-D tensors have been reshaped bytorch.atleast_2d(). tensors(sequence of Tensors) – sequence of tensors to concatenate out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.vstack.html#torch.vstack"
        },
        {
            "question:-": "  When this flag is False, some PyTorch warnings may only appear how many times per process? ",
            "answer:-": "   once per process ",
            "context:-": "   When this flag is False (default) then some PyTorch warnings may only",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.vstack.html#torch.vstack"
        },
        {
            "question:-": "  Why do PyTorch warnings only appear once per process? ",
            "answer:-": "   excessive warning information ",
            "context:-": "   When this flag is False (default) then some PyTorch warnings may only",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.set_warn_always.html#torch.set_warn_always"
        },
        {
            "question:-": "  What causes PyTorch warnings to always appear? ",
            "answer:-": "   Setting it to True ",
            "context:-": "   When this flag is False (default) then some PyTorch warnings may only",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.set_warn_always.html#torch.set_warn_always"
        },
        {
            "question:-": "  What flag is used to force warnings to always be emitted? ",
            "answer:-": "   b(bool) ",
            "context:-": "   When this flag is False (default) then some PyTorch warnings may only",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.set_warn_always.html#torch.set_warn_always"
        },
        {
            "question:-": "  What is the lowest integer to be drawn from the distribution? ",
            "answer:-": "   low(int,optional) ",
            "context:-": "   low(int,optional) – Lowest integer to be drawn from the distribution. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.set_warn_always.html#torch.set_warn_always"
        },
        {
            "question:-": "  What is the default value for the highest integer to be drawn from the distribution? ",
            "answer:-": "   0. high(int) ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  Returns what with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive ",
            "answer:-": "   a tensor ",
            "context:-": "   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).    ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  Low(int,optional) – what integer to be drawn from the distribution? ",
            "answer:-": "   Lowest integer ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is one above the highest integer to be drawn from the distribution? ",
            "answer:-": "   high(int) ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What is the default value of the lowest integer to be drawn from the distribution? ",
            "answer:-": "   0. high(int) ",
            "context:-": "   low(int,optional) – Lowest integer to be drawn from the distribution. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What is high(int)? ",
            "answer:-": "   One above the highest integer ",
            "context:-": "   high(int) – One above the highest integer to be drawn from the distribution. dtype(torch.dtype, optional) – the desired data type of returned Tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What is the desired memory format of returned Tensor? ",
            "answer:-": "   memory_format ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What is the default memory format of returned Tensor? ",
            "answer:-": "   Default",
            "context:-": "   layout(torch.layout, optional) – the desired layout of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  If autograd should record operations on the returned tensor, what is the default? ",
            "answer:-": "   requires_grad ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  What is the default memory format of returned tensor? ",
            "answer:-": "   Default",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  When possible, the returned tensor will be what? ",
            "answer:-": "   a view ofinput ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  If the returned tensor is a view ofinput, what will it be? ",
            "answer:-": "   copy ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  What can be reshaped without copying? ",
            "answer:-": "   Contiguous inputs and inputs with compatible strides ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  When is it possible to return a view? ",
            "answer:-": "   Seetorch.Tensor.view()on ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  What is returned with the same data and number of elements as input? ",
            "answer:-": "   a tensor ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  What will the returned tensor be if it is not a view of input? ",
            "answer:-": "   a copy ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  What does Seetorch.Tensor.view() return when it is possible to return? ",
            "answer:-": "   a view ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  What is the name of the function that determines when it is possible to return a view? ",
            "answer:-": "   Seetorch.Tensor.view() ",
            "context:-": "   Seetorch.Tensor.view()on when it is possible to return a view. A single dimension may be -1, in which case it’s inferred from the remaining",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  A single dimension may be what? ",
            "answer:-": "-1",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  What is the tensor to be reshaped shape? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Seetorch.Tensor.view()on when it is possible to return a view. A single dimension may be -1, in which case it’s inferred from the remaining",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  When does Seetorch.Tensor.view() occur? ",
            "answer:-": "   when it is possible to return a view ",
            "context:-": "   Seetorch.Tensor.view()on when it is possible to return a view. A single dimension may be -1, in which case it’s inferred from the remaining",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  What is the tensor to be reshaped shape(tuple of python",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  What type of index is returned with the same size as input? ",
            "answer:-": "   tensor ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  If the left boundary is closed, what is the default? ",
            "answer:-": "   Ifrightis False ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What does the right returned index satisfies? ",
            "answer:-": "   False boundaries ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What does each value in theinputbelongs to? ",
            "answer:-": "   the indices of the buckets ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  Returns what with the same size as input? ",
            "answer:-": "   a new tensor ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What does the right returned index satisfie? ",
            "answer:-": "   False boundaries ",
            "context:-": "   right returned index satisfies False boundaries[i-1]<input[m][n]...[l][x]<=boundaries[i] True boundaries[i-1]<=input[m][n]...[l][x]<boundaries[i] input(TensororScalar) – N-D tensor or a Scalar containing the search value(s). boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What must contain a monotonically increasing sequence? ",
            "answer:-": "   1-D tensor ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  Out_int32(bool,optional) - Indicate what? ",
            "answer:-": "   output data type ",
            "context:-": "   boundaries[i-1]<=input[m][n]...[l][x]<boundaries[i] input(TensororScalar) – N-D tensor or a Scalar containing the search value(s). boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is the default output data type? ",
            "answer:-": "   torch.int64 ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is the default value of torch.int32? ",
            "answer:-": "   False ",
            "context:-": "   out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What satisfies False boundaries? ",
            "answer:-": "   right returned index ",
            "context:-": "   right returned index satisfies False boundaries[i-1]<input[m][n]...[l][x]<=boundaries[i] True boundaries[i-1]<=input[m][n]...[l][x]<boundaries[i] input(TensororScalar) – N-D tensor or a Scalar containing the search value(s). boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What must the boundaries(Tensor) contain? ",
            "answer:-": "   monotonically increasing sequence ",
            "context:-": "   input(TensororScalar) – N-D tensor or a Scalar containing the search value(s). boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What indicates the output data type? ",
            "answer:-": "   out_int32 ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is the default value of the output data type? ",
            "answer:-": "   False ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  Return index satisfies what? ",
            "answer:-": "   False boundaries ",
            "context:-": "   returned index satisfies False boundaries[i-1]<input[m][n]...[l][x]<=boundaries[i] True boundaries[i-1]<=input[m][n]...[l][x]<boundaries[i] input(TensororScalar) – N-D tensor or a Scalar containing the search value(s). boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is input(TensororScalar) containing the search value(s)? ",
            "answer:-": "   N-D tensor or a Scalar ",
            "context:-": "   boundaries[i-1]<=input[m][n]...[l][x]<boundaries[i] input(TensororScalar) – N-D tensor or a Scalar containing the search value(s). boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What type of boundaries[i-1]input[m][n]? ",
            "answer:-": "   False ",
            "context:-": "   False boundaries[i-1]<input[m][n]...[l][x]<=boundaries[i] True boundaries[i-1]<=input[m][n]...[l][x]<boundaries[i] input(TensororScalar) – N-D tensor or a Scalar containing the search value(s). boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is input(TensororScalar)? ",
            "answer:-": "   N-D tensor or a Scalar ",
            "context:-": "   input(TensororScalar) – N-D tensor or a Scalar containing the search value(s). boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What must a 1-D tensor contain? ",
            "answer:-": "   monotonically increasing sequence ",
            "context:-": "   boundaries[i-1]<input[m][n]...[l][x]<=boundaries[i] True boundaries[i-1]<=input[m][n]...[l][x]<boundaries[i] input(TensororScalar) – N-D tensor or a Scalar containing the search value(s). boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What type of tensor must contain a monotonically increasing sequence? ",
            "answer:-": "   1-D ",
            "context:-": "   boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  If torch.int32 is true, what is the default output data type? ",
            "answer:-": "   True ",
            "context:-": "   out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is the input(TensororScalar) containing the search value(s)? ",
            "answer:-": "   N-D tensor or a Scalar ",
            "context:-": "   input(TensororScalar) – N-D tensor or a Scalar containing the search value(s). boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What tensor must contain a monotonically increasing sequence? ",
            "answer:-": "   1-D ",
            "context:-": "   input(TensororScalar) – N-D tensor or a Scalar containing the search value(s). boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What does out_int32(bool,optional) indicate? ",
            "answer:-": "   output data type ",
            "context:-": "   input(TensororScalar) – N-D tensor or a Scalar containing the search value(s). boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  Out_int32(bool,optional) indicates what? ",
            "answer:-": "   output data type ",
            "context:-": "   out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What type of sequence must a 1-D tensor contain? ",
            "answer:-": "   monotonically increasing ",
            "context:-": "   boundaries(Tensor) – 1-D tensor, must contain a monotonically increasing sequence. out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is the default value of out_int32? ",
            "answer:-": "   False ",
            "context:-": "   out_int32(bool,optional) – indicate the output data type. torch.int32 if True, torch.int64 otherwise.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What does right(bool,optional) do if False? ",
            "answer:-": "   return the first suitable location that is found ",
            "context:-": "   right(bool,optional) – if False, return the first suitable location that is found. If True, return the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  If False, return the last suitable location that is found. ",
            "answer:-": "   return the last such index ",
            "context:-": "   right(bool,optional) – if False, return the first suitable location that is found. If True, return the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is the default value for non-numerical value? ",
            "answer:-": "   return 0 ",
            "context:-": "   right(bool,optional) – if False, return the first suitable location that is found. If True, return the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is the size ofboundaries? ",
            "answer:-": "   one pass the last index ",
            "context:-": "   right(bool,optional) – if False, return the first suitable location that is found. If True, return the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  If False, gets what for each value ininputfromboundaries? ",
            "answer:-": "   lower bound index ",
            "context:-": "   right(bool,optional) – if False, return the first suitable location that is found. If True, return the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  If False, gets what instead of the lower bound index for each value ininputfromboundaries? ",
            "answer:-": "   upper bound index ",
            "context:-": "   right(bool,optional) – if False, return the first suitable location that is found. If True, return the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is False? ",
            "answer:-": "   Default value ",
            "context:-": "   right(bool,optional) – if False, return the first suitable location that is found. If True, return the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is the version of oftorch.Tensor.scatter_add_()? ",
            "answer:-": "   Out-of-place ",
            "context:-": "   Out-of-place version oftorch.Tensor.scatter_add_()  ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  Where can you find the PyTorch C++ API docs? ",
            "answer:-": "   directly gohere ",
            "context:-": "   If you are looking for the PyTorch C++ API docs, directly gohere. PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.scatter_add.html#torch.scatter_add"
        },
        {
            "question:-": "  PyTorch provides several features for working with what language? ",
            "answer:-": "   C++ ",
            "context:-": "   PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  At what level is the following support available? ",
            "answer:-": "   high level ",
            "context:-": "   PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What are you looking for? ",
            "answer:-": "   PyTorch C++ API docs ",
            "context:-": "   If you are looking for the PyTorch C++ API docs, directly gohere. PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What company provides several features for working with C++? ",
            "answer:-": "   PyTorch ",
            "context:-": "   Note If you are looking for the PyTorch C++ API docs, directly gohere. PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What does PyTorch provide for working with C++? ",
            "answer:-": "   several features ",
            "context:-": "   If you are looking for the PyTorch C++ API docs, directly gohere. PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What provides several features for working with C++? ",
            "answer:-": "   PyTorch ",
            "context:-": "   PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  At what level of support is PyTorch available? ",
            "answer:-": "   high level ",
            "context:-": "   PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where are TorchScript models saved from? ",
            "answer:-": "   Python ",
            "context:-": "   Loading serialized TorchScript models saved from Python Doing simple model modifications if needed (e.g. pulling out submodules) Constructing the input and doing preprocessing using C++ Tensor API  ",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is used for preprocessing TorchScript input? ",
            "answer:-": "   C++ Tensor API ",
            "context:-": "   Loading serialized TorchScript models saved from Python Doing simple model modifications if needed (e.g. pulling out submodules) Constructing the input and doing preprocessing using C++ Tensor API  ",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where are TorchScript models saved? ",
            "answer:-": "   Python ",
            "context:-": "   Loading serialized TorchScript models saved from Python Doing simple model modifications if needed (e.g. pulling out submodules) Constructing the input and doing preprocessing using C++ Tensor API  ",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is one way to do simple model modifications if needed? ",
            "answer:-": "   Loading serialized TorchScript models saved from Python ",
            "context:-": "   Loading serialized TorchScript models saved from Python Doing simple model modifications if needed (e.g. pulling out submodules) Constructing the input and doing preprocessing using C++ Tensor API  ",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is used for preprocessing TorchScript models? ",
            "answer:-": "   C++ Tensor API ",
            "context:-": "   Loading serialized TorchScript models saved from Python Doing simple model modifications if needed (e.g. pulling out submodules) Constructing the input and doing preprocessing using C++ Tensor API  ",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Doing what if needed? ",
            "answer:-": "   simple model modifications ",
            "context:-": "   Doing simple model modifications if needed (e.g. pulling out submodules) Constructing the input and doing preprocessing using C++ Tensor API  ",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is used for preprocessing input? ",
            "answer:-": "   C++ Tensor API ",
            "context:-": "   Doing simple model modifications if needed (e.g. pulling out submodules) Constructing the input and doing preprocessing using C++ Tensor API  ",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is the C++ Tensor API used for? ",
            "answer:-": "   preprocessing ",
            "context:-": "   Constructing the input and doing preprocessing using C++ Tensor API  ",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Doing what if needed (e.g. pulling out submodules)? ",
            "answer:-": "   simple model modifications ",
            "context:-": "   Doing simple model modifications if needed (e.g. pulling out submodules) Constructing the input and doing preprocessing using C++ Tensor API TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is used for preprocessing? ",
            "answer:-": "   C++ Tensor API ",
            "context:-": "   Constructing the input and doing preprocessing using C++ Tensor API  ",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is the name of the API used for input and preprocessing? ",
            "answer:-": "   C++ Tensor API ",
            "context:-": "   Constructing the input and doing preprocessing using C++ Tensor API  ",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where are most of the tensor and autograd operations in PyTorch Python API available? ",
            "answer:-": "   C++ API ",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is the name of the C++ API used for tensor and autograd operations? ",
            "answer:-": "   torch ",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What looks and behaves the same as the Python API? ",
            "answer:-": "   C++ tensor indexing API ",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you find details on the use of the C++ tensor indexing API? ",
            "answer:-": "   pytorch.org/cppdocs/notes/tensor_indexing.html ",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Most of the tensor and autograd operations in PyTorch Python API are also available in what API? ",
            "answer:-": "   C++ ",
            "context:-": "   Constructing the input and doing preprocessing using C++ Tensor API TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is the name of the tensor and autograd operations in PyTorch? ",
            "answer:-": "   torch",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  C++ tensor indexing API looks and behaves the same as what API? ",
            "answer:-": "   Python ",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is the name of the C++ tensor indexing API? ",
            "answer:-": "   https",
            "context:-": "   torch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What are some examples of tensormethods? ",
            "answer:-": "   add/reshape/clone ",
            "context:-": "   torch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What language has a tensor indexing API? ",
            "answer:-": "   C++ ",
            "context:-": "   torch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What does the C++ tensor indexing API look and behave the same as? ",
            "answer:-": "   Python API ",
            "context:-": "   C++ tensor indexing API that looks and behaves the same as the Python API. For details on its usage, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What are crucial for building dynamic neural networks in C++ frontend? ",
            "answer:-": "   tensor autograd APIs and thetorch",
            "context:-": "   C++ tensor indexing API that looks and behaves the same as the Python API. For details on its usage, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you find more information about the tensor autograd API? ",
            "answer:-": "   pytorch.org/tutorials/advanced/cpp_autograd.html ",
            "context:-": "   C++ tensor indexing API that looks and behaves the same as the Python API. For details on its usage, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What API looks and behaves the same as the Python API? ",
            "answer:-": "   C++ tensor indexing API ",
            "context:-": "   C++ tensor indexing API that looks and behaves the same as the Python API. For details on its usage, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  The tensor autograd APIs and thetorch",
            "answer:-": "   dynamic neural networks ",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you find more details on the tensor autograd APIs? ",
            "answer:-": "   https",
            "context:-": "   C++ tensor indexing API that looks and behaves the same as the Python API. For details on its usage, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you find more information about the tensor autograd APIs? ",
            "answer:-": "   https",
            "context:-": "   The tensor autograd APIs and thetorch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What APIs are crucial for building dynamic neural networks in C++ frontend? ",
            "answer:-": "   tensor autograd ",
            "context:-": "   The tensor autograd APIs and thetorch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you find more information about the tensor autograd APIs and thetorch",
            "answer:-": "   https",
            "context:-": "   The tensor autograd APIs and thetorch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What workflow requires model authoring to be done in TorchScript? ",
            "answer:-": "   author in TorchScript, infer in C++ ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  In cases where a Python component is undesirable, the model might have to be authored in what language? ",
            "answer:-": "   C++ ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What might be undesirable in workflows where the model has to be authored in C++? ",
            "answer:-": "   Python component ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What does astorch",
            "answer:-": "   Python API ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  In what script is authoring a neural net model done? ",
            "answer:-": "   TorchScript ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  In what language can a neural net model be authored? ",
            "answer:-": "   C++ ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is undesirable in workflows where the model has to be authored in C++? ",
            "answer:-": "   Python component ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What API does astorch",
            "answer:-": "   Python ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html",
            "undefined": "optim closely resemble? "
        },
        {
            "question:-": "  What is the model authoring and training API? ",
            "answer:-": "   PyTorch C++ ",
            "context:-": "   For an overview of the PyTorch C++ model authoring and training API, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is the name of the C++ model authoring and training API? ",
            "answer:-": "   PyTorch ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What can be found at http",
            "answer:-": "   a detailed tutorial ",
            "context:-": "   For a detailed tutorial on how to use the API, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is available at http",
            "answer:-": "   a detailed tutorial ",
            "context:-": "   For a detailed tutorial on how to use the API, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What does pytorch.org provide for components such as",
            "answer:-": "   Docs ",
            "context:-": "   Docs for components such astorch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you find docs for components such as",
            "answer:-": "   api/library_root.html ",
            "context:-": "   Docs for components such astorch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is libtorch? ",
            "answer:-": "   the library that contains all of the above C++ APIs ",
            "context:-": "   For guidance on how to install and link with libtorch (the library that contains all of the above C++ APIs), please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is one type of libtorch binaries compiled with? ",
            "answer:-": "   GCC pre-cxx11 ABI ",
            "context:-": "   For guidance on how to install and link with libtorch (the library that contains all of the above C++ APIs), please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What library contains all of the above C++ APIs? ",
            "answer:-": "   libtorch ",
            "context:-": "   For guidance on how to install and link with libtorch (the library that contains all of the above C++ APIs), please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  How many types of libtorch binaries are provided on Linux? ",
            "answer:-": "   two ",
            "context:-": "   For guidance on how to install and link with libtorch (the library that contains all of the above C++ APIs), please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Create a new floating-point tensor with what? ",
            "answer:-": "   the magnitude ofinput ",
            "context:-": "   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise. Supportsbroadcasting to a common shape,",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Supportsbroadcasting to what shape? ",
            "answer:-": "   common shape ",
            "context:-": "   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise. Supportsbroadcasting to a common shape,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.copysign.html#torch.copysign"
        },
        {
            "question:-": "  What are the magnitudes of a floating-point tensor? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise. Supportsbroadcasting to a common shape,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.copysign.html#torch.copysign"
        },
        {
            "question:-": "  What contains value(s) whose signbit(s) are applied to the magnitudes ininput? ",
            "answer:-": "   other(TensororNumber) ",
            "context:-": "   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise. Supportsbroadcasting to a common shape,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.copysign.html#torch.copysign"
        },
        {
            "question:-": "  What is a wrapper around Python's assert? ",
            "answer:-": "   symbolically traceable ",
            "context:-": "   A wrapper around Python’s assert which is symbolically traceable.  ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.copysign.html#torch.copysign"
        },
        {
            "question:-": "  What is symbolically traceable? ",
            "answer:-": "   wrapper around Python’s assert ",
            "context:-": "   A wrapper around Python’s assert which is symbolically traceable.  ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch._assert.html#torch._assert"
        },
        {
            "question:-": "  What does value represent in the given dimensiondim? ",
            "answer:-": "   thekth smallest element of each row of theinputtensor ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch._assert.html#torch._assert"
        },
        {
            "question:-": "  Andindicesis what of each element found? ",
            "answer:-": "   index location ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  When is the last dimension of theinput chosen? ",
            "answer:-": "   Ifdimis not given ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  What returns the smallest element of each row of the inputtensor in the given dimensiondim? ",
            "answer:-": "   a namedtuple ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  What is the index location of each element found? ",
            "answer:-": "   Andindices ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  What happens ifdimis not given? ",
            "answer:-": "   the last dimension of theinputis chosen ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  Ifdimis not given, the last dimension of theinputis chosen? ",
            "answer:-": "   IfkeepdimisTrue ",
            "context:-": "   Ifdimis not given, the last dimension of theinputis chosen. IfkeepdimisTrue, both thevaluesandindicestensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  What is another name for dimis squeezed? ",
            "answer:-": "   seetorch.squeeze() ",
            "context:-": "   IfkeepdimisTrue, both thevaluesandindicestensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  What type of tensor is input? ",
            "answer:-": "   CUDA ",
            "context:-": "   Ifdimis not given, the last dimension of theinputis chosen. IfkeepdimisTrue, both thevaluesandindicestensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  If both thevaluesandindicestensors are the same size as input, what is the default? ",
            "answer:-": "   IfkeepdimisTrue ",
            "context:-": "   IfkeepdimisTrue, both thevaluesandindicestensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  If inputis a CUDA tensor and there are what, this function may nondeterministically returnindices for any of them ",
            "answer:-": "   multiple validkth values ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  What is the smallest element in a CUDA tensor? ",
            "answer:-": "   k ",
            "context:-": "   IfkeepdimisTrue, both thevaluesandindicestensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  Inputis a CUDA tensor and there are multiple validkth values, this function may nondeterministically do what for ",
            "answer:-": "   returnindices ",
            "context:-": "   Note Wheninputis a CUDA tensor and there are multiple validkth values, this function may nondeterministically returnindicesfor any of them. input(Tensor) – the input tensor. k(int) – k for the k-th smallest element dim(int,optional) – the dimension to find the kth value along keepdim(bool) – whether the output tensor hasdimretained or not. out(tuple,optional) – the output tuple of (Tensor, LongTensor)",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  What is the dimension to find the kth value along keepdim(bool)? ",
            "answer:-": "   k ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  Out(tuple,optional) - the output tuple of (Tensor, LongTensor) can ",
            "answer:-": "   output buffers ",
            "context:-": "   Note Wheninputis a CUDA tensor and there are multiple validkth values, this function may nondeterministically returnindicesfor any of them. input(Tensor) – the input tensor. k(int) – k for the k-th smallest element dim(int,optional) – the dimension to find the kth value along keepdim(bool) – whether the output tensor hasdimretained or not. out(tuple,optional) – the output tuple of (Tensor, LongTensor)",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  Out(tuple,optional) – the output tuple of (Tensor, LongTensor) can ",
            "answer:-": "   output buffers ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  What is the return matrixUis upper-triangular? ",
            "answer:-": "   IfupperisTrue ",
            "context:-": "   IfupperisTrue, the returned matrixUis upper-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  IfupperisTrue, the returned matrixLis is what? ",
            "answer:-": "   lower-triangular ",
            "context:-": "   IfupperisTrue, the returned matrixUis upper-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the return matrixLis lower-triangular? ",
            "answer:-": "   IfupperisFalse ",
            "context:-": "   IfupperisTrue, the returned matrixUis upper-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the form of the decomposition? ",
            "answer:-": "   IfupperisTrue ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  WhenupperisTrue, the returned tensor will be composed of what? ",
            "answer:-": "   lower-triangular Cholesky factors ",
            "context:-": "   Computes the Cholesky decomposition of a symmetric positive-definite",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the name of the warning that the matrix is lower-triangular? ",
            "answer:-": "   Warning ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  IfupperisTrue, andAAAis a batch of symmetric positive-definite matrices, then the returned tensor ",
            "answer:-": "   upper-triangular Cholesky factors ",
            "context:-": "   IfupperisTrue, andAAAis a batch of symmetric positive-definite",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  IfupperisTrue, andAAAis a batch of symmetric positive-definite matrices? ",
            "answer:-": "   Warning ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is a batch of symmetric positive-definite matrices? ",
            "answer:-": "   IfupperisTrue ",
            "context:-": "   IfupperisTrue, andAAAis a batch of symmetric positive-definite",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  When will the returned tensor be composed of lower-triangular Cholesky factors of each of the individual matrices? ",
            "answer:-": "   whenupperisFalse ",
            "context:-": "   IfupperisTrue, andAAAis a batch of symmetric positive-definite",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is deprecated in favor oftorch.linalg.cholesky()? ",
            "answer:-": "   torch.cholesky() ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What should be replaced with a replacement for torch.linalg.cholesky()? ",
            "answer:-": "   L=torch.cholesky(A) ",
            "context:-": "   IfupperisTrue, andAAAis a batch of symmetric positive-definite",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  WhenupperisFalse, the returned tensor will be composed of what? ",
            "answer:-": "   lower-triangular Cholesky factors ",
            "context:-": "   IfupperisTrue, andAAAis a batch of symmetric positive-definite",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What should be replaced with torch.linalg.cholesky()? ",
            "answer:-": "   L=torch.cholesky(A) ",
            "context:-": "   IfupperisTrue, andAAAis a batch of symmetric positive-definite",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What should be replaced with L=torch.cholesky(A,upper=True)? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   L=torch.cholesky(A)should be replaced with U=torch.cholesky(A,upper=True)should be replaced with input(Tensor) – the input tensorAAAof size(∗,n,n)(*, n, n)(∗,n,n)where*is zero or more",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What flag indicates whether to return a lower or upper triangular matrix? ",
            "answer:-": "   upper ",
            "context:-": "   L=torch.cholesky(A)should be replaced with U=torch.cholesky(A,upper=True)should be replaced with input(Tensor) – the input tensorAAAof size(∗,n,n)(*, n, n)(∗,n,n)where*is zero or more",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the default value of the flag that indicates whether to return a lower or upper triangular matrix? ",
            "answer:-": "   False ",
            "context:-": "   torch.cholesky()is deprecated in favor oftorch.linalg.cholesky()and will be removed in a future PyTorch release. L=torch.cholesky(A)should be replaced with U=torch.cholesky(A,upper=True)should be replaced with input(Tensor) – the input tensorAAAof size(∗,n,n)(*, n, n)(∗,n,n)where*is zero or more",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What should be replaced with U=torch.cholesky(A,upper=True)? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   IfupperisTrue, the returned matrixUis upper-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What flag indicates whether to return a upper or lower triangular matrix? ",
            "answer:-": "   upper(bool,optional) ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What does False out(Tensor,optional) return? ",
            "answer:-": "   output matrix ",
            "context:-": "   L=torch.cholesky(A)should be replaced with U=torch.cholesky(A,upper=True)should be replaced with input(Tensor) – the input tensorAAAof size(∗,n,n)(*, n, n)(∗,n,n)where*is zero or more",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the input tensorAAAof size(,n,n)(*, n, n)(, ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the default value for the output matrix? ",
            "answer:-": "   False out(Tensor,optional) ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the function that computes the histogram of a tensor? ",
            "answer:-": "   Computes the histogram of a tensor ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What are the elements sorted into? ",
            "answer:-": "   equal width bins betweenminandmax ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  What happens if the elements are sorted into equal width bins betweenminandmax? ",
            "answer:-": "   Ifminandmaxare both zero, the minimum and maximum values of the data are used ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  What elements are ignored? ",
            "answer:-": "   lower than min and higher than max ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  Out(Tensor,optional) is what? ",
            "answer:-": "   output tensor ",
            "context:-": "   out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  What is a histogram represented as? ",
            "answer:-": "   Tensor ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What does the histogram of a tensor do? ",
            "answer:-": "   Computes the histogram of a tensor ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  Ifminandmaxare both zero, what are the minimum and maximum values of the data used? ",
            "answer:-": "   Ifminandmaxare both zero ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  Out(Tensor,optional) – what? ",
            "answer:-": "   output tensor ",
            "context:-": "   Computes the expit (also known as the logistic sigmoid function) of the elements ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  What is the histogram represented as? ",
            "answer:-": "   a tensor Tensor ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the library part of? ",
            "answer:-": "   thePyTorchproject ",
            "context:-": "   This library is part of thePyTorchproject. PyTorch is an open source",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  What is PyTorch? ",
            "answer:-": "   open source machine learning framework ",
            "context:-": "   This library is part of thePyTorchproject. PyTorch is an open source",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the release status of PyTorch? ",
            "answer:-": "   Stable ",
            "context:-": "   This library is part of thePyTorchproject. PyTorch is an open source",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What does PyTorch expect to maintain? ",
            "answer:-": "   backwards compatibility ",
            "context:-": "   This library is part of thePyTorchproject. PyTorch is an open source",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What project is this library part of? ",
            "answer:-": "   thePyTorchproject ",
            "context:-": "   This library is part of thePyTorchproject. PyTorch is an open source",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What type of machine learning framework is PyTorch? ",
            "answer:-": "   open source ",
            "context:-": "   This library is part of thePyTorchproject. PyTorch is an open source",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the release status of the features described in this documentation? ",
            "answer:-": "   Stable ",
            "context:-": "   Features described in this documentation are classified by release status",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What do we expect to maintain? ",
            "answer:-": "   backwards compatibility ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the release status of features described in this documentation? ",
            "answer:-": "   Stable ",
            "context:-": "   Features described in this documentation are classified by release status",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What type of features will be maintained long-term? ",
            "answer:-": "   Stable ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  How long will these features be maintained? ",
            "answer:-": "   long-term ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  Why are features tagged as Beta? ",
            "answer:-": "   the performance needs to improve ",
            "context:-": "   Beta",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What classification do we commit to seeing a feature through to? ",
            "answer:-": "   Stable ",
            "context:-": "   Beta",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What are we not committing to? ",
            "answer:-": "   backwards compatibility ",
            "context:-": "   Beta",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What may the API change based on? ",
            "answer:-": "   user feedback ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What classification are Beta features committed to seeing through? ",
            "answer:-": "   Stable ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  We are not committing to what? ",
            "answer:-": "   backwards compatibility ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  Where are these features sometimes found? ",
            "answer:-": "   run-time flags ",
            "context:-": "   Prototype",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What are features at an early stage for? ",
            "answer:-": "   feedback and testing ",
            "context:-": "   Prototype",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What consists of data processing utilities and popular datasets for natural language? ",
            "answer:-": "   Thetorchtextpackage ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What does Thetorchtextpackage contain? ",
            "answer:-": "   Package Reference PyTorch Libraries ",
            "context:-": "   Prototype",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What are PyPI and Conda features sometimes hidden behind? ",
            "answer:-": "   run-time flags ",
            "context:-": "   Prototype",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What does Thetorchtextpackage consist of data processing utilities and popular datasets for natural language? ",
            "answer:-": "   Package Reference ",
            "context:-": "   Features described in this documentation are classified by release status",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the name of the page? ",
            "answer:-": "   Index Module Index Search Page ",
            "context:-": "   Index Module Index Search Page  ",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the name of the search page? ",
            "answer:-": "   Index Module Index Search Page ",
            "context:-": "   Index Module Index Search Page  ",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What can the second argument be? ",
            "answer:-": "   a number or a tensor ",
            "context:-": "   Computes element-wise equality The second argument can be a number or a tensor whose shape isbroadcastablewith the first argument. input(Tensor) – the tensor to compare other(Tensororfloat) – the tensor or value to compare out(Tensor,optional) – the output tensor. A boolean tensor that is True whereinputis equal tootherand False elsewhere Example",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the tensor to compare out(Tensor,optional)? ",
            "answer:-": "   output tensor ",
            "context:-": "   Computes element-wise equality The second argument can be a number or a tensor whose shape isbroadcastablewith the first argument. input(Tensor) – the tensor to compare other(Tensororfloat) – the tensor or value to compare out(Tensor,optional) – the output tensor. A boolean tensor that is True whereinputis equal tootherand False elsewhere Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.eq.html#torch.eq"
        },
        {
            "question:-": "  What is the value of a boolean tensor? ",
            "answer:-": "   True ",
            "context:-": "   Computes element-wise equality The second argument can be a number or a tensor whose shape isbroadcastablewith the first argument. input(Tensor) – the tensor to compare other(Tensororfloat) – the tensor or value to compare out(Tensor,optional) – the output tensor. A boolean tensor that is True whereinputis equal tootherand False elsewhere Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.eq.html#torch.eq"
        },
        {
            "question:-": "  What is the tensor to compare other(Tensororfloat)? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Computes element-wise equality The second argument can be a number or a tensor whose shape isbroadcastablewith the first argument. input(Tensor) – the tensor to compare other(Tensororfloat) – the tensor or value to compare out(Tensor,optional) – the output tensor. A boolean tensor that is True whereinputis equal tootherand False elsewhere Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.eq.html#torch.eq"
        },
        {
            "question:-": "  What is a boolean tensor that is? ",
            "answer:-": "   True ",
            "context:-": "   Computes element-wise equality The second argument can be a number or a tensor whose shape isbroadcastablewith the first argument. input(Tensor) – the tensor to compare other(Tensororfloat) – the tensor or value to compare out(Tensor,optional) – the output tensor. A boolean tensor that is True whereinputis equal tootherand False elsewhere Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.eq.html#torch.eq"
        },
        {
            "question:-": "  What does the new tensor return? ",
            "answer:-": "   a dimension of size one inserted at the specified position ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.eq.html#torch.eq"
        },
        {
            "question:-": "  What does the returned tensor share with the returned tensor? ",
            "answer:-": "   shares the same underlying data ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  What value within the range can be used? ",
            "answer:-": "   Adimvalue ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  What corresponds tounsqueeze()applied atdim=dim+input.dim()+1? ",
            "answer:-": "   Negativedimwill ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  What is the index at which to insert the singleton dimension? ",
            "answer:-": "   dim(int) ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  Returns what with a dimension of size one inserted at the specified position? ",
            "answer:-": "   a new tensor ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  What does the returned tensor share with this tensor? ",
            "answer:-": "   underlying data ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  What value within the range [-input.dim()-1,input.dim()+1]can be used? ",
            "answer:-": "   Adimvalue ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  What will correspond tounsqueeze()applied atdim=dim+input.dim()+1? ",
            "answer:-": "   Negativedim ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  What is the numerical rank of? ",
            "answer:-": "   2-D tensor ",
            "context:-": "   Returns the numerical rank of a 2-D tensor. The method to compute the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  The method to compute the matrix rank is done using what by default? ",
            "answer:-": "   SVD ",
            "context:-": "   Returns the numerical rank of a 2-D tensor. The method to compute the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  The computation of the rank is done by obtaining what? ",
            "answer:-": "   eigenvalues ",
            "context:-": "   Returns the numerical rank of a 2-D tensor. The method to compute the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  What returns the numerical rank of a 2-D tensor? ",
            "answer:-": "   IfsymmetricisTrue ",
            "context:-": "   Returns the numerical rank of a 2-D tensor. The method to compute the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  What is the threshold below which the singular values (or the eigenvalues whensymmetricisTrue) are considered to be 0. ",
            "answer:-": "   tolis ",
            "context:-": "   Returns the numerical rank of a 2-D tensor. The method to compute the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  If what is not specified, tolis the threshold below which the singular values (or the eigenvalues whensymmetricisTrue) are ",
            "answer:-": "   Iftolis ",
            "context:-": "   tolis the threshold below which the singular values (or the eigenvalues",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  What is deprecated in favor oftorch.linalg.matrix_rank()? ",
            "answer:-": "   torch.matrix_rank() ",
            "context:-": "   Returns the numerical rank of a 2-D tensor. The method to compute the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  What was the parametersymmetric renamed to? ",
            "answer:-": "   intorch.linalg.matrix_rank()tohermitian ",
            "context:-": "   Returns the numerical rank of a 2-D tensor. The method to compute the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  What is the input 2-D tensor tol(float,optional) – the tolerance value? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Returns the numerical rank of a 2-D tensor. The method to compute the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  Default",
            "answer:-": "   whetherinputis symmetric ",
            "context:-": "   Returns the numerical rank of a 2-D tensor. The method to compute the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  What is the second value returned? ",
            "answer:-": "   bytorch.max() ",
            "context:-": "   This is the second value returned bytorch.max(). See its",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  What does the documentation of this method provide? ",
            "answer:-": "   exact semantics ",
            "context:-": "   If there are multiple maximal values then the indices of the first maximal value are returned. input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  If there are multiple maximal values, the indices of the first maximal value are returned. ",
            "answer:-": "   multiple maximal values ",
            "context:-": "   This is the second value returned bytorch.max(). See its",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What does input(Tensor) return? ",
            "answer:-": "   input tensor ",
            "context:-": "   If there are multiple maximal values then the indices of the first maximal value are returned. input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  Returns the indices of what? ",
            "answer:-": "   buckets ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.     ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  Returns the indices of the maximum value of all elements in the inputtensor. This is the second value returned? ",
            "answer:-": "   bytorch.max() ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor. This is the second value returned bytorch.max(). See its",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  See its documentation for the exact what of this method? ",
            "answer:-": "   semantics ",
            "context:-": "   input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What are returned if there are multiple maximal values? ",
            "answer:-": "   the indices of the first maximal value ",
            "context:-": "   If there are multiple maximal values then the indices of the first maximal value are returned. input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What does the documentation of bytorch.max() provide? ",
            "answer:-": "   exact semantics ",
            "context:-": "   This is the second value returned bytorch.max(). See its",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What method returns the indices of the maximum values of a tensor across a dimension? ",
            "answer:-": "   bytorch.max() ",
            "context:-": "   If there are multiple maximal values then the indices of the first maximal value are returned. input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What is the second value returned bytorch.max()? ",
            "answer:-": "   Returns the indices of the maximum values of a tensor across a dimension ",
            "context:-": "   input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What do you need to know about the second value returned bytorch.max()? ",
            "answer:-": "   semantics ",
            "context:-": "   This is the second value returned bytorch.max(). See its",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What is returned if there are multiple maximal values? ",
            "answer:-": "   the indices of the first maximal value ",
            "context:-": "   Note If there are multiple maximal values then the indices of the first maximal value are returned. input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What method returns the second value of the indices of the maximum values of a tensor across a dimension? ",
            "answer:-": "   bytorch.max() ",
            "context:-": "   Note If there are multiple maximal values then the indices of the first maximal value are returned. input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What returns the argmax of the flattened input? ",
            "answer:-": "   IfNone ",
            "context:-": "   input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What is the name of the method that returns the indices of the maximum values of a tensor across a dimension? ",
            "answer:-": "   bytorch.max() ",
            "context:-": "   If there are multiple maximal values then the indices of the first maximal value are returned. input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  Returns the indices of the maximum values of a tensor across a dimension. This is the second value returned? ",
            "answer:-": "   bytorch.max() ",
            "context:-": "   input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  Ignored what? ",
            "answer:-": "   ifdim=None ",
            "context:-": "   input(Tensor) – the input tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  What returns a new tensor with the exponential of the elements of the input tensorinput? ",
            "answer:-": "   Returns a new tensor ",
            "context:-": "   Returns a new tensor with the exponential of the elements",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.argmax.html#torch.argmax"
        },
        {
            "question:-": "  Returns the initial seed for generating random numbers as what? ",
            "answer:-": "   Pythonlong ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.exp.html#torch.exp"
        },
        {
            "question:-": "  Where are the numbers drawn from? ",
            "answer:-": "   the Cauchy distribution ",
            "context:-": "   Fills the tensor with numbers drawn from the Cauchy distribution",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  Fills the tensor with numbers drawn from what distribution? ",
            "answer:-": "   Cauchy ",
            "context:-": "   Fills the tensor with numbers drawn from the Cauchy distribution",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.cauchy_.html#torch.Tensor.cauchy_"
        },
        {
            "question:-": "  What does angle return pi for? ",
            "answer:-": "   negative real numbers ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Note Starting in PyTorch 1.8, angle returns pi for negative real numbers,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.cauchy_.html#torch.Tensor.cauchy_"
        },
        {
            "question:-": "  The function would return zero for all real numbers and not propagate what? ",
            "answer:-": "   floating-point NaNs ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Note Starting in PyTorch 1.8, angle returns pi for negative real numbers,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.angle.html#torch.angle"
        },
        {
            "question:-": "  What is an example of a function that returns zero for all real numbers and not propagate floating-point NaNs? ",
            "answer:-": "   Example ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Note Starting in PyTorch 1.8, angle returns pi for negative real numbers,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.angle.html#torch.angle"
        },
        {
            "question:-": "  What is modeled after SciPy'sspecialmodule? ",
            "answer:-": "   The torch.special module ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.angle.html#torch.angle"
        },
        {
            "question:-": "  What is the torch.special module modeled after? ",
            "answer:-": "   SciPy’sspecialmodule ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What version of PyTorch is the torch.special module in? ",
            "answer:-": "   BETA ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the status of the torch.special module? ",
            "answer:-": "   New functions are still being added ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Where can you find more information about the torch.special module? ",
            "answer:-": "   the documentation of each function for details ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes the entropy oninput, what is it? ",
            "answer:-": "   elementwise ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Out(Tensor,optional) - what does out(Tensor,optional) represent? ",
            "answer:-": "   output tensor ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What does the torch.special module compute? ",
            "answer:-": "   error function ofinput ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the error function of input defined as? ",
            "answer:-": "   input(Tensor) – the input tensor ",
            "context:-": "   input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is still being added to the torch.special module? ",
            "answer:-": "   New functions ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the name of each function in the torch.special module? ",
            "answer:-": "   documentation ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What version of PyTorch is this module in? ",
            "answer:-": "   BETA ",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Some functions may change in future what? ",
            "answer:-": "   PyTorch releases ",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the name of each function in the PyTorch module? ",
            "answer:-": "   documentation ",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes what elementwise? ",
            "answer:-": "   entropy oninput ",
            "context:-": "   Computes the entropy oninput(as defined below), elementwise. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is out(Tensor,optional) defined as? ",
            "answer:-": "   output tensor ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is an example of a PyTorch module? ",
            "answer:-": "   Example",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the function that computes the error function of input? ",
            "answer:-": "   Computes the error function ofinput ",
            "context:-": "   input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the error function of input? ",
            "answer:-": "   Computes the complementary error function ofinput ",
            "context:-": "   Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the complementary error function of input? ",
            "answer:-": "   Computes the complementary error function ofinput ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the inverse error function of input? ",
            "answer:-": "   Computes the inverse error function ofinput ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the complementary error function defined as? ",
            "answer:-": "   input(Tensor) – the input tensor ",
            "context:-": "   Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What error function is defined in the range(1,1)(-1,1)(1,1)? ",
            "answer:-": "   inverse error function ",
            "context:-": "   Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is defined in the range(1,1)(-1, 1)(1,1)? ",
            "answer:-": "   inverse error function ",
            "context:-": "   Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is another name for the logistic sigmoid function? ",
            "answer:-": "   the expit ",
            "context:-": "   Computes the expit (also known as the logistic sigmoid function) of the elements ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What error function is defined in the range(1,1)(-1, 1)(1,1)? ",
            "answer:-": "   inverse error function ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the input tensor defined as? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the expit also known as? ",
            "answer:-": "   the logistic sigmoid function ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes what error function of input? ",
            "answer:-": "   inverse error function ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the logistic sigmoid function? ",
            "answer:-": "   expit ",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes the exponential of the elements minus what ofinput? ",
            "answer:-": "1",
            "context:-": "   Computes the exponential of the elements minus 1",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the name of the function that computes the exponential of the elements minus 1 ofinput? ",
            "answer:-": "   Note ",
            "context:-": "   Computes the inverse error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes what of the elements minus 1 ofinput? ",
            "answer:-": "   exponential ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What does the exponential of the elements minus 1 ofinput do? ",
            "answer:-": "   Note ",
            "context:-": "   Computes the inverse error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the name of the function that computes the exponential of the elements minus 1 of input? ",
            "answer:-": "   Note ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What function is defined in the range(1,1)(-1, 1)(1,1)? ",
            "answer:-": "   inverse error function ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes what function of input? ",
            "answer:-": "   inverse error function ",
            "context:-": "   Computes the inverse error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What function provides greater precision than the exponential of the elements minus 1 ofinput? ",
            "answer:-": "   exp(x) - 1 ",
            "context:-": "   out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the base of the exponential function of input? ",
            "answer:-": "   base two ",
            "context:-": "   out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What function provides greater precision than exp(x) - 1 for small values of x? ",
            "answer:-": "   Computes the exponential of the elements minus 1 ofinput ",
            "context:-": "   out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What does the exponential of the elements minus 1 ofinput provide? ",
            "answer:-": "   greater precision ",
            "context:-": "   Computes the expit (also known as the logistic sigmoid function) of the elements ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the input(Tensor)? ",
            "answer:-": "   input tensor ",
            "context:-": "   Computes the natural logarithm of the absolute value of the gamma function oninput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  The exponential of the elements minus 1 ofinput provides greater precision than what for small values of x? ",
            "answer:-": "   exp(x) - 1 ",
            "context:-": "   Computes the expit (also known as the logistic sigmoid function) of the elements ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is out(Tensor,optional)? ",
            "answer:-": "   output tensor ",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the function that computes the exponential of the elements minus 1 ofinput? ",
            "answer:-": "   base two exponential function ofinput ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  Computes what of the elements minus 1 of input? ",
            "answer:-": "   exponential ",
            "context:-": "   Computes the expit (also known as the logistic sigmoid function) of the elements ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes the expit also known as what? ",
            "answer:-": "   the logistic sigmoid function ",
            "context:-": "   Computes the expit (also known as the logistic sigmoid function) of the elements ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  This function provides greater precision than what for small values of x? ",
            "answer:-": "   exp(x) - 1 ",
            "context:-": "   Computes the exponential of the elements minus 1",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes the natural what of the absolute value of the gamma function oninput? ",
            "answer:-": "   logarithm ",
            "context:-": "   Computes the natural logarithm of the absolute value of the gamma function oninput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What does this function provide than exp(x) - 1 for small values of x? ",
            "answer:-": "   greater precision ",
            "context:-": "   Note This function provides greater precision than exp(x) - 1 for small values of x. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What does Compute? ",
            "answer:-": "   the natural logarithm of the absolute value of the gamma function oninput ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What type of function is computed for each element of input? ",
            "answer:-": "   exponentially scaled zeroth order modified Bessel function ",
            "context:-": "   Computes the natural logarithm of the absolute value of the gamma function oninput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes the exponentially scaled zeroth order modified Bessel function of what kind? ",
            "answer:-": "   first kind ",
            "context:-": "   out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is an example of a function that computes the base two exponential function of input? ",
            "answer:-": "   Computes the base two exponential function ofinput ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the absolute value of the gamma function oninput? ",
            "answer:-": "   natural logarithm ",
            "context:-": "   Computes the base two exponential function ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Out(Tensor,optional) - what is the output tensor? ",
            "answer:-": "   output tensor ",
            "context:-": "   out(Tensor,optional) – the output tensor. Returns a new tensor with the logit of the elements ofinput.inputis clamped to [eps, 1 - eps] when eps is not None.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What order modified Bessel function is computed for each element of input? ",
            "answer:-": "   zeroth ",
            "context:-": "   Computes the base two exponential function ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Out(Tensor,optional) - what? ",
            "answer:-": "   output tensor ",
            "context:-": "   step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the exponentially scaled zeroth order modified Bessel function of? ",
            "answer:-": "   first kind ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the base two exponential function of input? ",
            "answer:-": "   Computes the base two exponential function ofinput ",
            "context:-": "   Computes the base two exponential function ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is computed for each element of input? ",
            "answer:-": "   exponentially scaled zeroth order modified Bessel function ",
            "context:-": "   Computes the natural logarithm of the absolute value of the gamma function oninput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the result of the natural logarithm of the absolute value of the gamma function oninput? ",
            "answer:-": "   Computes the natural logarithm of the absolute value of the gamma function oninput ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Input is clamped to what when eps is not None? ",
            "answer:-": "   eps ",
            "context:-": "   out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  When eps is None andinput 0 orinput> 1, the function will yield what? ",
            "answer:-": "   NaN ",
            "context:-": "   out(Tensor,optional) – the output tensor. Returns a new tensor with the logit of the elements ofinput.inputis clamped to [eps, 1 - eps] when eps is not None.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Inputis clamped to what when eps is not None? ",
            "answer:-": "   eps ",
            "context:-": "   out(Tensor,optional) – the output tensor. Returns a new tensor with the logit of the elements ofinput.inputis clamped to [eps, 1 - eps] when eps is not None.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the epsilon for input clamp bound? ",
            "answer:-": "   float ",
            "context:-": "   out(Tensor,optional) – the output tensor. Returns a new tensor with the logit of the elements ofinput.inputis clamped to [eps, 1 - eps] when eps is not None.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What does out(Tensor,optional) return? ",
            "answer:-": "   output tensor ",
            "context:-": "   out(Tensor,optional) – the output tensor. Returns a new tensor with the logit of the elements ofinput.inputis clamped to [eps, 1 - eps] when eps is not None.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is an example of a function that computes input*log1p? ",
            "answer:-": "   Computesinput*log1p(other)with the following cases ",
            "context:-": "   input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Returns a new tensor with the logit of the elements ofinput.inputis clamped to [eps, 1 - eps] when eps is not None.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is'sscipy.special.xlog1py' similar to? ",
            "answer:-": "   SciPy ",
            "context:-": "   out(Tensor,optional) – the output tensor. Returns a new tensor with the logit of the elements ofinput.inputis clamped to [eps, 1 - eps] when eps is not None.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is an example of an output tensor? ",
            "answer:-": "   Computesinput*log1p(other)with the following cases ",
            "context:-": "   out(Tensor,optional) – the output tensor. Returns a new tensor with the logit of the elements ofinput.inputis clamped to [eps, 1 - eps] when eps is not None.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Writes all values from the tensorsrcintoselfat the indices specified in what? ",
            "answer:-": "   theindextensor ",
            "context:-": "   Writes all values from the tensorsrcintoselfat the indices",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  For each value insrc, what is specified by its index insrcfordimension!=dim? ",
            "answer:-": "   output index ",
            "context:-": "   Writes all values from the tensorsrcintoselfat the indices",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the reverse operation of the manner described for a 3-D tensor? ",
            "answer:-": "   ingather() ",
            "context:-": "   Writes all values from the tensorsrcintoselfat the indices",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What does the function do? ",
            "answer:-": "   Writes all values from the tensorsrcintoselfat the indices specified in theindextensor ",
            "context:-": "   Writes all values from the tensorsrcintoselfat the indices",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the output index for each value insrc specified by? ",
            "answer:-": "   its index insrcfordimension!=dim ",
            "context:-": "   Writes all values from the tensorsrcintoselfat the indices",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  Selfis updated as",
            "answer:-": "   ingather() ",
            "context:-": "   Writes all values from the tensorsrcintoselfat the indices",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What must the values of index be as forgather()? ",
            "answer:-": "   between0andself.size(dim)-1inclusive ",
            "context:-": "   Moreover, as forgather(), the values ofindexmust be",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What will be incorrect when indices are not unique? ",
            "answer:-": "   the gradient ",
            "context:-": "   When indices are not unique, the behavior is non-deterministic (one of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the backward pass implemented only? ",
            "answer:-": "   forsrc.shape==index.shape ",
            "context:-": "   When indices are not unique, the behavior is non-deterministic (one of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What must be the values of index as forgather()? ",
            "answer:-": "   between0andself.size(dim)-1inclusive ",
            "context:-": "   Moreover, as forgather(), the values ofindexmust be",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  When indices are not unique, the behavior is what? ",
            "answer:-": "   non-deterministic ",
            "context:-": "   When indices are not unique, the behavior is non-deterministic (one of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What does the optionalreduceargument allow specification of? ",
            "answer:-": "   optional reduction operation ",
            "context:-": "   The backward pass is implemented only forsrc.shape==index.shape. Additionally accepts an optionalreduceargument that allows",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  For each value insrc, the reduction operation is applied to what? ",
            "answer:-": "   index inself ",
            "context:-": "   When indices are not unique, the behavior is non-deterministic (one of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What operation is applied to all values in the tensorsrcintoselfat the indicies specified in the index? ",
            "answer:-": "   optional reduction operation ",
            "context:-": "   When indices are not unique, the behavior is non-deterministic (one of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the multiplication operation used to update the index inself? ",
            "answer:-": "   3-D tensor and reduction ",
            "context:-": "   Additionally accepts an optionalreduceargument that allows",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the tensor of size? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep. Step is",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the gap between two values in the tensor? ",
            "answer:-": "   Step ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep. Step is",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  Warning This function is deprecated and will be removed in a future release because its behavior is inconsistent with what language's range builtin? ",
            "answer:-": "   Python ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep. Step is",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What function produces values in [start, end]? ",
            "answer:-": "   usetorch.arange() ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the starting value for the set of points? ",
            "answer:-": "   start(float) ",
            "context:-": "   start(float) – the starting value for the set of points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the default value of start(float)? ",
            "answer:-": "   Default",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep. Step is",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  How many tensors does the function return? ",
            "answer:-": "1",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep. Step is",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is step? ",
            "answer:-": "   the gap between two values in the tensor ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep. Step is",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the behavior of this function inconsistent with? ",
            "answer:-": "   Python’s range builtin ",
            "context:-": "   Warning This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What language has a range builtin? ",
            "answer:-": "   Python ",
            "context:-": "   Warning This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is step(float)? ",
            "answer:-": "   the gap between each pair of adjacent points ",
            "context:-": "   start(float) – the starting value for the set of points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is out(Tensor,optional) used for? ",
            "answer:-": "   output tensor ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  Usetorch.arange() is inconsistent with what programming language's range builtin? ",
            "answer:-": "   Python ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  Why is usetorch.arange() deprecated? ",
            "answer:-": "   its behavior is inconsistent with Python’s range builtin ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  Out(Tensor,optional) – what is the output tensor? ",
            "answer:-": "   output tensor ",
            "context:-": "   Note The returned tensor shares the storage with the input tensor,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the gap between each pair of adjacent points? ",
            "answer:-": "   step(float) ",
            "context:-": "   step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What is the ending value for the set of points step(float)? ",
            "answer:-": "   end(float) ",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the default value for the end of a set of points? ",
            "answer:-": "   Default",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What happens if the data type is inferred from the other input arguments? ",
            "answer:-": "   Ifdtypeis not given ",
            "context:-": "   step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What happens if any ofstart,end, orstopare floating-point? ",
            "answer:-": "   thedtypeis inferred to be the default dtype, seeget_default_dtype() ",
            "context:-": "   step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the default dtype inferred to if any ofstart,end, orstopare floating-point? ",
            "answer:-": "   betorch.int64 ",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What happens when a data type is inferred from the other input arguments? ",
            "answer:-": "   Ifdtypeis not given ",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is inferred to be the default dtype if any ofstart,end, orstopare floating-point? ",
            "answer:-": "   thedtype ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  Out(Tensor,optional) - what does out(Tensor,optional) refer to? ",
            "answer:-": "   output tensor ",
            "context:-": "   out(Tensor,optional) – the output tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What happens when the data type is inferred from the other input arguments? ",
            "answer:-": "   Ifdtypeis not given ",
            "context:-": "   Warning This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the default tensor type used by ifNone? ",
            "answer:-": "   Default ",
            "context:-": "   out(Tensor,optional) – the output tensor. dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What will infer the data type from the other input arguments? ",
            "answer:-": "   Ifdtypeis not given ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  If any ofstart,end, orstopare what, thedtypeis inferred to be the default dtype? ",
            "answer:-": "   floating-point ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the default dtype inferred to? ",
            "answer:-": "   betorch.int64 ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  If any ofstart,end, orstopare floating-point, what is inferred to be the default dtype? ",
            "answer:-": "   thedtypeis ",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  If any ofstart,end, orstopare floating-point, thedtypeis inferred to what? ",
            "answer:-": "   betorch.int64 ",
            "context:-": "   start(float) – the starting value for the set of points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What uses a global default (seetorch.set_default_tensor_type())? ",
            "answer:-": "   Default",
            "context:-": "   dtype(torch.dtype, optional) – the desired data type of returned tensor.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is equivalent to callinginput.expand(shape)? ",
            "answer:-": "   Broadcastsinput ",
            "context:-": "   Broadcastsinputto the shapeshape.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the equivalent to Broadcastsinput to the shapeshape? ",
            "answer:-": "   callinginput.expand(shape) ",
            "context:-": "   Broadcastsinputto the shapeshape.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.broadcast_to.html#torch.broadcast_to"
        },
        {
            "question:-": "  What is another name for details? ",
            "answer:-": "   Seeexpand() ",
            "context:-": "   Broadcastsinputto the shapeshape.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.broadcast_to.html#torch.broadcast_to"
        },
        {
            "question:-": "  What is the new shape? ",
            "answer:-": "   shape ",
            "context:-": "   Broadcastsinputto the shapeshape.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.broadcast_to.html#torch.broadcast_to"
        },
        {
            "question:-": "  What does shape(list, tuple, ortorch.Size) do? ",
            "answer:-": "   Example ",
            "context:-": "   Broadcastsinputto the shapeshape.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.broadcast_to.html#torch.broadcast_to"
        },
        {
            "question:-": "  Returns True what if the data type ofinputis a complex data type? ",
            "answer:-": "   if the data type ofinputis a complex data type ",
            "context:-": "   Returns True if the data type ofinputis a complex data type i.e.,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.broadcast_to.html#torch.broadcast_to"
        },
        {
            "question:-": "  What is an example of a tensor with all the dimensions ofinputof size1removed? ",
            "answer:-": "   shape ",
            "context:-": "   Returns a tensor with all the dimensions ofinputof size1removed. For example, ifinputis of shape",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.is_complex.html#torch.is_complex"
        },
        {
            "question:-": "  What is done only in the given dimension whendimis given? ",
            "answer:-": "   squeeze operation ",
            "context:-": "   Returns a tensor with all the dimensions ofinputof size1removed. For example, ifinputis of shape",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What does squeeze(input,0) leave unchanged? ",
            "answer:-": "   tensor ",
            "context:-": "   For example, ifinputis of shape",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What returns a tensor with all the dimensions ofinputof size1removed? ",
            "answer:-": "   Returns a tensor with all the dimensions ofinputof size1removed ",
            "context:-": "   Returns a tensor with all the dimensions ofinputof size1removed. For example, ifinputis of shape",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  Whendimis given, what operation is done only in the given dimension? ",
            "answer:-": "   squeeze operation ",
            "context:-": "   Whendimis given, a squeeze operation is done only in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What is theouttensor of shape? ",
            "answer:-": "   ifinputis of shape ",
            "context:-": "   For example, ifinputis of shape",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  Whendimis given, what is done only in the given dimension? ",
            "answer:-": "   squeeze operation ",
            "context:-": "   For example, ifinputis of shape",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What does a squeeze operation do when a tensor is of shape? ",
            "answer:-": "   Note ",
            "context:-": "   For example, ifinputis of shape",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What is an example of a squeeze operation? ",
            "answer:-": "   ifinputis of shape ",
            "context:-": "   For example, ifinputis of shape",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What is a squeeze operation done only in the given dimension? ",
            "answer:-": "   Note ",
            "context:-": "   For example, ifinputis of shape",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  Whendimis is a squeeze operation done only in the given dimension? ",
            "answer:-": "   given ",
            "context:-": "   Whendimis given, a squeeze operation is done only in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What does a squeeze operation only in the given dimension do? ",
            "answer:-": "   Ifinputis of shape ",
            "context:-": "   Whendimis given, a squeeze operation is done only in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  The returned tensor shares storage with what? ",
            "answer:-": "   the input tensor ",
            "context:-": "   Whendimis given, a squeeze operation is done only in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What is the name of the warning that the input tensor shares the storage with the output tensor? ",
            "answer:-": "   Warning ",
            "context:-": "   Whendimis given, a squeeze operation is done only in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What is the input of a tensor? ",
            "answer:-": "   shape ",
            "context:-": "   Whendimis given, a squeeze operation is done only in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What changes the contents of the other? ",
            "answer:-": "   changing the contents of one ",
            "context:-": "   Whendimis given, a squeeze operation is done only in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What is the name of the warning that is given when a tensor shares the storage with the input tensor? ",
            "answer:-": "   Warning ",
            "context:-": "   Whendimis given, a squeeze operation is done only in the given",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  The returned tensor shares the storage with what? ",
            "answer:-": "   the input tensor ",
            "context:-": "   Note The returned tensor shares the storage with the input tensor,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What does the tensor have that can lead to unexpected errors? ",
            "answer:-": "   a batch dimension of size 1 ",
            "context:-": "   Note The returned tensor shares the storage with the input tensor,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  What happens when you fork the RNG? ",
            "answer:-": "   reset to the state that it was previously in ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.squeeze.html#torch.squeeze"
        },
        {
            "question:-": "  Devices(iterable of CUDA IDs) – for which to fork the RNG? ",
            "answer:-": "   CUDA devices ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is always forked? ",
            "answer:-": "   CPU RNG state ",
            "context:-": "   devices(iterable of CUDA IDs) – CUDA devices for which to fork",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What will fork_rng() emit if your machine has a lot of devices? ",
            "answer:-": "   a warning ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  If you explicitly specify devices, this warning will be what? ",
            "answer:-": "   suppressed ",
            "context:-": "   devices(iterable of CUDA IDs) – CUDA devices for which to fork",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is iterable of CUDA IDs? ",
            "answer:-": "   devices ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  When will fork_rng() emit a warning? ",
            "answer:-": "   if your machine has a lot of devices ",
            "context:-": "   devices(iterable of CUDA IDs) – CUDA devices for which to fork",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What does devices(iterable of CUDA IDs) represent? ",
            "answer:-": "   CUDA devices ",
            "context:-": "   devices(iterable of CUDA IDs) – CUDA devices for which to fork",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What function will run very slowly if your machine has a lot of devices? ",
            "answer:-": "   fork_rng() ",
            "context:-": "   devices(iterable of CUDA IDs) – CUDA devices for which to fork",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What are CUDA devices for which to fork the RNG? ",
            "answer:-": "   devices ",
            "context:-": "   devices(iterable of CUDA IDs) – CUDA devices for which to fork",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  If enabled(bool) is true, the RNG is not forked. ",
            "answer:-": "   ifFalse ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is enabled(bool) used for? ",
            "answer:-": "   convenience argument ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is the state of the random number generator? ",
            "answer:-": "   atorch.ByteTensor ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What does atorch.Generatorobject do? ",
            "answer:-": "   Sets the seed for generating random numbers ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What returns the initial seed for generating random numbers as a Pythonlong? ",
            "answer:-": "   atorch.Generatorobject ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is a convenience argument for easily disabling the context manager without having to delete it and unindent your Python code under it? ",
            "answer:-": "   enabled ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is enabled(bool) a convenience argument for? ",
            "answer:-": "   disabling the context manager ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What returns the seed for generating random numbers? ",
            "answer:-": "   atorch.Generatorobject ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is the desired seed? ",
            "answer:-": "   seed(int) ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  The value must be within what range? ",
            "answer:-": "   inclusive range ",
            "context:-": "   Returns the random number generator state as atorch.ByteTensor. Returns the initial seed for generating random numbers as a",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is raised if the value is not within the inclusive range? ",
            "answer:-": "   RuntimeError ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What inputs are remapped to positive values with the formula0xfff_fff_fff_ffff ",
            "answer:-": "   Negative inputs ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What does atorch.Generatorobject return for generating random numbers? ",
            "answer:-": "   Sets the seed ",
            "context:-": "   Returns the initial seed for generating random numbers as a",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What returns the initial seed for generating random numbers? ",
            "answer:-": "   atorch.Generatorobject ",
            "context:-": "   devices(iterable of CUDA IDs) – CUDA devices for which to fork",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  Value must be within what range? ",
            "answer:-": "   inclusive range ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  Sets the seed for generating random numbers to what? ",
            "answer:-": "   non-deterministic random number ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is used to seed the RNG? ",
            "answer:-": "   a 64 bit number ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is the desired state of the random number generator? ",
            "answer:-": "   new_state ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is the multiplication of a product of Householder matrices with a general matrix? ",
            "answer:-": "   matrix-matrix ",
            "context:-": "   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix. Multiplies am×nm \\times nm×nmatrixC(given byother) with a matrixQ,",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What does the multiplication of amnm times nmnmatrixC(given byother) with? ",
            "answer:-": "   a matrixQ ",
            "context:-": "   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix. Multiplies am×nm \\times nm×nmatrixC(given byother) with a matrixQ,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is represented using Householder reflectors? ",
            "answer:-": "   Orthogonal or Unitary Matrices ",
            "context:-": "   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix. Multiplies am×nm \\times nm×nmatrixC(given byother) with a matrixQ,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What does the matrix-matrix multiplication of a product of Householder matrices with a general matrix do? ",
            "answer:-": "   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix ",
            "context:-": "   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix. Multiplies am×nm \\times nm×nmatrixC(given byother) with a matrixQ,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is used to represent Q? ",
            "answer:-": "   Householder reflectors ",
            "context:-": "   Computes the matrix-matrix multiplication of a product of Householder matrices with a general matrix. Multiplies am×nm \\times nm×nmatrixC(given byother) with a matrixQ,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  Supports inputs of float, double, cfloat and what other dtype? ",
            "answer:-": "   cdouble ",
            "context:-": "   Supports inputs of float, double, cfloat and cdouble dtypes.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What type of inputs does it support? ",
            "answer:-": "   batched inputs ",
            "context:-": "   Supports inputs of float, double, cfloat and cdouble dtypes.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What can be used to form the Householder representation(input, tau)of matrixQfrom the QR decomposition? ",
            "answer:-": "   torch.geqrf() ",
            "context:-": "   torch.geqrf()can be used to form the Householder representation(input, tau)of matrixQfrom the QR decomposition. input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is tau(Tensor)? ",
            "answer:-": "   tensor of shape ",
            "context:-": "   Supports inputs of float, double, cfloat and cdouble dtypes.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What can be used to form the Householder representation of matrixQ? ",
            "answer:-": "   the QR decomposition ",
            "context:-": "   See also torch.geqrf()can be used to form the Householder representation(input, tau)of matrixQfrom the QR decomposition. input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is the tensor of shape where*is zero or more batch dimensions andmnequals tomorndepending on theleft ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   torch.geqrf()can be used to form the Householder representation(input, tau)of matrixQfrom the QR decomposition. input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is the tensor of shape where*is zero or more batch dimensions? ",
            "answer:-": "   tau ",
            "context:-": "   torch.geqrf()can be used to form the Householder representation(input, tau)of matrixQfrom the QR decomposition. input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is another(Tensor)? ",
            "answer:-": "   tensor of shape ",
            "context:-": "   input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What controls the order of multiplication? ",
            "answer:-": "   left(bool) ",
            "context:-": "   input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is the tensor of shape(*, m, n) where*is zero or more batch dimensions? ",
            "answer:-": "   other(Tensor) ",
            "context:-": "   torch.geqrf()can be used to form the Householder representation(input, tau)of matrixQfrom the QR decomposition. input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What can be used to form the Householder representation of matrixQfrom the QR decomposition? ",
            "answer:-": "   torch.geqrf() ",
            "context:-": "   torch.geqrf()can be used to form the Householder representation(input, tau)of matrixQfrom the QR decomposition. input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is a tensor of shape where*is zero or more batch dimensions? ",
            "answer:-": "   tau ",
            "context:-": "   input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What controls whether the matrixQis conjugate transposed or not? ",
            "answer:-": "   transpose ",
            "context:-": "   input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is the output Tensor? ",
            "answer:-": "   Tensor ",
            "context:-": "   input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is the output Tensor ignored? ",
            "answer:-": "   ifNone ",
            "context:-": "   input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is the default value of the output Tensor? ",
            "answer:-": "   Default",
            "context:-": "   input(Tensor) – tensor of shape(*, mn, k)where*is zero or more batch dimensions",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is another name for Alias fortorch? ",
            "answer:-": "   Alias fortorch.linalg.pinv ",
            "context:-": "   Alias fortorch.linalg.pinv()  ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.ormqr.html#torch.ormqr"
        },
        {
            "question:-": "  What is the name of Alias fortorch.linalg.pinv()? ",
            "answer:-": "   Alias fortorch.linalg.pinv() ",
            "context:-": "   Alias fortorch.linalg.pinv()  ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.pinverse.html#torch.pinverse"
        },
        {
            "question:-": "  What is not guaranteed to produce 100% reproducible results across? ",
            "answer:-": "   PyTorch releases, individual commits, or different platforms ",
            "context:-": "   Completely reproducible results are not guaranteed across PyTorch releases,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.pinverse.html#torch.pinverse"
        },
        {
            "question:-": "  Results may not be reproducible between CPU and GPU executions even when using what? ",
            "answer:-": "   identical seeds ",
            "context:-": "   Completely reproducible results are not guaranteed across PyTorch releases,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Completely reproducible results are not guaranteed across what releases, individual commits, or different platforms? ",
            "answer:-": "   PyTorch releases ",
            "context:-": "   Completely reproducible results are not guaranteed across PyTorch releases,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What can happen between CPU and GPU executions? ",
            "answer:-": "   results may not be reproducible ",
            "context:-": "   Completely reproducible results are not guaranteed across PyTorch releases,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What can you do for a specific platform, device, and PyTorch release? ",
            "answer:-": "   limit the number of sources of nondeterministic behavior ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What can cause multiple executions of your application to behave differently? ",
            "answer:-": "   randomness ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  How can you configure PyTorch for some operations? ",
            "answer:-": "   to avoid using nondeterministic algorithms ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is one of the steps you can take to limit the number of sources of nondeterministic behavior for a specific platform, device, and PyT ",
            "answer:-": "   Warning ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What can you do to limit the number of sources of nondeterministic behavior for a specific platform, device, and PyTorch release? ",
            "answer:-": "   limit the number of sources of nondeterministic behavior ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What will result in the same result? ",
            "answer:-": "   multiple calls to those operations ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is another word for nondeterministic behavior? ",
            "answer:-": "   Warning ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is slower than nondeterministic operations? ",
            "answer:-": "   Deterministic operations ",
            "context:-": "   Deterministic operations are often slower than nondeterministic operations, so",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What may save time in development by facilitating experimentation, debugging, and regression testing? ",
            "answer:-": "   determinism ",
            "context:-": "   Deterministic operations are often slower than nondeterministic operations, so",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What library can you use to seed the global NumPy RNG? ",
            "answer:-": "   NumPy ",
            "context:-": "   Deterministic operations are often slower than nondeterministic operations, so",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Are deterministic operations faster or slower than nondeterministic operations? ",
            "answer:-": "   slower ",
            "context:-": "   Warning Deterministic operations are often slower than nondeterministic operations, so",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What does python use to seed the global NumPy RNG? ",
            "answer:-": "   NumPy ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Which operations are often slower than nondeterministic operations? ",
            "answer:-": "   Deterministic operations ",
            "context:-": "   Deterministic operations are often slower than nondeterministic operations, so",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What may some applications and libraries use, but not the global RNG? ",
            "answer:-": "   NumPy Random Generator objects ",
            "context:-": "   You can usetorch.manual_seed()to seed the RNG for all devices (both",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  For what devices can you usetorch.manual_seed() to seed the RNG? ",
            "answer:-": "   all devices ",
            "context:-": "   You can usetorch.manual_seed()to seed the RNG for all devices (both",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What may some applications and libraries use, but not the global NumPy RNG? ",
            "answer:-": "   NumPy Random Generator objects ",
            "context:-": "   For custom operators, you might need to set python seed as well",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Some applications and libraries may use what? ",
            "answer:-": "   NumPy Random Generator objects ",
            "context:-": "   If you or any of the libraries you are using rely on NumPy, you can seed the global",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Where can you find out how to set consistent seeds for other libraries that use random number generators? ",
            "answer:-": "   the documentation ",
            "context:-": "   If you or any of the libraries you are using rely on NumPy, you can seed the global",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What should you do if you are using other libraries that use random number generators? ",
            "answer:-": "   set consistent seeds ",
            "context:-": "   If you or any of the libraries you are using rely on NumPy, you can seed the global",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Where can you find information about libraries that use random number generators? ",
            "answer:-": "   the documentation ",
            "context:-": "   However, some applications and libraries may use NumPy Random Generator objects,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Where can you find out how to set consistent seeds for libraries that use random number generators? ",
            "answer:-": "   the documentation ",
            "context:-": "   If you are using any other libraries that use random number generators, refer to",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What can you do if you are using other libraries that use random number generators? ",
            "answer:-": "   set consistent seeds ",
            "context:-": "   If you are using any other libraries that use random number generators, refer to",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What do other libraries use? ",
            "answer:-": "   random number generators ",
            "context:-": "   If you are using any other libraries that use random number generators, refer to",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Disabling the benchmarking feature withtorch.backends.cudnn.benchmark=Falsecauses ",
            "answer:-": "   reduced performance ",
            "context:-": "   The cuDNN library, used by CUDA convolution operations, can be a source of nondeterminism",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What happens if the benchmarking feature is enabled withtorch.backends.cudnn.benchmark=True? ",
            "answer:-": "   performance might improve ",
            "context:-": "   Disabling the benchmarking feature withtorch.backends.cudnn.benchmark=Falsecauses cuDNN to deterministically select an algorithm, possibly at the cost of reduced",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is the difference between the benchmarking feature and cuDNN? ",
            "answer:-": "   different from thetorch.backends.cudnn.deterministicsetting ",
            "context:-": "   Disabling the benchmarking feature withtorch.backends.cudnn.benchmark=Falsecauses cuDNN to deterministically select an algorithm, possibly at the cost of reduced",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is the cost of disabling the benchmarking feature? ",
            "answer:-": "   reduced performance ",
            "context:-": "   Disabling the benchmarking feature withtorch.backends.cudnn.benchmark=Falsecauses cuDNN to deterministically select an algorithm, possibly at the cost of reduced",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  If you do not need what feature of your application, performance might improve if the benchmarking feature is enabled withtorch.backends. ",
            "answer:-": "   reproducibility across multiple executions ",
            "context:-": "   Disabling the benchmarking feature withtorch.backends.cudnn.benchmark=Falsecauses cuDNN to deterministically select an algorithm, possibly at the cost of reduced",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What setting does the benchmarking feature differ from? ",
            "answer:-": "   thetorch.backends.cudnn.deterministicsetting ",
            "context:-": "   Disabling the benchmarking feature withtorch.backends.cudnn.benchmark=Falsecauses cuDNN to deterministically select an algorithm, possibly at the cost of reduced",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What setting is different from thetorch.backends.cudnn.deterministicsetting discussed below? ",
            "answer:-": "   withtorch.backends.cudnn.benchmark=True ",
            "context:-": "   However, if you do not need reproducibility across multiple executions of your application,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is the benchmark setting different from? ",
            "answer:-": "   thetorch.backends.cudnn.deterministicsetting ",
            "context:-": "   However, if you do not need reproducibility across multiple executions of your application,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  If you do not need reproducibility across multiple executions of your application, then performance might improve if the benchmarking feature is enabled? ",
            "answer:-": "   withtorch.backends.cudnn.benchmark=True ",
            "context:-": "   However, if you do not need reproducibility across multiple executions of your application,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What setting is different from withtorch.backends.cudnn.benchmark=True? ",
            "answer:-": "   thetorch.backends.cudnn.deterministicsetting ",
            "context:-": "   However, if you do not need reproducibility across multiple executions of your application,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is this setting different from? ",
            "answer:-": "   thetorch.backends.cudnn.deterministicsetting ",
            "context:-": "   Note that this setting is different from thetorch.backends.cudnn.deterministicsetting discussed below. torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What does torch.use_algorithms do? ",
            "answer:-": "   deterministic ",
            "context:-": "   Note that this setting is different from thetorch.backends.cudnn.deterministicsetting discussed below. torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What setting is different from the one discussed below? ",
            "answer:-": "   thetorch.backends.cudnn.deterministicsetting ",
            "context:-": "   Note that this setting is different from thetorch.backends.cudnn.deterministicsetting discussed below. torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What does torch.use_deterministic_algorithms() allow PyTorch to use instead of nondeterministic ones? ",
            "answer:-": "   deterministic algorithms ",
            "context:-": "   Note that this setting is different from thetorch.backends.cudnn.deterministicsetting discussed below. torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What type of algorithm does torch.use_algorithms? ",
            "answer:-": "   deterministic ",
            "context:-": "   torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What type of algorithms does torch.use? ",
            "answer:-": "   deterministic ",
            "context:-": "   torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What documentation should you check for a full list of affected operations? ",
            "answer:-": "   fortorch.use_deterministic_algorithms() ",
            "context:-": "   Please check the documentation fortorch.use_deterministic_algorithms()for a full list of affected operations. If an operation does not act correctly",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What do you need if an operation does not act correctly according to the documentation? ",
            "answer:-": "   a deterministic implementation of an operation that does not have one ",
            "context:-": "   Please check the documentation fortorch.use_deterministic_algorithms()for a full list of affected operations. If an operation does not act correctly",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What documentation contains a full list of affected operations? ",
            "answer:-": "   fortorch.use_deterministic_algorithms() ",
            "context:-": "   Please check the documentation fortorch.use_deterministic_algorithms()for a full list of affected operations. If an operation does not act correctly",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What implementation oftorch.Tensor.index_add_() is nondeterministic? ",
            "answer:-": "   CUDA ",
            "context:-": "   Please check the documentation fortorch.use_deterministic_algorithms()for a full list of affected operations. If an operation does not act correctly",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  When is the alternate deterministic implementation oftorch.bmm() used? ",
            "answer:-": "   when the deterministic flag is turned on ",
            "context:-": "   For example, running the nondeterministic CUDA implementation oftorch.Tensor.index_add_()will throw an error",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Whentorch.bmm() is called with sparse-dense CUDA tensors, what does it typically use ",
            "answer:-": "   a nondeterministic algorithm ",
            "context:-": "   Whentorch.bmm()is called with sparse-dense CUDA tensors it typically uses a",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is called with sparse-dense CUDA tensors? ",
            "answer:-": "   Whentorch.bmm() ",
            "context:-": "   Whentorch.bmm()is called with sparse-dense CUDA tensors it typically uses a",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  If you are using CUDA tensors and your CUDA version is what? ",
            "answer:-": "   10.2 or greater ",
            "context:-": "   Furthermore, if you are using CUDA tensors, and your CUDA version is 10.2 or greater, you",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Whentorch.bmm() is called with what type of CUDA tensors? ",
            "answer:-": "   sparse-dense ",
            "context:-": "   Whentorch.bmm()is called with sparse-dense CUDA tensors it typically uses a",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  When should you set the environment variableCUBLAS_WORKSPACE_CONFIG? ",
            "answer:-": "   if you are using CUDA tensors ",
            "context:-": "   Furthermore, if you are using CUDA tensors, and your CUDA version is 10.2 or greater, you",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is the CUDA version of CUDA? ",
            "answer:-": "   10.2 or greater ",
            "context:-": "   Furthermore, if you are using CUDA tensors, and your CUDA version is 10.2 or greater, you",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What setting will make other PyTorch operations behave deterministically? ",
            "answer:-": "   unliketorch.use_deterministic_algorithms() ",
            "context:-": "   While disabling CUDA convolution benchmarking (discussed above) ensures that",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What does disabling ensures that CUDA selects the same algorithm each time an application is run? ",
            "answer:-": "   CUDA convolution benchmarking ",
            "context:-": "   While disabling CUDA convolution benchmarking (discussed above) ensures that",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What does disabling CUDA convolution benchmarking ensure? ",
            "answer:-": "   CUDA selects the same algorithm each time an application is run ",
            "context:-": "   While disabling CUDA convolution benchmarking (discussed above) ensures that",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What operations will behave deterministically, unless eithertorch.use_deterministic_algorithms() is set? ",
            "answer:-": "   other PyTorch operations ",
            "context:-": "   While disabling CUDA convolution benchmarking (discussed above) ensures that",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What can you use to seed the RNG for all devices? ",
            "answer:-": "   usetorch.manual_seed() ",
            "context:-": "   You can usetorch.manual_seed()to seed the RNG for all devices (both",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What kind of operators might need to set python seed as well? ",
            "answer:-": "   custom operators ",
            "context:-": "   For custom operators, you might need to set python seed as well",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  For custom operators, you might need to set what as well? ",
            "answer:-": "   python seed ",
            "context:-": "   For custom operators, you might need to set python seed as well",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  For custom operators, you might need to set what kind of seed as well? ",
            "answer:-": "   python ",
            "context:-": "   For custom operators, you might need to set python seed as well",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  In some versions of CUDA, RNNs and LSTM networks may have what? ",
            "answer:-": "   non-deterministic behavior ",
            "context:-": "   In some versions of CUDA, RNNs and LSTM networks may have non-deterministic behavior.",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is used for details and workarounds? ",
            "answer:-": "   Seetorch.nn.RNN() ",
            "context:-": "   In some versions of CUDA, RNNs and LSTM networks may have non-deterministic behavior.",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is the name of the website? ",
            "answer:-": "   Alias fortorch.linalg.det ",
            "context:-": "   Alias fortorch.linalg.det()  ",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is a view of when a tensor is split into multiple tensors? ",
            "answer:-": "   view ofinput ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.det.html#torch.det"
        },
        {
            "question:-": "  What is the equivalent to calling.tensor_split? ",
            "answer:-": "   torch ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is'snumpy.dsplit()' based on? ",
            "answer:-": "   NumPy ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is the tensor to split? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is used to split a tensor with three or more dimensions into multiple tensors depthwise? ",
            "answer:-": "   indices_or_sections ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is each split? ",
            "answer:-": "   a view ofinput ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is the difference between a split and a view ofinput? ",
            "answer:-": "   ifindices_or_sectionsis an integer it must evenly divide the split dimension ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is this function based on? ",
            "answer:-": "   NumPy’snumpy.dsplit() ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is the equivalent to calling? ",
            "answer:-": "   torch.tensor_split ",
            "context:-": "   This is equivalent to calling torch.tensor_split(input, indices_or_sections, dim=2)",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is the function based on? ",
            "answer:-": "   NumPy ",
            "context:-": "   This is equivalent to calling torch.tensor_split(input, indices_or_sections, dim=2)",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is the difference between torch.tensor_split and torch.tensor_split? ",
            "answer:-": "   ifindices_or_sectionsis an integer it must evenly divide the split dimension ",
            "context:-": "   This is equivalent to calling torch.tensor_split(input, indices_or_sections, dim=2)",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What does input(Tensor) - tensor to split? ",
            "answer:-": "   input(Tensor) – tensor to split ",
            "context:-": "   This is equivalent to calling torch.tensor_split(input, indices_or_sections, dim=2)",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is the argument for indices_or_sections(Tensor,intorlistortuple of py ",
            "answer:-": "   intorch.tensor_split() ",
            "context:-": "   This is equivalent to calling torch.tensor_split(input, indices_or_sections, dim=2)",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What casting rules are described in the type promotiondocumentation? ",
            "answer:-": "   PyTorch ",
            "context:-": "   Determines if a type conversion is allowed under PyTorch casting rules",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  From(dpython",
            "answer:-": "   originaltorch.dtype ",
            "context:-": "   Determines if a type conversion is allowed under PyTorch casting rules",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.can_cast.html#torch.can_cast"
        },
        {
            "question:-": "  To what does dpython",
            "answer:-": "   targettorch.dtype ",
            "context:-": "   Determines if a type conversion is allowed under PyTorch casting rules",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.can_cast.html#torch.can_cast"
        },
        {
            "question:-": "  What is an example of a PyTorch casting rule? ",
            "answer:-": "   Example",
            "context:-": "   Determines if a type conversion is allowed under PyTorch casting rules",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.can_cast.html#torch.can_cast"
        },
        {
            "question:-": "  What does it compute? ",
            "answer:-": "   the sign and natural logarithm of the absolute value of the determinant of a square matrix ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.can_cast.html#torch.can_cast"
        },
        {
            "question:-": "  What is the natural logarithm of the modulus of the determinant? ",
            "answer:-": "   logarithmic polar decomposition of the determinant ",
            "context:-": "   For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What input types does complexA support? ",
            "answer:-": "   float, double, cfloat and cdouble dtypes ",
            "context:-": "   For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What type of matrices does complexA support? ",
            "answer:-": "   batches of matrices ",
            "context:-": "   For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is the name of the function that computes the sign and natural logarithm of the absolute value of the determinant of a square ",
            "answer:-": "   Note ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  Computes what of the absolute value of the determinant of a square matrix? ",
            "answer:-": "   the sign and natural logarithm ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What does complexA return? ",
            "answer:-": "   the angle and the natural logarithm of the modulus of the determinant ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  Supports input of float, double, cfloat and what other dtype? ",
            "answer:-": "   cdouble ",
            "context:-": "   Supports input of float, double, cfloat and cdouble dtypes.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What does complexA support? ",
            "answer:-": "   batches of matrices ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is the name of the feature that supports batches of matrices? ",
            "answer:-": "   Note ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  How is this function computed? ",
            "answer:-": "   usingtorch.lu() ",
            "context:-": "   This function is computed usingtorch.lu().",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  When inputs are on what device does this function synchronize that device with the CPU? ",
            "answer:-": "   CUDA device ",
            "context:-": "   For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What does this function do when inputs are on a CUDA device? ",
            "answer:-": "   Note ",
            "context:-": "   For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What types of inputs does torch.linalg.det() support? ",
            "answer:-": "   float, double, cfloat and cdouble dtypes ",
            "context:-": "   Supports input of float, double, cfloat and cdouble dtypes.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What does torch.linalg.det() support? ",
            "answer:-": "   batches of matrices ",
            "context:-": "   Supports input of float, double, cfloat and cdouble dtypes.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  When inputs are on what device does torch.lu() synchronize that device with the CPU? ",
            "answer:-": "   CUDA device ",
            "context:-": "   This function is computed usingtorch.lu().",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is the determinant that can be recovered? ",
            "answer:-": "   logabsdet ",
            "context:-": "   Note The determinant can be recovered assign * exp(logabsdet). Note When a matrix has a determinant of zero, it returns(0, -inf). See also torch.linalg.det()computes the determinant of square matrices. A(Tensor) – tensor of shape(*, n, n)where*is zero or more batch dimensions. out(tuple,optional) – output tuple of two tensors. Ignored ifNone. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  When a matrix has a determinant of what, it returns(0, -inf)? ",
            "answer:-": "   zero ",
            "context:-": "   Note The determinant can be recovered assign * exp(logabsdet). Note When a matrix has a determinant of zero, it returns(0, -inf). See also torch.linalg.det()computes the determinant of square matrices. A(Tensor) – tensor of shape(*, n, n)where*is zero or more batch dimensions. out(tuple,optional) – output tuple of two tensors. Ignored ifNone. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What computes the determinant of square matrices? ",
            "answer:-": "   torch.linalg.det() ",
            "context:-": "   Note The determinant can be recovered assign * exp(logabsdet). Note When a matrix has a determinant of zero, it returns(0, -inf). See also torch.linalg.det()computes the determinant of square matrices. A(Tensor) – tensor of shape(*, n, n)where*is zero or more batch dimensions. out(tuple,optional) – output tuple of two tensors. Ignored ifNone. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  Supports input of float, double, cfloat and cdouble dtypes. Also supports what? ",
            "answer:-": "   batches of matrices ",
            "context:-": "   Supports input of float, double, cfloat and cdouble dtypes.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What does torch.lu() do when inputs are on a CUDA device? ",
            "answer:-": "   synchronizes that device with the CPU ",
            "context:-": "   Supports input of float, double, cfloat and cdouble dtypes.",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is a tensor of shape(*, n, n)where*is zero or more batch dimensions? ",
            "answer:-": "   A(Tensor) ",
            "context:-": "   This function is computed usingtorch.lu().",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is out(tuple,optional)? ",
            "answer:-": "   output tuple of two tensors ",
            "context:-": "   This function is computed usingtorch.lu().",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is ignored by torch.linalg.det? ",
            "answer:-": "   ifNone ",
            "context:-": "   Note This function is computed usingtorch.lu().",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is the default value of torch.lu()? ",
            "answer:-": "   Default",
            "context:-": "   This function is computed usingtorch.lu().",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is ignored by torch.lu()? ",
            "answer:-": "   ifNone ",
            "context:-": "   This function is computed usingtorch.lu().",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is the tensor of shape(*, n, n)where*is zero or more batch dimensions? ",
            "answer:-": "   A(Tensor) ",
            "context:-": "   Note The determinant can be recovered assign * exp(logabsdet). Note When a matrix has a determinant of zero, it returns(0, -inf). See also torch.linalg.det()computes the determinant of square matrices. A(Tensor) – tensor of shape(*, n, n)where*is zero or more batch dimensions. out(tuple,optional) – output tuple of two tensors. Ignored ifNone. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  Out(tuple,optional) – what? ",
            "answer:-": "   output tuple of two tensors ",
            "context:-": "   Note The determinant can be recovered assign * exp(logabsdet). Note When a matrix has a determinant of zero, it returns(0, -inf). See also torch.linalg.det()computes the determinant of square matrices. A(Tensor) – tensor of shape(*, n, n)where*is zero or more batch dimensions. out(tuple,optional) – output tuple of two tensors. Ignored ifNone. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  Ignored what if a tuple of two tensors is output tuple of two tensor ",
            "answer:-": "   ifNone ",
            "context:-": "   Note The determinant can be recovered assign * exp(logabsdet). Note When a matrix has a determinant of zero, it returns(0, -inf). See also torch.linalg.det()computes the determinant of square matrices. A(Tensor) – tensor of shape(*, n, n)where*is zero or more batch dimensions. out(tuple,optional) – output tuple of two tensors. Ignored ifNone. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is the default value for a tuple of two tensors? ",
            "answer:-": "   Default",
            "context:-": "   Note The determinant can be recovered assign * exp(logabsdet). Note When a matrix has a determinant of zero, it returns(0, -inf). See also torch.linalg.det()computes the determinant of square matrices. A(Tensor) – tensor of shape(*, n, n)where*is zero or more batch dimensions. out(tuple,optional) – output tuple of two tensors. Ignored ifNone. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is the name of a tensor? ",
            "answer:-": "   tuple ",
            "context:-": "   Note The determinant can be recovered assign * exp(logabsdet). Note When a matrix has a determinant of zero, it returns(0, -inf). See also torch.linalg.det()computes the determinant of square matrices. A(Tensor) – tensor of shape(*, n, n)where*is zero or more batch dimensions. out(tuple,optional) – output tuple of two tensors. Ignored ifNone. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What will always be real-valued, even whenAis complex? ",
            "answer:-": "   logabsdet ",
            "context:-": "   Note The determinant can be recovered assign * exp(logabsdet). Note When a matrix has a determinant of zero, it returns(0, -inf). See also torch.linalg.det()computes the determinant of square matrices. A(Tensor) – tensor of shape(*, n, n)where*is zero or more batch dimensions. out(tuple,optional) – output tuple of two tensors. Ignored ifNone. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What will have the same dtype asA? ",
            "answer:-": "   sign ",
            "context:-": "   Note The determinant can be recovered assign * exp(logabsdet). Note When a matrix has a determinant of zero, it returns(0, -inf). See also torch.linalg.det()computes the determinant of square matrices. A(Tensor) – tensor of shape(*, n, n)where*is zero or more batch dimensions. out(tuple,optional) – output tuple of two tensors. Ignored ifNone. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is an example of a real-valued tuple? ",
            "answer:-": "   Examples ",
            "context:-": "   Note The determinant can be recovered assign * exp(logabsdet). Note When a matrix has a determinant of zero, it returns(0, -inf). See also torch.linalg.det()computes the determinant of square matrices. A(Tensor) – tensor of shape(*, n, n)where*is zero or more batch dimensions. out(tuple,optional) – output tuple of two tensors. Ignored ifNone. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What does the torch package provide for efficient serializing of Tensors and arbitrary types? ",
            "answer:-": "   provides many utilities ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What does the torch package return ifobjis a PyTorch tensor? ",
            "answer:-": "   PyTorch storage object ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is not equal to zero after type conversions? ",
            "answer:-": "   a single element tensor ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the torch set? ",
            "answer:-": "   default floating point dtype tod ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the torch package get? ",
            "answer:-": "   current default floating pointtorch.dtype ",
            "context:-": "   The torch package contains data structures for multi-dimensional",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what ifobjis a PyTorch tensor? ",
            "answer:-": "   True ",
            "context:-": "   Returns True ifobjis a PyTorch tensor.   Returns True ifobjis a PyTorch storage object.   Returns True if the data type ofinputis a complex data type i.e., one oftorch.complex64, andtorch.complex128.   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns True if theinputis a single element tensor which is not equal to zero after type conversions? ",
            "answer:-": "   if theinputis a single element tensor ",
            "context:-": "   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Returns the defaulttorch.Tensortype return? ",
            "answer:-": "   total number of elements in theinputtensor ",
            "context:-": "   Returns True if the data type ofinputis a complex data type i.e., one oftorch.complex64, andtorch.complex128.   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What disables denormal floating numbers on CPU? ",
            "answer:-": "   Disables ",
            "context:-": "   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is constructed? ",
            "answer:-": "   a tensor withdata ",
            "context:-": "   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Constructs asparse tensor in COO(rdinate) formatwith what? ",
            "answer:-": "   specified values at the givenindices ",
            "context:-": "   Returns True if the data type ofinputis a floating point data type i.e., one oftorch.float64,torch.float32,torch.float16, andtorch.bfloat16.   Returns True if theinputis a single element tensor which is not equal to zero after type conversions.   Sets the default floating point dtype tod.   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Constructs asparse tensor in COO(rdinate) format with what? ",
            "answer:-": "   specified values at the givenindices ",
            "context:-": "   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Creates aTensorfrom what? ",
            "answer:-": "   anumpy.ndarray ",
            "context:-": "   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the defaulttorch.Tensortype? ",
            "answer:-": "   current default floating pointtorch.dtype ",
            "context:-": "   Get the current default floating pointtorch.dtype.   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned by the defaulttorch.Tensortype to floating point tensor typet? ",
            "answer:-": "   the total number of elements in theinputtensor ",
            "context:-": "   Sets the defaulttorch.Tensortype to floating point tensor typet.   Returns the total number of elements in theinputtensor.   Set options for printing.   Disables denormal floating numbers on CPU. Note Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  In what format is the asparse tensor constructed? ",
            "answer:-": "   COO(rdinate) ",
            "context:-": "   Constructs asparse tensor in COO(rdinate) formatwith specified values at the givenindices.   Convert the data into atorch.Tensor.   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the asparse tensor in COO(rdinate) format contain? ",
            "answer:-": "   specified values at the givenindices ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What tensor of sizeendstartstepleftlceil fractextend - text ",
            "answer:-": "   1-D ",
            "context:-": "   Convert the data into atorch.Tensor.   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor of sizeendstartstep+1leftlfloor fractextend  ",
            "answer:-": "1",
            "context:-": "   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the tensorinput that creates a view of an existingtorch.Tensorinput ",
            "answer:-": "   specifiedsize,strideandstorage_offset ",
            "context:-": "   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a tensor filled with the scalar value0? ",
            "answer:-": "   a tensor filled with the scalar value0 ",
            "context:-": "   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the tensor of sizeendstartstepleftlceil fractextend -  ",
            "answer:-": "   1-D ",
            "context:-": "   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What tensor of sizeendstartstep+1leftlfloor fractextend -  ",
            "answer:-": "   1-D ",
            "context:-": "   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor does anumpy.ndarray create? ",
            "answer:-": "   one-dimensional ",
            "context:-": "   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is filled with the scalar value0? ",
            "answer:-": "   a tensor ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  On a logarithmic scale with what is the value of a one-dimensional tensor of sizesteps? ",
            "answer:-": "   basebase ",
            "context:-": "   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What tensor is created on a logarithmic scale with basebase? ",
            "answer:-": "   a one-dimensional tensor of sizesteps ",
            "context:-": "   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a what size tensor of sizeendstartstepleftlceil fractextend ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with the scalar value of what? ",
            "answer:-": "1",
            "context:-": "   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens when a tensor is filled with uninitialized data? ",
            "answer:-": "   Returns an uninitialized tensor with the same size asinput ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How many tensors does sizeendstartstep return? ",
            "answer:-": "1",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  On what scale is a one-dimensional tensor of sizesteps created? ",
            "answer:-": "   a logarithmic scale with basebase ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with what type of data? ",
            "answer:-": "   uninitialized ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor of sizesizefilled filled with uninitialized data. Returns a tensor with the ",
            "answer:-": "   withfill_value ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with what size asinputfilled withfill_value? ",
            "answer:-": "   same size ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Converts a float tensor to what with given scale and zero point? ",
            "answer:-": "   quantized tensor ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  On a logarithmic scale, what is the value of the one-dimensional tensor of sizesteps? ",
            "answer:-": "   basebase ",
            "context:-": "   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Creates a tensor of sizesizefilled what? ",
            "answer:-": "   withfill_value ",
            "context:-": "   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a float tensor convert to? ",
            "answer:-": "   a quantized tensor ",
            "context:-": "   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a float tensor converted to? ",
            "answer:-": "   per-channel quantized tensor ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is returned by dequantizing a quantized Tensor? ",
            "answer:-": "   fp32 ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is created when a tensor is filled with uninitialized data? ",
            "answer:-": "   a tensor of sizesizefilled withfill_value ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What tensor is converted to a quantized tensor with given scale and zero point? ",
            "answer:-": "   float tensor ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens to the given sequence ofseqtensors in the given dimension? ",
            "answer:-": "   Concatenates ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Splits a tensor into what? ",
            "answer:-": "   a specific number of chunks ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Splitsinput, a tensor with three or more dimensions, into what according toindices_or_sections? ",
            "answer:-": "   multiple tensors depthwise ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens when horizontally stacking the tensors intensors? ",
            "answer:-": "   Creates a new tensor ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Splitsinput, a tensor with one or more dimensions, into what according toindices_or_sections? ",
            "answer:-": "   multiple tensors horizontally ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What function moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination? ",
            "answer:-": "   Alias fortorch.movedim() ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Split a tensor into? ",
            "answer:-": "   a specific number of chunks ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Creates a new tensor by what? ",
            "answer:-": "   horizontally stacking the tensors intensors ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a tensor with one or more dimensions split into? ",
            "answer:-": "   multiple tensors horizontally ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that moves the dimension(s) ofinputat the position(s) insourceto the position(s) ",
            "answer:-": "   Alias fortorch.movedim() ",
            "context:-": "   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a tensor with the same data and number of elements asinput but with the specified shape ",
            "answer:-": "   Alias oftorch.vstack() ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How do you create a new tensor by horizontally stacking the tensors intensors? ",
            "answer:-": "   Stack tensors ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens when a tensor is stacked horizontally? ",
            "answer:-": "   Gathers values along an axis specified bydim ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is used to split a tensor with one or more dimensions into multiple tensors horizontally? ",
            "answer:-": "   indices_or_sections ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What do tensors do in sequence depthwise? ",
            "answer:-": "   Stack tensors ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according to? ",
            "answer:-": "   indices_or_sections ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Gathers values along what specified bydim? ",
            "answer:-": "   axis ",
            "context:-": "   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do when a tensor is split into multiple tensors? ",
            "answer:-": "   Stack tensors ",
            "context:-": "   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Which version oftorch.Tensor.scatter_add_() Splits the tensor into chunks? ",
            "answer:-": "   Out-of-place version oftorch.Tensor.scatter_() ",
            "context:-": "   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a tensor with one or more dimensions do? ",
            "answer:-": "   Stack tensors ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens when a tensor is returned with all the dimensions ofinputof size1removed? ",
            "answer:-": "   Concatenates a sequence of tensors along a new dimension ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What function returns a tensor with all the dimensions ofinputof size1removed? ",
            "answer:-": "   Alias fortorch.transpose() ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.transpose() call? ",
            "answer:-": "   Alias fortorch.transpose() ",
            "context:-": "   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What dimensions does Alias fortorch.transpose() transpose? ",
            "answer:-": "   0 and 1 ",
            "context:-": "   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with the elements of what? ",
            "answer:-": "   given indices ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Selects values from what indicesalong the givendim? ",
            "answer:-": "   1-dimensional indices ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.movedim() do? ",
            "answer:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what with all the dimensions ofinputof size1removed? ",
            "answer:-": "   a tensor ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that transforms a sequence of tensors along a new dimension? ",
            "answer:-": "   Alias fortorch.transpose() ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with the elements ofinputat what? ",
            "answer:-": "   given indices ",
            "context:-": "   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a new tensor that returns a new tensor that is? ",
            "answer:-": "   a narrowed version ofinputtensor ",
            "context:-": "   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Selects values from what indices along the givendim? ",
            "answer:-": "   1-dimensional indices ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are the sub-tensors all of which split a tensor into? ",
            "answer:-": "   views ofinput ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How does one construct a tensor? ",
            "answer:-": "   by repeating the elements ofinput ",
            "context:-": "   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are the dimensions of a tensor? ",
            "answer:-": "   0 and 1 ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with what removed? ",
            "answer:-": "   all the dimensions ofinputof size1 ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a tensor with all the dimensions ofinput of size1removed? ",
            "answer:-": "   Alias fortorch.transpose() ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with the elements ofinputat the given what? ",
            "answer:-": "   indices ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How is a tensor constructed? ",
            "answer:-": "   by repeating the elements ofinput ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor that is what? ",
            "answer:-": "   a transposed version ofinput ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Returns a tensor that is a transposed version ofinput do? ",
            "answer:-": "   Removes a tensor dimension ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor of the same size asinputwith each element sampled from what distribution with rate parameter given by the corresponding ",
            "answer:-": "   Poisson ",
            "context:-": "   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) and what (exclusive)? ",
            "answer:-": "   high ",
            "context:-": "   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Draws binary random numbers (0 or 1) from what? ",
            "answer:-": "   a Bernoulli distribution ",
            "context:-": "   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Each element sampled from what distribution with rate parameter given by the corresponding element ininputi.e., Returns a tens ",
            "answer:-": "   Poisson ",
            "context:-": "   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when a tensor is filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive)? ",
            "answer:-": "   a tensor with the same shape as Tensorinput ",
            "context:-": "   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with random numbers from a normal distribution with what? ",
            "answer:-": "   mean0and variance1 ",
            "context:-": "   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is defined on Tensors as well? ",
            "answer:-": "   in-place random sampling functions ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the log-normal distribution torch? ",
            "answer:-": "   normal ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a tensor filled with random numbers from 0ton-1? ",
            "answer:-": "   random permutation of integers ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where are the numbers sampled from? ",
            "answer:-": "   discrete uniform distribution ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Tensor.uniform_()- numbers sampled from what distribution? ",
            "answer:-": "   continuous uniform distribution ",
            "context:-": "   There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Alias fortorch.acos(). Returns a new tensor with what cosine of the elements of ",
            "answer:-": "   inverse hyperbolic ",
            "context:-": "   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the element-wise division performed by Alias fortorch? ",
            "answer:-": "   oftensor1bytensor2 ",
            "context:-": "   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a new tensor with the arctangent of the elements ofinput? ",
            "answer:-": "   Alias fortorch.atan() ",
            "context:-": "   Computes the absolute value of each element ininput.   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with the inverse hyperbolic sine of the elements ofinput. Alias fortorch ",
            "answer:-": "   arctangent ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Alias fortorch.atan(). Returns a new tensor with what of the elements ofinput? ",
            "answer:-": "   inverse hyperbolic tangent ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a new tensor with the inverse hyperbolic tangent of the elements ofin ",
            "answer:-": "   Alias fortorch.atanh() ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what cosine of the elements ofinput? ",
            "answer:-": "   inverse hyperbolic ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the element-wise division performed by Alias fortorch.acosh()? ",
            "answer:-": "   oftensor1bytensor2 ",
            "context:-": "   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what sine of the elements ofinput? ",
            "answer:-": "   inverse hyperbolic ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Alias fortorch.asinh(). Returns a new tensor with the inverse hyperbolic sine ",
            "answer:-": "   arctangent ",
            "context:-": "   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the element-wise multiplication performed by Alias fortorch.acos? ",
            "answer:-": "   oftensor1bytensor2 ",
            "context:-": "   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that adds the scalarotherto each element of the input input? ",
            "answer:-": "   Alias fortorch.acosh() ",
            "context:-": "   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What function returns a new tensor with the inverse hyperbolic tangent of the elements ofinput? ",
            "answer:-": "   Alias fortorch.atanh() ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What function returns a new tensor with the inverse hyperbolic sine of the elements ofinput? ",
            "answer:-": "   Alias fortorch.asin() ",
            "context:-": "   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the bitwise OR ofinputandother. Computes the bitwise XOR ofinputandother. ",
            "answer:-": "   AND ",
            "context:-": "   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the bitwise what ofinputandother? ",
            "answer:-": "   XOR ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Computes the bitwise NOT of the given input tensor? ",
            "answer:-": "   Computes the bitwise NOT ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Computes the bitwise OR ofinputandother? ",
            "answer:-": "   Computes the bitwise OR ofinputandother ",
            "context:-": "   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes what NOT of the given input tensor? ",
            "answer:-": "   bitwise ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.clamp() clamp? ",
            "answer:-": "   all elements ininputinto the range[min,max] ",
            "context:-": "   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that clamps all elements ininputinto the range[min,max]? ",
            "answer:-": "   Alias fortorch.clamp() ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the bitwise NOT of the given input tensor. Computes the bitwise OR ofinputandother? ",
            "answer:-": "   Computes the bitwise OR ofinputandother ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What computes the element-wise conjugate of the given inputtensor? ",
            "answer:-": "   Alias fortorch.clamp() ",
            "context:-": "   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.clamp() compute? ",
            "answer:-": "   the element-wise conjugate ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What computes the element-wise conjugate of the giveninputtensor? ",
            "answer:-": "   Alias fortorch.clamp() ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.clamp() create a new floating-point tensor with? ",
            "answer:-": "   the magnitude ofinputand the sign ofother ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Clamps which elements ininputinto the range[min,max]? ",
            "answer:-": "   all elements ininputinto the range[min,max] ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What tangent does Alias fortorch.atan() return a new tensor with? ",
            "answer:-": "   inverse hyperbolic tangent ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.clamp() do? ",
            "answer:-": "   Clamps all elements ininputinto the range[min,max]. ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the indices of the maximum value of all elements in theinputtensor? ",
            "answer:-": "   Returns the indices of the maximum value of all elements in theinputtensor ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor.   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the maximum value of each slice of theinputtensor in the given dimension(s)dim? ",
            "answer:-": "   the indices of the minimum value(s) of the flattened tensor or along a dimension ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor.   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the maximum value of all elements in theinputtensor. Returns the minimum value of all elements in theinputtensor ",
            "answer:-": "   input tensor ",
            "context:-": "   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of the minimum value(s) of the flattened tensor or along a dimension? ",
            "answer:-": "   the indices ",
            "context:-": "   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value in the given dimension(s)dim? ",
            "answer:-": "   the maximum value of each slice of theinputtensor ",
            "context:-": "   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Returns ignoreNaNvalues? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Returns the matrix norm or vector norm of a given tensor return? ",
            "answer:-": "   the sum of all elements ",
            "context:-": "   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What quantiles of each row of theinputtensor along the dimensiondim? ",
            "answer:-": "   q-th ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Tests if all elements ininputevaluate to what? ",
            "answer:-": "   True ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value, ignoringNaNvalues? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the variant oftorch.quantile() do? ",
            "answer:-": "   ignores ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when Not a Numbers (NaNs) are treated as zero? ",
            "answer:-": "   the sum of all elements ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Returns the sum of all elements in theinputtensor? ",
            "answer:-": "   the product of all elements in theinputtensor ",
            "context:-": "   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  The variant oftorch.quantile()ignores what ifNaNvalues ininputdid not exist? ",
            "answer:-": "   quantilesqas ",
            "context:-": "   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is Bessel's correction? ",
            "answer:-": "   IfunbiasedisTrue ",
            "context:-": "   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value? ",
            "answer:-": "   mean value of all elements in theinputtensor ",
            "context:-": "   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Returns treat Not a Numbers (NaNs) as zero? ",
            "answer:-": "   the sum of all elements ",
            "context:-": "   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Bessel's correction will be used to calculate the standard deviation. ",
            "answer:-": "   IfunbiasedisTrue ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  IfunbiasedisTrue, Bessel's correction will be used to calculate what? ",
            "answer:-": "   standard deviation ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Bessel's correction return? ",
            "answer:-": "   the sum of all elements in theinputtensor ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  If Bessel's correction is used, what will be used to calculate the standard deviation? ",
            "answer:-": "   IfunbiasedisTrue ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the sum of all elements in the inputtensor. ",
            "answer:-": "   unique elements ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of the input tensor? ",
            "answer:-": "   unique elements ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens to every consecutive group of equivalent elements? ",
            "answer:-": "   Eliminates all but the first element ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of Bessel's correction? ",
            "answer:-": "   IfunbiasedisTrue ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what elements of the input tensor? ",
            "answer:-": "   unique elements ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Bessel's correction remove from every consecutive group of equivalent elements? ",
            "answer:-": "   Eliminates all but the first element ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is Bessel's correction used for? ",
            "answer:-": "   IfunbiasedisTrue ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are Broadcast_tensors() used for? ",
            "answer:-": "   shapes ",
            "context:-": "   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of the buckets to which each value in theinputbelongs? ",
            "answer:-": "   the indices ",
            "context:-": "   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when the indices of the buckets are set byboundaries? ",
            "answer:-": "   Do cartesian product of the given sequence of tensors ",
            "context:-": "   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes batched the what? ",
            "answer:-": "   p-norm distance between each pair of the two collections of row vectors ",
            "context:-": "   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return a copy ofinput? ",
            "answer:-": "   Compute combinations of lengthrrrof the given tensor ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.     ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the cumulative product of elements ofinputin the dimensiondim? ",
            "answer:-": "   Returns the cumulative product of elements ofinputin the dimensiondim ",
            "context:-": "   Similar tobroadcast_tensors()but for shapes.   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Ifinputis a vector (1-D tensor), then returns what? ",
            "answer:-": "   a 2-D square tensor ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the indices of the buckets to which each value in theinputbelongs? ",
            "answer:-": "   Do cartesian product of the given sequence of tensors ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.     ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the ",
            "answer:-": "   the cumulative product of elements ofinputin the dimensiondim ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the boundaries of the buckets are set byboundaries.   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.     ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What product of the given sequence of tensors? ",
            "answer:-": "   Do cartesian product ",
            "context:-": "   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim ",
            "answer:-": "   the cumulative product of elements ofinputin the dimensiondim ",
            "context:-": "   Do cartesian product of the given sequence of tensors.   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when calculating the p-norm distance between each pair of row vectors? ",
            "answer:-": "   a copy ofinput ",
            "context:-": "   Computes batched the p-norm distance between each pair of the two collections of row vectors.   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Returns a copy ofinput do? ",
            "answer:-": "   Compute combinations of lengthrrrof the given tensor ",
            "context:-": "   Returns a copy ofinput.   Compute combinations of lengthrrrof the given tensor.   Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned in dimensiondimofinputandother? ",
            "answer:-": "   the cross product of vectors ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the forward difference along the given dimension? ",
            "answer:-": "   n-th ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what ofinputin the dimensiondim? ",
            "answer:-": "   cumulative product of elements ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of elements ofinputin the dimensiondim? ",
            "answer:-": "   cumulative sum ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Ifinputis a vector, then returns a 2-D square tensor Creates a tensor whose diagonals ",
            "answer:-": "   1-D tensor ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens with a reduced add step? ",
            "answer:-": "   all matrix multiplications get accumulated along the first dimension ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What performs a batch matrix-matrix product of matricesmat1andmat2? ",
            "answer:-": "   matrix multiplication ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a batch matrix-matrix product of? ",
            "answer:-": "   matrices stored ininputandmat2 ",
            "context:-": "   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the batch matrix-matrix product of matrices inbatch1andbatch2 perform? ",
            "answer:-": "   matrices stored ininputandmat2 ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a positive semidefinite matrix to be inverted given? ",
            "answer:-": "   Cholesky factor matrixuuu ",
            "context:-": "   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the batch matrix-matrix product of matrices stored ininputandmat2 return? ",
            "answer:-": "   matrix product of theNNN2-D tensors ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the solution to what problems for a full rank matrixAAAof size(mn)(m times n ",
            "answer:-": "   least squares and least norm problems ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What solve of the linear systemAx=bAx = bAx=busing the partially pivoted LU factorization of A from ",
            "answer:-": "   LU ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the positive semidefinite matrix to be inverted given? ",
            "answer:-": "   Cholesky factor matrixuuu ",
            "context:-": "   Solves a ar system of equations with a positive semidefinite matrix to be inverted given its Cholesky factor matrixuuu.   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the scale of dtype and torch.complex128 condition(BoolTensor) – When True ( ",
            "answer:-": "   x ",
            "context:-": "   Return a tensor of elements selected from eitherxory, depending oncondition. The operation is defined as",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What function returns a tensor of shape equal to the broadcasted shape of condition,x,y? ",
            "answer:-": "   alsotorch.nonzero() ",
            "context:-": "   Return a tensor of elements selected from eitherxory, depending oncondition. The operation is defined as",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What is the default setting for the default tensor type? ",
            "answer:-": "   ifNone ",
            "context:-": "   Returns a tensor filled with random numbers from a normal distribution",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.where.html#torch.where"
        },
        {
            "question:-": "  What does ifNone use for the default tensor type? ",
            "answer:-": "   current device ",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randn.html#torch.randn"
        },
        {
            "question:-": "  What is low(int,optional)? ",
            "answer:-": "   Lowest integer to be drawn from the distribution ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is returned when the boundaries of the buckets are set byboundaries? ",
            "answer:-": "   the indices of the buckets to which each value in theinputbelongs ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.randint_like.html#torch.randint_like"
        },
        {
            "question:-": "  If the left boundary is closed, what is the default value? ",
            "answer:-": "   Ifrightis False ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What features does PyTorch provide for working with C++? ",
            "answer:-": "   several features ",
            "context:-": "   If you are looking for the PyTorch C++ API docs, directly gohere. PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What allows PyTorch models defined in Python to be serialized and then loaded and run in C++? ",
            "answer:-": "   TorchScript ",
            "context:-": "   PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you learn more about TorchScript? ",
            "answer:-": "   Loading a TorchScript Model in C++ ",
            "context:-": "   TorchScriptallows PyTorch models defined in Python to be serialized and then loaded and run in C++ capturing the model code via compilation or tracing its execution. You can learn more in theLoading a TorchScript Model in C++ tutorial. This means you can define your models in Python as much as possible, but subsequently export them via TorchScript for doing no-Python execution in production or embedded environments. The TorchScript C++ API is used to interact with these models and the TorchScript execution engine, including",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What language can you define your models in? ",
            "answer:-": "   Python ",
            "context:-": "   If you are looking for the PyTorch C++ API docs, directly gohere. PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What can be done if needed? ",
            "answer:-": "   simple model modifications ",
            "context:-": "   TorchScriptallows PyTorch models defined in Python to be serialized and then loaded and run in C++ capturing the model code via compilation or tracing its execution. You can learn more in theLoading a TorchScript Model in C++ tutorial. This means you can define your models in Python as much as possible, but subsequently export them via TorchScript for doing no-Python execution in production or embedded environments. The TorchScript C++ API is used to interact with these models and the TorchScript execution engine, including",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What API is used to construct the input and do preprocessing? ",
            "answer:-": "   C++ Tensor API ",
            "context:-": "   If you are looking for the PyTorch C++ API docs, directly gohere. PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  In what language can you define your PyTorch models? ",
            "answer:-": "   Python ",
            "context:-": "   PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What API does PyTorch use to do preprocessing? ",
            "answer:-": "   C++ Tensor API ",
            "context:-": "   PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  In what language are PyTorch models defined? ",
            "answer:-": "   Python ",
            "context:-": "   TorchScriptallows PyTorch models defined in Python to be serialized and then loaded and run in C++ capturing the model code via compilation or tracing its execution. You can learn more in theLoading a TorchScript Model in C++ tutorial. This means you can define your models in Python as much as possible, but subsequently export them via TorchScript for doing no-Python execution in production or embedded environments. The TorchScript C++ API is used to interact with these models and the TorchScript execution engine, including",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What language can TorchScript models be defined in? ",
            "answer:-": "   Python ",
            "context:-": "   TorchScriptallows PyTorch models defined in Python to be serialized and then loaded and run in C++ capturing the model code via compilation or tracing its execution. You can learn more in theLoading a TorchScript Model in C++ tutorial. This means you can define your models in Python as much as possible, but subsequently export them via TorchScript for doing no-Python execution in production or embedded environments. The TorchScript C++ API is used to interact with these models and the TorchScript execution engine, including",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is used to construct the input and do preprocessing? ",
            "answer:-": "   C++ Tensor API ",
            "context:-": "   TorchScriptallows PyTorch models defined in Python to be serialized and then loaded and run in C++ capturing the model code via compilation or tracing its execution. You can learn more in theLoading a TorchScript Model in C++ tutorial. This means you can define your models in Python as much as possible, but subsequently export them via TorchScript for doing no-Python execution in production or embedded environments. The TorchScript C++ API is used to interact with these models and the TorchScript execution engine, including",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What can be augmented with user-supplied code? ",
            "answer:-": "   custom operators and custom classes ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  From where can custom operators and classes be invoked in TorchScript code run? ",
            "answer:-": "   Python or from C++ ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What walks through interfacing TorchScript with OpenCV? ",
            "answer:-": "   TheExtending TorchScript with Custom C++ Operatorstutorial ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  C++ classes and structs can be bound into TorchScript through what type of interface? ",
            "answer:-": "   pybind11 ",
            "context:-": "   Constructing the input and doing preprocessing using C++ Tensor API TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is the name of the tensor and autograd operations in PyTorch Python API? ",
            "answer:-": "   torch",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is the full list of methods available in PyTorch? ",
            "answer:-": "   https",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is an example of a tensor and autograd operation in PyTorch? ",
            "answer:-": "   torch",
            "context:-": "   Constructing the input and doing preprocessing using C++ Tensor API TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What can be bound into TorchScript through a pybind11-like interface? ",
            "answer:-": "   C++ classes and structs ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Most of the tensor and autograd operations in PyTorch Python API are also available in what? ",
            "answer:-": "   C++ API ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Most of the tensor and autograd operations in PyTorch Python API are also available in what language? ",
            "answer:-": "   C++ ",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you find more details on the tensor autograd APIs and thetorch",
            "answer:-": "   https",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What are some examples of Torch",
            "answer:-": "   add/reshape/clone ",
            "context:-": "   torch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What script does authoring a neural net model need to be done in? ",
            "answer:-": "   TorchScript ",
            "context:-": "   torch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What language does TorchScript require a model to be authored in? ",
            "answer:-": "   C++ ",
            "context:-": "   torch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What API does the astorch",
            "answer:-": "   Python ",
            "context:-": "   torch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html",
            "undefined": "optim closely resemble? "
        },
        {
            "question:-": "  C++ tensor indexing API looks and behaves the same as what? ",
            "answer:-": "   Python API ",
            "context:-": "   C++ tensor indexing API that looks and behaves the same as the Python API. For details on its usage, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What script does the author infer in C++ use? ",
            "answer:-": "   TorchScript ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  In what language can a model be authored? ",
            "answer:-": "   C++ ",
            "context:-": "   The tensor autograd APIs and thetorch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is an example of a Python component that needs to be authored in C++? ",
            "answer:-": "   undesirable ",
            "context:-": "   The tensor autograd APIs and thetorch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  On what system are two types of libtorch binaries provided? ",
            "answer:-": "   Linux ",
            "context:-": "   For an overview of the PyTorch C++ model authoring and training API, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What can TorchScript be augmented with user-supplied code? ",
            "answer:-": "   custom operators and custom classes ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  From what languages can custom operators and classes be invoked in TorchScript code? ",
            "answer:-": "   Python or from C++ ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  C++ classes and structs can be bound into TorchScript through what interface? ",
            "answer:-": "   pybind11 ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  If thevaluesandindicestensors are the same size as input, what is the default? ",
            "answer:-": "   IfkeepdimisTrue ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is the difference between thevaluesandindicestensors and theinputtensor? ",
            "answer:-": "   1 fewer dimension ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  Computes what decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices ",
            "answer:-": "   Cholesky ",
            "context:-": "   Computes the Cholesky decomposition of a symmetric positive-definite",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  IfupperisTrue, the returned matrixUis what? ",
            "answer:-": "   upper-triangular ",
            "context:-": "   Computes the Cholesky decomposition of a symmetric positive-definite",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the name of the matrixUis upper-triangular? ",
            "answer:-": "   IfupperisTrue ",
            "context:-": "   IfupperisTrue, the returned matrixUis upper-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  WhenupperisFalse, the returned tensor will be composed of what of each of the individual matrices? ",
            "answer:-": "   lower-triangular Cholesky factors ",
            "context:-": "   IfupperisTrue, the returned matrixUis upper-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  Which flag indicates whether to return a upper or lower triangular matrix? ",
            "answer:-": "   Default",
            "context:-": "   IfupperisTrue, the returned matrixUis upper-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  IfupperisTrue, the returned tensor will be composed of what of each of the individual matrices? ",
            "answer:-": "   upper-triangular Cholesky factors ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  IfupperisTrue, the returned tensor will be composed of what? ",
            "answer:-": "   lower-triangular Cholesky factors ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the term for a feature that may change based on user feedback? ",
            "answer:-": "   Beta ",
            "context:-": "   This library is part of thePyTorchproject. PyTorch is an open source",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What classification do we commit to seeing the feature through for Beta features? ",
            "answer:-": "   Stable ",
            "context:-": "   This library is part of thePyTorchproject. PyTorch is an open source",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What features are typically not available as part of binary distributions like PyPI or Conda? ",
            "answer:-": "   Prototype ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What feature is typically not available as part of binary distributions like PyPI or Conda? ",
            "answer:-": "   Prototype ",
            "context:-": "   Features described in this documentation are classified by release status",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What classification will these features be maintained long-term and there should generally be no major performance limitations or gaps in documentation? ",
            "answer:-": "   Stable ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the name of the library that contains Thetorchtextpackage? ",
            "answer:-": "   Package Reference PyTorch Libraries ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is not specified? ",
            "answer:-": "   Iftolis ",
            "context:-": "   Returns the numerical rank of a 2-D tensor. The method to compute the",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the default value for the output tensor? ",
            "answer:-": "   False out ",
            "context:-": "   Returns the numerical rank of a 2-D tensor. The method to compute the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  In what version of PyTorch is the torch.special module? ",
            "answer:-": "   BETA ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.matrix_rank.html#torch.matrix_rank"
        },
        {
            "question:-": "  What are still being added to the torch.special module? ",
            "answer:-": "   New functions ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the name of each function that may change in future PyTorch releases? ",
            "answer:-": "   documentation ",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What does the torch.special module do? ",
            "answer:-": "   Computes the complementary error function ofinput ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the complementary error function ofinput defined as? ",
            "answer:-": "   input(Tensor) – the input tensor ",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the name of the function that computes the inverse error function ofinput? ",
            "answer:-": "   Computes the inverse error function ofinput ",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is an example of a function that provides greater precision than exp(x) - 1 for small values of x? ",
            "answer:-": "   Computes the exponential of the elements minus 1 ofinput ",
            "context:-": "   input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes what error function ofinput? ",
            "answer:-": "   inverse error function ",
            "context:-": "   Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the complementary error function of input defined as? ",
            "answer:-": "   input(Tensor) – the input tensor ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the inverse error function defined as? ",
            "answer:-": "   input(Tensor) – the input tensor ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes what for each element of input? ",
            "answer:-": "   the exponentially scaled zeroth order modified Bessel function ",
            "context:-": "   Computes the expit (also known as the logistic sigmoid function) of the elements ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What must the values of index be? ",
            "answer:-": "   between0andself.size(dim)-1inclusive ",
            "context:-": "   Moreover, as forgather(), the values ofindexmust be",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What operation is used to reduce a 3-D tensor? ",
            "answer:-": "   multiplication ",
            "context:-": "   Moreover, as forgather(), the values ofindexmust be",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the axis along which to index? ",
            "answer:-": "   dim(int) ",
            "context:-": "   When indices are not unique, the behavior is non-deterministic (one of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  Reducing with the addition operation is the same as what? ",
            "answer:-": "   usingscatter_add_() ",
            "context:-": "   When indices are not unique, the behavior is non-deterministic (one of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the default value for a global default? ",
            "answer:-": "   ifNone ",
            "context:-": "   Warning This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the behavior of usetorch.arange() inconsistent with? ",
            "answer:-": "   Python’s range builtin ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the default value of the return tensor? ",
            "answer:-": "   ifNone ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What does the function infer the data type from the other input arguments? ",
            "answer:-": "   Ifdtypeis not given ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What default uses a global default? ",
            "answer:-": "   ifNone ",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  If any ofstart,end, orstopare floating-point, thedtypeis inferred to be what? ",
            "answer:-": "   the default dtype ",
            "context:-": "   end(float) – the ending value for the set of points step(float) – the gap between each pair of adjacent points. Default",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What function operates on all devices? ",
            "answer:-": "   fork_rng() ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  If you explicitly specify devices, this warning will be suppressed? ",
            "answer:-": "   enabled(bool) ",
            "context:-": "   devices(iterable of CUDA IDs) – CUDA devices for which to fork",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is a convenience argument for? ",
            "answer:-": "   disabling the context manager ",
            "context:-": "   devices(iterable of CUDA IDs) – CUDA devices for which to fork",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  Returns the initial seed for generating random numbers as a Pythonlong. Returns atorch.Generatorobject. ",
            "answer:-": "   Sets the seed for generating random numbers ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  Returns the initial seed for generating random numbers as a Pythonlong. Returns atorch.Generatorobject. what? ",
            "answer:-": "   Sets the seed for generating random numbers ",
            "context:-": "   devices(iterable of CUDA IDs) – CUDA devices for which to fork",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What are remapped to positive values with the formula0xfff_fff_fff_ffff + seed ",
            "answer:-": "   Negative inputs ",
            "context:-": "   devices(iterable of CUDA IDs) – CUDA devices for which to fork",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What does new_state(torch.ByteTensor) do? ",
            "answer:-": "   Sets the random number generator state ",
            "context:-": "   enabled(bool) – ifFalse, the RNG is not forked.  This is a convenience",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is not guaranteed across PyTorch releases, individual commits, or different platforms? ",
            "answer:-": "   Completely reproducible results ",
            "context:-": "   Completely reproducible results are not guaranteed across PyTorch releases,",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What happens when using identical seeds? ",
            "answer:-": "   results may not be reproducible between CPU and GPU executions ",
            "context:-": "   Completely reproducible results are not guaranteed across PyTorch releases,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  How can you avoid using nondeterministic algorithms for some operations? ",
            "answer:-": "   multiple calls to those operations, given the same inputs, will produce the same result ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What operations are often slower than nondeterministic operations? ",
            "answer:-": "   Warning Deterministic operations ",
            "context:-": "   Completely reproducible results are not guaranteed across PyTorch releases,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Are Deterministic operations faster or slower than nondeterministic operations? ",
            "answer:-": "   slower ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Deterministic operations are often what? ",
            "answer:-": "   slower ",
            "context:-": "   Warning Deterministic operations are often slower than nondeterministic operations, so",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  If you are using other libraries that use random number generators, refer to the documentation for those libraries to see how to do what for them? ",
            "answer:-": "   set consistent seeds ",
            "context:-": "   You can usetorch.manual_seed()to seed the RNG for all devices (both",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What library can be a source of nondeterminism across multiple executions of an application? ",
            "answer:-": "   cuDNN library ",
            "context:-": "   The cuDNN library, used by CUDA convolution operations, can be a source of nondeterminism",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What can an optional feature run when a cuDNN convolution is called with a new set of size parameters? ",
            "answer:-": "   multiple convolution algorithms ",
            "context:-": "   The cuDNN library, used by CUDA convolution operations, can be a source of nondeterminism",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What will be used consistently during the rest of the process for the corresponding set of size parameters? ",
            "answer:-": "   the fastest algorithm ",
            "context:-": "   The cuDNN library, used by CUDA convolution operations, can be a source of nondeterminism",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Due to benchmarking noise and different hardware, the benchmark may select what on subsequent runs? ",
            "answer:-": "   different algorithms ",
            "context:-": "   The cuDNN library, used by CUDA convolution operations, can be a source of nondeterminism",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is the name of the benchmarking feature that cuDNN disables? ",
            "answer:-": "   withtorch.backends.cudnn.benchmark=Falsecauses ",
            "context:-": "   If you are using any other libraries that use random number generators, refer to",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  If you do not need reproducibility across multiple executions of your application, what might improve if the benchmarking feature is enabled? ",
            "answer:-": "   performance ",
            "context:-": "   The cuDNN library, used by CUDA convolution operations, can be a source of nondeterminism",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What setting is different from the benchmarking feature discussed below? ",
            "answer:-": "   thetorch.backends.cudnn.deterministicsetting ",
            "context:-": "   Disabling the benchmarking feature withtorch.backends.cudnn.benchmark=Falsecauses cuDNN to deterministically select an algorithm, possibly at the cost of reduced",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What lets you configure PyTorch to use deterministic algorithms instead of nondeterministic ones? ",
            "answer:-": "   torch.use_deterministic_algorithms() ",
            "context:-": "   However, if you do not need reproducibility across multiple executions of your application,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  If you do not need reproducibility across multiple executions of your application, performance might improve if what feature is enabled? ",
            "answer:-": "   benchmarking ",
            "context:-": "   However, if you do not need reproducibility across multiple executions of your application,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What documentation does PyTorch use for a full list of affected operations? ",
            "answer:-": "   fortorch.use_deterministic_algorithms() ",
            "context:-": "   torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What type of implementation does PyTorch not have? ",
            "answer:-": "   determinism ",
            "context:-": "   However, if you do not need reproducibility across multiple executions of your application,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What does torch.use_deterministic_algorithms() let you configure PyTorch to use instead of nondeterministic ones? ",
            "answer:-": "   deterministic algorithms ",
            "context:-": "   Note that this setting is different from thetorch.backends.cudnn.deterministicsetting discussed below. torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What implementation of oftorch.Tensor.index_add_() will throw an error? ",
            "answer:-": "   CUDA implementation ",
            "context:-": "   Note that this setting is different from thetorch.backends.cudnn.deterministicsetting discussed below. torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What type of algorithms does torch.use_algorithms() let you configure PyTorch to use instead of nondeterministic ones? ",
            "answer:-": "   deterministic ",
            "context:-": "   torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  If an operation does not act correctly according to the documentation, or if you need a what implementation of an operation that does not have one, please ",
            "answer:-": "   deterministic ",
            "context:-": "   torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is the current version of CUDA? ",
            "answer:-": "   10.2 or greater ",
            "context:-": "   Please check the documentation fortorch.use_deterministic_algorithms()for a full list of affected operations. If an operation does not act correctly",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  How will other PyTorch operations behave? ",
            "answer:-": "   deterministically ",
            "context:-": "   Whentorch.bmm()is called with sparse-dense CUDA tensors it typically uses a",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is the argument for indices_or_sections? ",
            "answer:-": "   intorch.tensor_split() ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What are listed under Random sampling? ",
            "answer:-": "   Random sampling creation ops ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What does it do to a tensor? ",
            "answer:-": "   Splits a tensor into a specific number of chunks ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What format is the asparse tensor in? ",
            "answer:-": "   COO(rdinate) format ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What do you convert the data into? ",
            "answer:-": "   atorch.Tensor ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are the parameters for a view of an existingtorch.Tensorinput? ",
            "answer:-": "   specifiedsize,strideandstorage_offset ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where is aTensor created from? ",
            "answer:-": "   anumpy.ndarray ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor does anumpy.ndarray return? ",
            "answer:-": "   a tensor filled with the scalar value0 ",
            "context:-": "   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the return value of a tensor filled with the scalar value0? ",
            "answer:-": "   a tensor filled with the scalar value0, with the same size asinput ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the shape of the scalar value1? ",
            "answer:-": "   the shape defined by the variable argumentsize ",
            "context:-": "   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the size of the scalar value in the tensor? ",
            "answer:-": "   the same size asinput ",
            "context:-": "   Random sampling creation ops are listed underRandom samplingand",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the view of an existingtorch.Tensorinput have? ",
            "answer:-": "   specifiedsize,strideandstorage_offset ",
            "context:-": "   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the tensor created from? ",
            "answer:-": "   anumpy.ndarray ",
            "context:-": "   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a tensor filled with the scalar value1? ",
            "answer:-": "   a tensor filled with the scalar value1, with the same size asinput ",
            "context:-": "   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the tensor of sizeendstartstepleftlceil fractextend? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the tensor of sizeendstartstep? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is created when the values are evenly spaced fromstarttoend? ",
            "answer:-": "   one-dimensional ",
            "context:-": "   Create a view of an existingtorch.Tensorinputwith specifiedsize,strideandstorage_offset.   Creates aTensorfrom anumpy.ndarray.   Returns a tensor filled with the scalar value0, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value0, with the same size asinput.   Returns a tensor filled with the scalar value1, with the shape defined by the variable argumentsize.   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with what? ",
            "answer:-": "   uninitialized data ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What size is the tensor of sizeendstartstep? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is created when values are evenly spaced fromstarttoend? ",
            "answer:-": "   one-dimensional ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the logarithmic scale of the tensor? ",
            "answer:-": "   basebase ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the tensor with ones on the diagonal and zeros elsewhere? ",
            "answer:-": "   2-D tensor ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the tensor filled with? ",
            "answer:-": "   uninitialized data ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when a tensor is filled with uninitialized data? ",
            "answer:-": "   an uninitialized tensor with the same size asinput ",
            "context:-": "   Returns a tensor filled with the scalar value1, with the same size asinput.   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the tensor of sizeendstartstep+1leftlfloor fractextend? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor returns ones on the diagonal and zeros elsewhere? ",
            "answer:-": "   2-D tensor ",
            "context:-": "   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns an uninitialized tensor with the same size as input? ",
            "answer:-": "   an uninitialized tensor with the same size asinput ",
            "context:-": "   Returns a 1-D tensor of size⌈end−startstep⌉\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil⌈stepend−start​⌉with values from the interval[start,end)taken with common differencestepbeginning fromstart.   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is returned with ones on the diagonal and zeros elsewhere? ",
            "answer:-": "   2-D ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns an uninitialized tensor? ",
            "answer:-": "   an uninitialized tensor with the same size asinput ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the tensor of? ",
            "answer:-": "   sizesizefilled withfill_value ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a tensor of sizesizefilled withfill_value? ",
            "answer:-": "   a tensor with the same size asinputfilled withfill_value ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What tensor is converted to a quantized tensor with given scale and zero point? ",
            "answer:-": "   float ",
            "context:-": "   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where are the values of the one-dimensional tensor of sizesteps evenly spaced? ",
            "answer:-": "   fromstarttoend ",
            "context:-": "   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the logarithmic scale used to create a one-dimensional tensor of sizesteps? ",
            "answer:-": "   basebase ",
            "context:-": "   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a tensor filled with uninitialized data? ",
            "answer:-": "   an uninitialized tensor with the same size asinput ",
            "context:-": "   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a tensor filled with? ",
            "answer:-": "   uninitialized data ",
            "context:-": "   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced fromstarttoend, inclusive.   Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a float tensor convert to? ",
            "answer:-": "   per-channel quantized tensor with given scales and zero points ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned by dequantizing a quantized Tensor? ",
            "answer:-": "   fp32 Tensor ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is created? ",
            "answer:-": "   one-dimensional ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is converted to a quantized tensor with given scale and zero point? ",
            "answer:-": "   float ",
            "context:-": "    Creates a one-dimensional tensor of sizestepswhose values are evenly spaced frombasestart{{\\text{{base}}}}^{{\\text{{start}}}}basestarttobaseend{{\\text{{base}}}}^{{\\text{{end}}}}baseend, inclusive, on a logarithmic scale with basebase.   Returns a 2-D tensor with ones on the diagonal and zeros elsewhere.   Returns a tensor filled with uninitialized data.   Returns an uninitialized tensor with the same size asinput.   Returns a tensor filled with uninitialized data.   Creates a tensor of sizesizefilled withfill_value.   Returns a tensor with the same size asinputfilled withfill_value.   Converts a float tensor to a quantized tensor with given scale and zero point.   Converts a float tensor to a per-channel quantized tensor with given scales and zero points.   Returns an fp32 Tensor by dequantizing a quantized Tensor   Constructs a complex tensor with its real part equal torealand its imaginary part equal toimag.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do to a given sequence ofseqtensors in a given dimension? ",
            "answer:-": "   Concatenates the given sequence ofseqtensors in the given dimension ",
            "context:-": "   Concatenates the given sequence ofseqtensors in the given dimension.   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What splits a tensor into multiple tensors depthwise according toindices_or_sections? ",
            "answer:-": "   Splitsinput ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How is a new tensor created? ",
            "answer:-": "   horizontally stacking the tensors intensors ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Stack tensors in sequence depthwise (along what axis)? ",
            "answer:-": "   third axis ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does this do? ",
            "answer:-": "   Eliminates all but the first element from every consecutive group of equivalent elements ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_section ",
            "answer:-": "   Splitsinput ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How do you stack tensors? ",
            "answer:-": "   Stack tensors in sequence horizontally ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the index of a new tensor that indexes theinputtensor along dimensiondimusing the entries inindex ",
            "answer:-": "   aLongTensor ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor indexes theinputtensor according to the boolean maskmask? ",
            "answer:-": "   1-D ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.movedim() do? ",
            "answer:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a new tensor that is a narrowed version ofinputtensor? ",
            "answer:-": "   Alias fortorch.movedim() ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the new tensor that returns a new tensor that is a narrowed version ofinputtensor ",
            "answer:-": "   narrowed version ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How does one create a new tensor? ",
            "answer:-": "   horizontally stacking ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do when a tensor is split into chunks? ",
            "answer:-": "   Gathers values along an axis specified bydim ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a splitsinput? ",
            "answer:-": "   a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections ",
            "context:-": "   Splits a tensor into a specific number of chunks.   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.       ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a tensor with three or more dimensions called? ",
            "answer:-": "   Splitsinput ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How does Alias oftorch create a new tensor? ",
            "answer:-": "   horizontally stacking ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().    ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What happens to the dimension(s) ofinput? ",
            "answer:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination ",
            "context:-": "   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What function returns a new tensor that is a narrowed version ofinputtensor? ",
            "answer:-": "   Alias fortorch.movedim() ",
            "context:-": "   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is returned by Alias fortorch.movedim()? ",
            "answer:-": "   narrowed version ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors depthwise according toindices_or_sections.   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return a tensor with the same data and number of elements asinput, but with? ",
            "answer:-": "   the specified shape ",
            "context:-": "   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a tensor with the same data and number of elements asinput but with the specified shape ",
            "answer:-": "   Alias oftorch.vstack() ",
            "context:-": "   Creates a new tensor by horizontally stacking the tensors intensors.   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a tensor with one or more dimensions called? ",
            "answer:-": "   Splitsinput ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is the new tensor? ",
            "answer:-": "   narrowed ",
            "context:-": "   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the Out-of-place version oftorch.Tensor.scatter_()? ",
            "answer:-": "   Out-of-place version oftorch.Tensor.scatter_() ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where do tensors stack depthwise? ",
            "answer:-": "   third axis ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Stack tensors do? ",
            "answer:-": "   Gathers values along an axis specified bydim ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_section ",
            "answer:-": "   Splitsinput ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Stack tensors in sequence which way? ",
            "answer:-": "   horizontally ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the index of a new tensor that indexes theinputtensor along dimension? ",
            "answer:-": "   aLongTensor ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that splits a tensor into chunks? ",
            "answer:-": "   Alias oftorch.vstack() ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Splits the tensor into what? ",
            "answer:-": "   chunks ",
            "context:-": "   Stack tensors in sequence depthwise (along third axis).   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the function that gathers values along an axis specified bydim? ",
            "answer:-": "   Gathers values along an axis specified bydim ",
            "context:-": "   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a tensor with one or more dimensions do? ",
            "answer:-": "   Splitsinput ",
            "context:-": "   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of a tensor that splits a tensor into chunks? ",
            "answer:-": "   Stack ",
            "context:-": "   Gathers values along an axis specified bydim.   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the index of the new tensor that indexes theinputtensor along dimensiondimusing the entries inindex? ",
            "answer:-": "   aLongTensor ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with all the dimensions ofinputof what? ",
            "answer:-": "   size1removed ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is another name for tensors in sequence horizontally? ",
            "answer:-": "   Stack ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does aBoolTensor do? ",
            "answer:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination ",
            "context:-": "   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the Alias fortorch.transpose() do? ",
            "answer:-": "   Concatenates a sequence of tensors along a new dimension ",
            "context:-": "   Splitsinput, a tensor with one or more dimensions, into multiple tensors horizontally according toindices_or_sections.   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that converts a sequence of tensors along a new dimension? ",
            "answer:-": "   Alias fortorch.transpose() ",
            "context:-": "   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How do you stack tensors in sequence? ",
            "answer:-": "   horizontally ",
            "context:-": "   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the index of the new tensor? ",
            "answer:-": "   aLongTensor ",
            "context:-": "   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor does aBoolTensor return? ",
            "answer:-": "   1-D ",
            "context:-": "   Stack tensors in sequence horizontally (column wise).   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.transpose() do? ",
            "answer:-": "   Alias fortorch.transpose() ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What dimensions does Alias fortorch.transpose() transpose? ",
            "answer:-": "   0 and 1 ",
            "context:-": "   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor which indexes theinputtensor according to the boolean maskmask which is ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with the same data and number of elements asinput, but with what? ",
            "answer:-": "   the specified shape ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the function that returns a sequence of tensors along a new dimension? ",
            "answer:-": "   Concatenates a sequence of tensors along a new dimension ",
            "context:-": "   Returns a new tensor which indexes theinputtensor along dimensiondimusing the entries inindexwhich is aLongTensor.   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what? ",
            "answer:-": "   elements ofinputat the given indices ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor that indexes theinputtensor according to what boolean maskmask? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the aBoolTensor do? ",
            "answer:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor that is a narrowed version ofinputtensor? ",
            "answer:-": "   Alias fortorch.movedim() ",
            "context:-": "   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What dimensions does the Alias fortorch.transpose() transpose? ",
            "answer:-": "   0 and 1 ",
            "context:-": "   Returns a new 1-D tensor which indexes theinputtensor according to the boolean maskmaskwhich is aBoolTensor.   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return a new tensor with the elements ofinputat the given indices? ",
            "answer:-": "   a new tensor with the elements ofinputat the given indices ",
            "context:-": "   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of indices are selected? ",
            "answer:-": "   1-dimensional indices ",
            "context:-": "   Moves the dimension(s) ofinputat the position(s) insourceto the position(s) indestination.   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of indices are used to select values from? ",
            "answer:-": "   1-dimensional indices ",
            "context:-": "   Alias fortorch.movedim().   Returns a new tensor that is a narrowed version ofinputtensor.      Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are all of the sub-tensors of a tensor? ",
            "answer:-": "   views ofinput ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How is a tensor constructed? ",
            "answer:-": "   repeating the elements ofinput ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that converts a tensor into a new dimension? ",
            "answer:-": "   Alias fortorch.transpose() ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are the dimensions of the tensor? ",
            "answer:-": "   0 and 1 ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return a tensor with the elements ofinputat the given indices? ",
            "answer:-": "   a new tensor with the elements ofinputat the given indices ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor that is what version of input? ",
            "answer:-": "   transposed ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens when a tensor dimension is removed? ",
            "answer:-": "   Removes a tensor dimension ",
            "context:-": "        Returns a tensor with the same data and number of elements asinput, but with the specified shape.   Alias oftorch.vstack().   Out-of-place version oftorch.Tensor.scatter_()   Out-of-place version oftorch.Tensor.scatter_add_()   Splits the tensor into chunks.   Returns a tensor with all the dimensions ofinputof size1removed.   Concatenates a sequence of tensors along a new dimension.   Alias fortorch.transpose().   Alias fortorch.transpose().   Expectsinputto be <= 2-D tensor and transposes dimensions 0 and 1.   Returns a new tensor with the elements ofinputat the given indices.   Selects values frominputat the 1-dimensional indices fromindicesalong the givendim.   Splits a tensor into multiple sub-tensors, all of which are views ofinput, along dimensiondimaccording to the indices or number of sections specified byindices_or_sections.   Constructs a tensor by repeating the elements ofinput.   Returns a tensor that is a transposed version ofinput.   Removes a tensor dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the generator object produce? ",
            "answer:-": "   pseudo random numbers ",
            "context:-": "     Creates and returns a generator object that manages the state of the algorithm which produces pseudo random numbers.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the initial seed for generating random numbers? ",
            "answer:-": "   Pythonlong ",
            "context:-": "   Returns the initial seed for generating random numbers as a Pythonlong.   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the random number generator state? ",
            "answer:-": "   atorch.ByteTensor ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does atorch.ByteTensor do? ",
            "answer:-": "   Sets the random number generator state ",
            "context:-": "   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What does this function do? ",
            "answer:-": "   Draws binary random numbers (0 or 1) from a Bernoulli distribution ",
            "context:-": "   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row ",
            "answer:-": "   tensor ",
            "context:-": "   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned whose mean and standard deviation are given? ",
            "answer:-": "   a tensor of random numbers drawn from separate normal distributions ",
            "context:-": "   Returns the initial seed for generating random numbers as a Pythonlong.   Returns the random number generator state as atorch.ByteTensor.   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What distribution is each element sampled from? ",
            "answer:-": "   Poisson distribution ",
            "context:-": "   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are given to the tensor of random numbers drawn from separate normal distributions? ",
            "answer:-": "   mean and standard deviation ",
            "context:-": "   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor filled with random integers generated how? ",
            "answer:-": "   uniformly ",
            "context:-": "   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do? ",
            "answer:-": "   Sets the random number generator state ",
            "context:-": "   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the random number generator do? ",
            "answer:-": "   Draws binary random numbers (0 or 1) from a Bernoulli distribution ",
            "context:-": "   Sets the random number generator state.   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the function that returns a tensor where each row containsnum_samplesindices sampled from the multinomi ",
            "answer:-": "   Draws binary random numbers (0 or 1) from a Bernoulli distribution ",
            "context:-": "   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does each row containnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of  ",
            "answer:-": "   tensor ",
            "context:-": "   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is generated uniformly betweenlow(inclusive) andhigh(exclusive)? ",
            "answer:-": "   tensor filled with random integers ",
            "context:-": "   Draws binary random numbers (0 or 1) from a Bernoulli distribution.   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are given to the random numbers drawn from separate normal distributions? ",
            "answer:-": "   mean and standard deviation ",
            "context:-": "   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a tensor with the same size asinput? ",
            "answer:-": "   a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive) ",
            "context:-": "   Returns a tensor where each row containsnum_samplesindices sampled from the multinomial probability distribution located in the corresponding row of tensorinput.   Returns a tensor of random numbers drawn from separate normal distributions whose mean and standard deviation are given.   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor is returned? ",
            "answer:-": "   tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive) ",
            "context:-": "   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What shape does a tensor have? ",
            "answer:-": "   same shape ",
            "context:-": "   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the standard normal distribution? ",
            "answer:-": "   mean0and variance1 ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when a tensor is filled with random integers? ",
            "answer:-": "   a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive) ",
            "context:-": "   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when a tensor is filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive)? ",
            "answer:-": "   tensor with the same shape ",
            "context:-": "   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with what? ",
            "answer:-": "   mean 0 and variance 1. ",
            "context:-": "   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a tensor with the same size asinput? ",
            "answer:-": "   random permutation of integers from0ton-1 ",
            "context:-": "   Returns a tensor of the same size asinputwith each element sampled from a Poisson distribution with rate parameter given by the corresponding element ininputi.e.,   Returns a tensor filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1)   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of distribution is a tensor filled with random numbers from? ",
            "answer:-": "   uniform distribution ",
            "context:-": "   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the normal distribution of a tensor with the same size as input? ",
            "answer:-": "   mean 0 and variance 1. ",
            "context:-": "   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when a tensor is filled with random numbers from a normal distribution? ",
            "answer:-": "   random permutation of integers from0ton-1 ",
            "context:-": "   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are a few more in-place random sampling functions defined on? ",
            "answer:-": "   Tensors ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the in-place version of torch.bernoulli()? ",
            "answer:-": "   torch.Tensor.bernoulli_() ",
            "context:-": "   Returns a tensor with the same size asinputthat is filled with random numbers from a uniform distribution on the interval[0,1)[0, 1)[0,1).   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive)? ",
            "answer:-": "   tensor ",
            "context:-": "   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with the same size as inputthat is filled with random numbers from a normal distribution with what? ",
            "answer:-": "   mean 0 and variance 1. ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when a tensor is filled with random numbers from a normal distribution with mean 0 and variance 1? ",
            "answer:-": "   random permutation of integers from0ton-1 ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are some in-place random sampling functions defined on? ",
            "answer:-": "   Tensors ",
            "context:-": "   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of element is drawn from the geometric distribution? ",
            "answer:-": "   geometric ",
            "context:-": "   Returns a tensor filled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  How are the random integers generated? ",
            "answer:-": "   uniformly betweenlow(inclusive) andhigh(exclusive) ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that returns a tensor with the same size as input? ",
            "answer:-": "   in-place version oftorch.normal() ",
            "context:-": "   Returns a tensor with the same shape as Tensorinputfilled with random integers generated uniformly betweenlow(inclusive) andhigh(exclusive).   Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a tensor with the same size as input that is filled with random numbers from a normal distribution with what? ",
            "answer:-": "   mean 0 and variance 1. ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned by a tensor with the same size as input? ",
            "answer:-": "   random permutation of integers from0ton-1 ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where are a few more in-place random sampling functions defined? ",
            "answer:-": "   Tensors ",
            "context:-": "   There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of distribution are random numbers sampled from? ",
            "answer:-": "   discrete uniform distribution ",
            "context:-": "     Returns a tensor filled with random numbers from a normal distribution with mean0and variance1(also called the standard normal distribution).   Returns a tensor with the same size asinputthat is filled with random numbers from a normal distribution with mean 0 and variance 1.   Returns a random permutation of integers from0ton-1. There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of distribution are the numbers sampled from? ",
            "answer:-": "   continuous uniform distribution ",
            "context:-": "   There are a few more in-place random sampling functions defined on Tensors as well. Click through to refer to their documentation",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the engine that generates Sobol sequences? ",
            "answer:-": "   SobolEngine Thetorch.quasirandom ",
            "context:-": "   quasirandom.SobolEngine Thetorch.quasirandom.SobolEngineis an engine for generating (scrambled) Sobol sequences.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does withtorch.save() save to a disk file? ",
            "answer:-": "   an object ",
            "context:-": "     Saves an object to a disk file.   Loads an object saved withtorch.save()from a file.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What method saves an object from a file? ",
            "answer:-": "   withtorch.save() ",
            "context:-": "     Saves an object to a disk file.   Loads an object saved withtorch.save()from a file.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Return? ",
            "answer:-": "   the maximum value of each slice of theinputtensor in the given dimension(s)dim ",
            "context:-": "   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does this return? ",
            "answer:-": "   the number of threads used for inter-op parallelism on CPU ",
            "context:-": "     Returns the number of threads used for parallelizing CPU operations   Sets the number of threads used for intraop parallelism on CPU.   Returns the number of threads used for inter-op parallelism on CPU (e.g.   Sets the number of threads used for interop parallelism (e.g.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Sets the number of threads used for inter-op parallelism on CPU? ",
            "answer:-": "   the number of threads used for interop parallelism ",
            "context:-": "     Returns the number of threads used for parallelizing CPU operations   Sets the number of threads used for intraop parallelism on CPU.   Returns the number of threads used for inter-op parallelism on CPU (e.g.   Sets the number of threads used for interop parallelism (e.g.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.abs() compute of each element ininput? ",
            "answer:-": "   absolute value ",
            "context:-": "   Computes the absolute value of each element ininput.   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.abs() compute? ",
            "answer:-": "   inverse cosine ",
            "context:-": "   Computes the absolute value of each element ininput.   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What computes the inverse cosine of each element ininput? ",
            "answer:-": "   Alias fortorch.acos() ",
            "context:-": "   Computes the absolute value of each element ininput.   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acos() return a new tensor with? ",
            "answer:-": "   inverse hyperbolic cosine ",
            "context:-": "   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the inverse hyperbolic cosine of the elements ofinput? ",
            "answer:-": "   Alias fortorch.acosh() ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acosh() do? ",
            "answer:-": "   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor ",
            "context:-": "   Computes the absolute value of each element ininput.   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acosh() multiply the result by? ",
            "answer:-": "   scalarvalue ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the result of the element-wise multiplication oftensor1bytensor2 multiplied by? ",
            "answer:-": "   scalarvalue ",
            "context:-": "   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the value of the element-wise angle of the given inputtensor? ",
            "answer:-": "   radians ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the tensor that returns a new tensor with the elements of input? ",
            "answer:-": "   arcsine ",
            "context:-": "   Computes the absolute value of each element ininput.   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the inverse hyperbolic sine of the elements ofinput? ",
            "answer:-": "   Alias fortorch.asinh() ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.asin() return? ",
            "answer:-": "   inverse hyperbolic sine ",
            "context:-": "   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the arctangent of the elements ofinput? ",
            "answer:-": "   Alias fortorch.asinh() ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.asinh() return a new tensor with? ",
            "answer:-": "   arctangent ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What Computes the inverse cosine of each element ininput? ",
            "answer:-": "   Alias fortorch.abs() ",
            "context:-": "   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the inverse hyperbolic cosine of the elements of input? ",
            "answer:-": "   Alias fortorch.acos() ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acosh() add to each element of the inputinput? ",
            "answer:-": "   scalarotherto ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the element-wise multiplication oftensor1bytensor2 multiply the result by? ",
            "answer:-": "   scalarvalue ",
            "context:-": "   Alias fortorch.abs()   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what of the elements of input? ",
            "answer:-": "   inverse hyperbolic sine ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the inverse hyperbolic tangent of the elements ofinput? ",
            "answer:-": "   Alias fortorch.atanh() ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.atan() return a new tensor with? ",
            "answer:-": "   inverse hyperbolic tangent ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acos() compute of each element ininput? ",
            "answer:-": "   inverse cosine ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acos() return? ",
            "answer:-": "   inverse hyperbolic cosine ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acosh do? ",
            "answer:-": "   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor ",
            "context:-": "   Computes the inverse cosine of each element ininput.   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.acos() multiply the result by? ",
            "answer:-": "   scalarvalue ",
            "context:-": "   Alias fortorch.acos().   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.atan() return? ",
            "answer:-": "   inverse hyperbolic tangent ",
            "context:-": "   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the inverse hyperbolic sine of the elements of input? ",
            "answer:-": "   arctangent ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the inverse hyperbolic sine of the elements of input? ",
            "answer:-": "   Alias fortorch.asin() ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.asinh() return? ",
            "answer:-": "   arctangent ",
            "context:-": "   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor does Alias fortorch.acosh() return? ",
            "answer:-": "   inverse hyperbolic cosine ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What performs oftensor1bytensor2? ",
            "answer:-": "   the element-wise division ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the inverse hyperbolic cosine of the elements of input? ",
            "answer:-": "   arcsine ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic cosine of the elements ofinput.   Alias fortorch.acosh().   Adds the scalarotherto each element of the inputinputand returns a new resulting tensor.   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does oftensor1bytensor2 perform? ",
            "answer:-": "   element-wise division ",
            "context:-": "   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the element-wise angle of the given inputtensor in what units? ",
            "answer:-": "   radians ",
            "context:-": "   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns a new tensor with the arcsine of the elements ofinput? ",
            "answer:-": "   Alias fortorch.asin() ",
            "context:-": "   Performs the element-wise division oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the inverse hyperbolic tangent of the elements of input? ",
            "answer:-": "   arctangent ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes what of the given input tensor? ",
            "answer:-": "   bitwise NOT ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.atan() do? ",
            "answer:-": "   Computes the bitwise AND ofinputandother ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.atan() compute? ",
            "answer:-": "   bitwise OR ofinputandother ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the bitwise of the given input tensor? ",
            "answer:-": "   XOR ofinputandother ",
            "context:-": "   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does oftensor1bytensor2 multiply the result by? ",
            "answer:-": "   scalarvalue ",
            "context:-": "   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  In what unit is the element-wise angle of the given inputtensor? ",
            "answer:-": "   radians ",
            "context:-": "   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do to the bitwise NOT of the given input tensor? ",
            "answer:-": "   Computes the bitwise AND ofinputandother ",
            "context:-": "   Performs the element-wise multiplication oftensor1bytensor2, multiply the result by the scalarvalueand add it toinput.   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the inverse of the elements of input? ",
            "answer:-": "   hyperbolic sine ",
            "context:-": "   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the element-wise angle of inputi/otheri? ",
            "answer:-": "   arctangent ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor does Alias fortorch.clamp() compute? ",
            "answer:-": "   bitwise NOT ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.clamp() compute? ",
            "answer:-": "   the element-wise conjugate of the giveninputtensor ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the bitwise of inputandother? ",
            "answer:-": "   XOR ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the smallest integer greater than or equal to each element? ",
            "answer:-": "   the ceil of the elements ofinput ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.clamp() do? ",
            "answer:-": "   Clamps all elements ininputinto the range ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that clamps all elements ininputinto the range[min,max]? ",
            "answer:-": "   Alias fortorch.clamp() ",
            "context:-": "   Computes the element-wise angle (in radians) of the giveninputtensor.   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what element of the elements of input? ",
            "answer:-": "   cosine ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tangent does Alias fortorch.atan() return? ",
            "answer:-": "   hyperbolic ",
            "context:-": "   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the element-wise ofinputi/otheritextinput_i / textother ",
            "answer:-": "   arctangent ",
            "context:-": "   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.asin() do? ",
            "answer:-": "   Computes the bitwise AND ofinputandother ",
            "context:-": "   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.asin() compute? ",
            "answer:-": "   bitwise OR ofinputandother ",
            "context:-": "   Returns a new tensor with the arcsine  of the elements ofinput.   Alias fortorch.asin().   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the bitwise ofinputandother? ",
            "answer:-": "   XOR ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What computes the element-wise conjugate of the giveninputtensor? ",
            "answer:-": "   Alias fortorch.clamp() ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the element-wise ofinputi/otheri? ",
            "answer:-": "   arctangent ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Create a new floating-point tensor with what? ",
            "answer:-": "   the magnitude ofinput ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the Alias fortorch.atan() return? ",
            "answer:-": "   inverse hyperbolic tangent ",
            "context:-": "   Returns a new tensor with the inverse hyperbolic sine of the elements ofinput.   Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tangent does the new tensor have? ",
            "answer:-": "   hyperbolic ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.atanh() do? ",
            "answer:-": "   Computes the bitwise AND ofinputandother ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.asinh() compute? ",
            "answer:-": "   bitwise OR ofinputandother ",
            "context:-": "     Alias fortorch.asinh().   Returns a new tensor with the arctangent  of the elements ofinput.   Alias fortorch.atan().   Returns a new tensor with the inverse hyperbolic tangent of the elements ofinput.   Alias fortorch.atanh().   Element-wise arctangent ofinputi/otheri\\text{input}_{i} / \\text{other}_{i}inputi​/otheri​with consideration of the quadrant.   Computes the bitwise NOT of the given input tensor.   Computes the bitwise AND ofinputandother.   Computes the bitwise OR ofinputandother.   Computes the bitwise XOR ofinputandother.   Returns a new tensor with the ceil of the elements ofinput, the smallest integer greater than or equal to each element.   Clamps all elements ininputinto the range[min,max].   Alias fortorch.clamp().   Computes the element-wise conjugate of the giveninputtensor.   Create a new floating-point tensor with the magnitude ofinputand the sign ofother, elementwise.   Returns a new tensor with the cosine  of the elements ofinput.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return? ",
            "answer:-": "   the minimum value of each slice of theinputtensor in the given dimension(s)dim ",
            "context:-": "   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the indices of the minimum value of what? ",
            "answer:-": "   the flattened tensor or along a dimension ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor.   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when the input tensor is tested toTrue? ",
            "answer:-": "   the minimum value of each slice of theinputtensor in the given dimension(s)dim ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor.   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What happens if all elements ininputevaluate toTrue? ",
            "answer:-": "   Tests ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Which element returns the maximum value of all elements in theinputtensor? ",
            "answer:-": "   input tensor ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the input tensor return? ",
            "answer:-": "   the minimum value of all elements in theinputtensor ",
            "context:-": "   the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return the maximum value of all elements in theinputtensor? ",
            "answer:-": "   the minimum value of all elements in theinputtensor ",
            "context:-": "   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim. Returns what? ",
            "answer:-": "   p-norm ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the log of summed exponentials of each row of theinputtensor return? ",
            "answer:-": "   the mean value of all elements in theinputtensor ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor.   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return the mean value of all elements in theinputtensor? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Returns the indices of the maximum value of all elements in theinputtensor.   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned, ignoringNaNvalues? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the mode value of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   a namedtuple(values,indices) ",
            "context:-": "   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the return return return? ",
            "answer:-": "   the product of all elements in theinputtensor ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when the log of summed exponentials of each row of theinputtensor is returned? ",
            "answer:-": "   the mean value of all elements in theinputtensor ",
            "context:-": "   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does return ignoringNaNvalues? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the mode value of each row of the inputtensor in the given dimensiondim? ",
            "answer:-": "   a namedtuple ",
            "context:-": "   Returns the indices of the minimum value(s) of the flattened tensor or along a dimension   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the mode value of a given tensor? ",
            "answer:-": "   matrix norm or vector norm ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the mode value of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   matrix norm or vector norm ",
            "context:-": "   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the sum of all elements, treating Not a Numbers (NaNs) as what? ",
            "answer:-": "   zero ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of all elements in the inputtensor? ",
            "answer:-": "   product ",
            "context:-": "   Returns the maximum value of each slice of theinputtensor in the given dimension(s)dim.   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value of all elements in the inputtensor? ",
            "answer:-": "   mean value ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when the log of summed exponentials of each row of theinputtensor in the given dimensiondim is returned? ",
            "answer:-": "   the mean value of all elements in theinputtensor ",
            "context:-": "   Returns the minimum value of each slice of theinputtensor in the given dimension(s)dim.   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when the sum of all elements is returned? ",
            "answer:-": "   the product of all elements in theinputtensor ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What quantiles of each row of theinputtensor along the dimensiondim is computed? ",
            "answer:-": "   q-th ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value? ",
            "answer:-": "   the minimum value of all elements in theinputtensor ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when calculating the p-norm of (input-other)? ",
            "answer:-": "   the mean value of all elements in theinputtensor ",
            "context:-": "   Tests if all elements ininputevaluate toTrue.    the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the maximum value of all elements in theinputtensor? ",
            "answer:-": "   input tensor ",
            "context:-": "   the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the log of summed exponentials of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   p-norm ",
            "context:-": "   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the p-norm of (input-other) return? ",
            "answer:-": "   the mean value of all elements in theinputtensor ",
            "context:-": "   the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when the input tensor is not used? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does this return, ignoringNaNvalues? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   the input tensor.   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of norm does a given tensor return? ",
            "answer:-": "   matrix norm or vector norm ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What do Not a Numbers (NaNs) are treated as? ",
            "answer:-": "   zero ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when calculating the q-th quantiles of each row of theinputtensor along the dimensiondim? ",
            "answer:-": "   the product of all elements in theinputtensor ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are the quantiles of each row of the inputtensor along the dimensiondim? ",
            "answer:-": "   q-th ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the variant of oftorch.quantile() do? ",
            "answer:-": "   ignores ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the return return? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what value of all elements in theinputtensor? ",
            "answer:-": "   minimum value ",
            "context:-": "   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the value of all elements in theinputtensor? ",
            "answer:-": "   mean value ",
            "context:-": "   Returns the maximum value of all elements in theinputtensor.   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the value of the values ininput? ",
            "answer:-": "   median ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the function ignoreNaNvalues? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are Not a Numbers (NaNs) treated as? ",
            "answer:-": "   zero ",
            "context:-": "   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What are the quantiles of each row of theinputtensor along the dimensiondim? ",
            "answer:-": "   q-th ",
            "context:-": "   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Whose correction will be used if unbiasedisTrue? ",
            "answer:-": "   Bessel ",
            "context:-": "   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the minimum value of all elements in theinputtensor? ",
            "answer:-": "   p-norm ",
            "context:-": "   Returns the minimum value of all elements in theinputtensor.   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a variant of oftorch.quantile()? ",
            "answer:-": "   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim ",
            "context:-": "   Returns the p-norm of (input-other)   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Whose correction will be used to calculate the standard deviation if unbiasedisTrue? ",
            "answer:-": "   Bessel ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What will be used to calculate the standard deviation? ",
            "answer:-": "   Bessel’s correction ",
            "context:-": "   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does each row of the inputtensor in the given dimensiondim return? ",
            "answer:-": "   the log of summed exponentials ",
            "context:-": "   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the mode value of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   a namedtuple ",
            "context:-": "   Returns the log of summed exponentials of each row of theinputtensor in the given dimensiondim.   Returns the mean value of all elements in theinputtensor.   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the function return? ",
            "answer:-": "   the sum of all elements in theinputtensor ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the mode value of each row of the inputtensor in the given dimensiondim? ",
            "answer:-": "   a namedtuple ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of the input tensor? ",
            "answer:-": "   unique elements ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of the values ininput? ",
            "answer:-": "   median ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does not returnNaNvalues? ",
            "answer:-": "   the median of the values ininput ",
            "context:-": "   Returns the median of the values ininput.   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What will be used to calculate the standard deviation if unbiasedisTrue? ",
            "answer:-": "   Bessel’s correction ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  When will Bessel's correction be used? ",
            "answer:-": "   IfunbiasedisTrue ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Bessel's correction return? ",
            "answer:-": "   the sum of all elements in theinputtensor ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Bessel's correction do? ",
            "answer:-": "   Eliminates all but the first element from every consecutive group of equivalent elements ",
            "context:-": "   Returns the median of the values ininput, ignoringNaNvalues.   Returns a namedtuple(values,indices)wherevaluesis the mode value of each row of theinputtensor in the given dimensiondim, i.e.   Returns the matrix norm or vector norm of a given tensor.   Returns the sum of all elements, treating Not a Numbers (NaNs) as zero.   Returns the product of all elements in theinputtensor.   Computes the q-th quantiles of each row of theinputtensor along the dimensiondim.   This is a variant oftorch.quantile()that “ignores”NaNvalues, computing the quantilesqas ifNaNvalues ininputdid not exist.   IfunbiasedisTrue, Bessel’s correction will be used.   IfunbiasedisTrue, Bessel’s correction will be used to calculate the standard deviation.   Returns the sum of all elements in theinputtensor.   Returns the unique elements of the input tensor.   Eliminates all but the first element from every consecutive group of equivalent elements.   IfunbiasedisTrue, Bessel’s correction will be used.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What sort a tensor along a given dimension in ascending order by value? ",
            "answer:-": "   indices ",
            "context:-": "   This function checks if allinputandothersatisfy the condition",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  If two tensors have the same size and elements, what is element-wise equality? ",
            "answer:-": "   Trueif two tensors have the same size and elements ",
            "context:-": "   Returns the indices that sort a tensor along a given dimension in ascending order by value.   Computes element-wise equality   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What function checks if allinputandothersatisfy the condition? ",
            "answer:-": "   Alias fortorch.gt() ",
            "context:-": "   This function checks if allinputandothersatisfy the condition",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.ge() do? ",
            "answer:-": "   Computesinput ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What element represents if each element ofinputis “close” to the corresponding element ofother? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what representation if each element isfiniteor not? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What condition does this function check if each element ofinputis? ",
            "answer:-": "   infinite ",
            "context:-": "   This function checks if allinputandothersatisfy the condition",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Tests if each element ofinputis what or not? ",
            "answer:-": "   positive infinity ",
            "context:-": "   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does this function do if each element ofinputis negative infinity or not? ",
            "answer:-": "   Tests ",
            "context:-": "   This function checks if allinputandothersatisfy the condition",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what representation if each element ofinputis NaN or not? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Returns the indices that sort a tensor along a given dimension in ascending order by value.   Computes element-wise equality   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the indices that sort a tensor along a given dimension in what order? ",
            "answer:-": "   ascending order by value ",
            "context:-": "   Returns the indices that sort a tensor along a given dimension in ascending order by value.   Computes element-wise equality   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that computes the indices that sort a tensor along a given dimension? ",
            "answer:-": "   Alias fortorch.ge() ",
            "context:-": "   Returns the indices that sort a tensor along a given dimension in ascending order by value.   Computes element-wise equality   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What function returns a new tensor with boolean elements if each element ofinputis “close” to the corresponding ",
            "answer:-": "   Alias fortorch.gt() ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Is each element ofinput infinite or negative infinity? ",
            "answer:-": "   infinite ",
            "context:-": "   Returns the indices that sort a tensor along a given dimension in ascending order by value.   Computes element-wise equality   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do if each element ofinputis positive infinity or not? ",
            "answer:-": "   Tests ",
            "context:-": "   Returns the indices that sort a tensor along a given dimension in ascending order by value.   Computes element-wise equality   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it do if each element ofinputis negative infinity or not? ",
            "answer:-": "   Tests ",
            "context:-": "   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns a new tensor with what representation if each element ofinputis real-valued or not? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is true if two tensors have the same size and elements? ",
            "answer:-": "   Trueif two tensors have the same size and elements ",
            "context:-": "   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that computes othertextinput geq textotherinputother ",
            "answer:-": "   Alias fortorch.ge() ",
            "context:-": "   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that computesinput>othertextinput > textotherinputother ",
            "answer:-": "   Alias fortorch.gt() ",
            "context:-": "   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the value of each element of input? ",
            "answer:-": "   infinite ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What element represents if each element ofinputis NaN or not? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does valuesis thekth smallest element of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   a namedtuple(values,indices) ",
            "context:-": "   Trueif two tensors have the same size and elements,Falseotherwise.   Computesinput≥other\\text{input} \\geq \\text{other}input≥otherelement-wise.   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What function computes input>othertextinput > textotherinput>otherelement-wise? ",
            "answer:-": "   Alias fortorch.ge() ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the new tensor return if each element isfiniteor not? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.le() test if each element ofinputis? ",
            "answer:-": "   positive infinity ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.le() do if each element ofinputis negative infinity or not? ",
            "answer:-": "   Tests ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What elements represent if each element ofinputis real-valued or not? ",
            "answer:-": "   boolean elements ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned whenvaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim? ",
            "answer:-": "   a namedtuple(values,indices) ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.le() do? ",
            "answer:-": "   Alias fortorch.le() ",
            "context:-": "   Alias fortorch.ge().   Computesinput>other\\text{input} > \\text{other}input>otherelement-wise.   Alias fortorch.gt().   Returns a new tensor with boolean elements representing if each element ofinputis “close” to the corresponding element ofother.   Returns a new tensor with boolean elements representing if each element isfiniteor not.   Tests if each element ofinputis infinite (positive or negative infinity) or not.   Tests if each element ofinputis positive infinity or not.   Tests if each element ofinputis negative infinity or not.   Returns a new tensor with boolean elements representing if each element ofinputis NaN or not.   Returns a new tensor with boolean elements representing if each element ofinputis real-valued or not.   Returns a namedtuple(values,indices)wherevaluesis thekth smallest element of each row of theinputtensor in the given dimensiondim.   Computesinput≤other\\text{input} \\leq \\text{other}input≤otherelement-wise.   Alias fortorch.le().    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is STFT? ",
            "answer:-": "   Short-time Fourier transform ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the short time Fourier Transform? ",
            "answer:-": "   Inverse ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Who created the Blackman window function? ",
            "answer:-": "   Bartlett ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the window function? ",
            "answer:-": "   Hamming ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Which window function computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta? ",
            "answer:-": "   Hann ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the Kaiser window computed with? ",
            "answer:-": "   window lengthwindow_lengthand shape parameterbeta ",
            "context:-": "     Short-time Fourier transform (STFT).   Inverse short time Fourier Transform.   Bartlett window function.   Blackman window function.   Hamming window function.   Hann window function.   Computes the Kaiser window with window lengthwindow_lengthand shape parameterbeta.  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns what of vectors in dimensiondimofinputandother? ",
            "answer:-": "   cross product ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the cumulative maximum of elements ofinputin the dimensiondim? ",
            "answer:-": "   namedtuple ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the cumulative minimum of elements ofinputin the dimensiondim? ",
            "answer:-": "   namedtuple ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the cross product of elements ofinputin the dimensiondim? ",
            "answer:-": "   cumulative product ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is returned when a namedtuple(values,indices) returns the cumulative product of elements ofinputin the dimensiondim ",
            "answer:-": "   cumulative sum of elements ofinputin the dimensiondim ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Ifinputis a vector (1-D tensor), then returns what? ",
            "answer:-": "   a 2-D square tensor ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is computed along the given dimension? ",
            "answer:-": "   n-th forward difference ",
            "context:-": "     Returns the cross product of vectors in dimensiondimofinputandother.   Returns a namedtuple(values,indices)wherevaluesis the cumulative maximum of elements ofinputin the dimensiondim.   Returns a namedtuple(values,indices)wherevaluesis the cumulative minimum of elements ofinputin the dimensiondim.   Returns the cumulative product of elements ofinputin the dimensiondim.   Returns the cumulative sum of elements ofinputin the dimensiondim.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Creates a tensor whose diagonals of certain 2D planes (specified bydim1anddim2) are filled byinput.    Ifinputis a vector (1-D tensor), then returns a 2-D square tensor   Returns a partial view ofinputwith the its diagonal elements with respect todim1anddim2appended as a dimension at the end of the shape.   Computes the n-th forward difference along the given dimension.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What reduces the number of steps required to perform a batch matrix-matrix product of matrices stored inbatch1andb ",
            "answer:-": "   add step ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is performed of the matricesmat1andmat2? ",
            "answer:-": "   matrix multiplication ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the matrixmatand the vectorvec perform? ",
            "answer:-": "   matrix-vector product ",
            "context:-": "   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it perform and adds it to the matrixinput? ",
            "answer:-": "   outer-product of vectorsvec1andvec2 ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the matrix-vector product of vectorsvec1andvec2 perform? ",
            "answer:-": "   batch matrix-matrix product of matrices inbatch1andbatch2 ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the batch matrix-matrix product of? ",
            "answer:-": "   matrices stored ininputandmat2 ",
            "context:-": "   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the matrix product of? ",
            "answer:-": "   NNN2-D tensors ",
            "context:-": "   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What decomposition is computed for batches of symmetric positive-definite matrices? ",
            "answer:-": "   Cholesky ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the inverse of a symmetric positive-definite matrix do? ",
            "answer:-": "   returns matrixinv ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Solves a linear system of equations with a positive semidefinite matrix to be inverted given what? ",
            "answer:-": "   Cholesky factor matrixuuu ",
            "context:-": "    Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it compute? ",
            "answer:-": "   dot product of two 1D tensors ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored inbatch1andbatch2, with a reduced add step (all matrix multiplications get accumulated along the first dimension).   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Performs what of the matricesmat1 andmat2? ",
            "answer:-": "   matrix multiplication ",
            "context:-": "   Performs a matrix multiplication of the matricesmat1andmat2.   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What product is added to the matrixinput? ",
            "answer:-": "   outer-product of vectorsvec1andvec2 ",
            "context:-": "   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What performs a batch matrix-matrix product of matrices inbatch1 andbatch2? ",
            "answer:-": "   batch matrix-matrix product of matrices inbatch1andbatch2 ",
            "context:-": "   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What decomposition of a symmetric positive-definite matrix is computed for batches of symmetric positive-definite matrices? ",
            "answer:-": "   Cholesky ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the function do when it computes the inverse of a symmetric positive-definite matrix? ",
            "answer:-": "   returns matrixinv ",
            "context:-": "   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does this function compute? ",
            "answer:-": "   the base two exponential function ofinput ",
            "context:-": "   Computes the exponential of the elements minus 1",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes what of a real square matrix? ",
            "answer:-": "   eigenvalues and eigenvectors ",
            "context:-": "   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What does this low-level function call directly? ",
            "answer:-": "   LAPACK’s geqrf ",
            "context:-": "   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the low-level function for calling LAPACK's geqrf directly? ",
            "answer:-": "   Alias oftorch.outer() ",
            "context:-": "    Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What performs a matrix-vector product of? ",
            "answer:-": "   matrixmatand the vectorvec ",
            "context:-": "   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it perform? ",
            "answer:-": "   batch matrix-matrix product of matrices inbatch1andbatch2 ",
            "context:-": "   Performs a matrix-vector product of the matrixmatand the vectorvec.   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Returns the matrix product of what? ",
            "answer:-": "   NNN2-D tensors ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the dot product of two 1D tensors? ",
            "answer:-": "   dot product of two 1D tensors ",
            "context:-": "   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a low-level function for calling LAPACK's geqrf directly? ",
            "answer:-": "   Alias oftorch.outer() ",
            "context:-": "   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias oftorch.outer compute the dot product for? ",
            "answer:-": "   1D tensors ",
            "context:-": "   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that computes the dot product for 1D tensors? ",
            "answer:-": "   Alias fortorch.linalg.inv ",
            "context:-": "   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Performs the outer-product of what and adds it to the matrixinput? ",
            "answer:-": "   vectorsvec1andvec2 ",
            "context:-": "   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What decomposition of a symmetric positive-definite matrixAAor is computed for batches of symmetric positive-definite matrices ",
            "answer:-": "   Cholesky ",
            "context:-": "   Performs the outer-product of vectorsvec1andvec2and adds it to the matrixinput.   Performs a batch matrix-matrix product of matrices inbatch1andbatch2.   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Where are matrices stored? ",
            "answer:-": "   ininputandmat2 ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the Cholesky factoruuu? ",
            "answer:-": "   returns matrixinv ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does a real square matrix compute? ",
            "answer:-": "   eigenvalues and eigenvectors ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Is this a low-level function for calling LAPACK's geqrf directly? ",
            "answer:-": "   low-level function ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What calculates the dot product for 1D tensors? ",
            "answer:-": "   Alias oftorch.outer() ",
            "context:-": "   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias fortorch.linalg.det() calculate of a square matrix or batches of square matrices ",
            "answer:-": "   log determinant ",
            "context:-": "   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What calculates the log determinant of a square matrix or batches of square matrices? ",
            "answer:-": "   Alias fortorch.linalg.slogdet ",
            "context:-": "   Performs a batch matrix-matrix product of matrices stored ininputandmat2.   Returns the matrix product of theNNN2-D tensors.   Computes the Cholesky decomposition of a symmetric positive-definite matrixAAAor for batches of symmetric positive-definite matrices.   Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the inverse of a symmetric positive-definite matrix? ",
            "answer:-": "   returns matrixinv ",
            "context:-": "    Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does the function compute of a real square matrix? ",
            "answer:-": "   eigenvalues and eigenvectors ",
            "context:-": "    Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is this function for calling LAPACK's geqrf directly? ",
            "answer:-": "   low-level function ",
            "context:-": "    Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does Alias oftorch.outer() compute the dot product for? ",
            "answer:-": "   1D tensors ",
            "context:-": "   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What does it compute of a matrix or batches of matricesA? ",
            "answer:-": "   LU factorization ",
            "context:-": "    Computes the inverse of a symmetric positive-definite matrixAAAusing its Cholesky factoruuu",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes the eigenvalues and eigenvectors of a real square matrix? ",
            "answer:-": "   dot product ",
            "context:-": "   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of function is this? ",
            "answer:-": "   low-level function ",
            "context:-": "   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  Computes what of a matrix or batches of matricesA? ",
            "answer:-": "   LU factorization ",
            "context:-": "   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What returns the LU solve of the linear systemAx=bAx = bAx=busing the partially pivoted? ",
            "answer:-": "   LU factorization of A fromtorch.lu() ",
            "context:-": "   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the dot product of two tensors? ",
            "answer:-": "   Matrix product of two tensors ",
            "context:-": "   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the function that calculates the dot product of two tensors? ",
            "answer:-": "   Alias fortorch.linalg.matrix_power() ",
            "context:-": "   Computes the dot product of two 1D tensors.   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is a matrix product of two tensors? ",
            "answer:-": "   Matrix product of two tensors ",
            "context:-": "   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What type of tensor does Alias fortorch.linalg.matrix_power() return? ",
            "answer:-": "   2-D ",
            "context:-": "   Computes the eigenvalues and eigenvectors of a real square matrix.   This is a low-level function for calling LAPACK’s geqrf directly.   Alias oftorch.outer().   Computes the dot product for 1D tensors.   Alias fortorch.linalg.inv()   Alias fortorch.linalg.det()   Calculates log determinant of a square matrix or batches of square matrices.   Alias fortorch.linalg.slogdet()   Computes the solution to the least squares and least norm problems for a full rank matrixAAAof size(m×n)(m \\times n)(m×n)and a matrixBBBof size(m×k)(m \\times k)(m×k).   Computes the LU factorization of a matrix or batches of matricesA.   Returns the LU solve of the ar systemAx=bAx = bAx=busing the partially pivoted LU factorization of A fromtorch.lu().   Unpacks the data and pivots from a LU factorization of a tensor into tensorsLandUand a permutation tensorPsuch thatLU_data,LU_pivots=(P@L@U).lu().   Matrix product of two tensors.   Alias fortorch.linalg.matrix_power()   Returns the numerical rank of a 2-D tensor.    ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the name of the file that is used by Alias fortorch.special.exp2? ",
            "answer:-": "   Alias fortorch.special.exp2() ",
            "context:-": "   Alias fortorch.special.exp2().  ",
            "source:-": "https//pytorch.org/docs/stable/torch.html#random-sampling"
        },
        {
            "question:-": "  What is the Poisson distribution generator? ",
            "answer:-": "   pseudorandom number generator ",
            "context:-": "   Returns a tensor of the same size asinputwith each element",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.exp2.html#torch.exp2"
        },
        {
            "question:-": "  Returns a tensor with the same data and number of elements as input, but with what? ",
            "answer:-": "   the specified shape ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.poisson.html#torch.poisson"
        },
        {
            "question:-": "  When possible, the returned tensor will be what? ",
            "answer:-": "   view ofinput ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  If the returned tensor is a view ofinput, what will it be? ",
            "answer:-": "   copy ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  What can be reshaped without copying? ",
            "answer:-": "   Contiguous inputs and inputs with compatible strides ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  When is it possible to return a view? ",
            "answer:-": "   Seetorch.Tensor.view()on ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  A single dimension may be what? ",
            "answer:-": "-1",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  What does input(Tensor) return? ",
            "answer:-": "   tensor to be reshaped shape ",
            "context:-": "   Returns a tensor with the same data and number of elements asinput,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  What does each value in theinputbelongs to? ",
            "answer:-": "   the indices of the buckets ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.reshape.html#torch.reshape"
        },
        {
            "question:-": "  What type of index is returned with the same size as input? ",
            "answer:-": "   tensor ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  If the left boundary is closed, what is the default value? ",
            "answer:-": "   Ifrightis False ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What does the right returned index satisfies? ",
            "answer:-": "   False boundaries ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What must contain a monotonically increasing sequence? ",
            "answer:-": "   1-D tensor ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  Out_int32(bool,optional) - Indicate what? ",
            "answer:-": "   output data type ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is the default output data type? ",
            "answer:-": "   torch.int64 ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is the default value of torch.int32? ",
            "answer:-": "   False ",
            "context:-": "   Returns the indices of the buckets to which each value in theinputbelongs, where the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  What is the version of oftorch.Tensor.scatter_add_()? ",
            "answer:-": "   Out-of-place ",
            "context:-": "   Out-of-place version oftorch.Tensor.scatter_add_()  ",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.bucketize.html#torch.bucketize"
        },
        {
            "question:-": "  Where can you find the PyTorch C++ API docs? ",
            "answer:-": "   directly gohere ",
            "context:-": "   If you are looking for the PyTorch C++ API docs, directly gohere. PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.scatter_add.html#torch.scatter_add"
        },
        {
            "question:-": "  What provides several features for working with C++? ",
            "answer:-": "   PyTorch ",
            "context:-": "   PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What language does TorchScript allow PyTorch models defined in Python to be serialized and then loaded and run in? ",
            "answer:-": "   C++ ",
            "context:-": "   If you are looking for the PyTorch C++ API docs, directly gohere. PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you learn more about TorchScript? ",
            "answer:-": "   theLoading a TorchScript Model in C++ tutorial ",
            "context:-": "   TorchScriptallows PyTorch models defined in Python to be serialized and then loaded and run in C++ capturing the model code via compilation or tracing its execution. You can learn more in theLoading a TorchScript Model in C++ tutorial. This means you can define your models in Python as much as possible, but subsequently export them via TorchScript for doing no-Python execution in production or embedded environments. The TorchScript C++ API is used to interact with these models and the TorchScript execution engine, including",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What can you do with models exported via TorchScript? ",
            "answer:-": "   no-Python execution ",
            "context:-": "   If you are looking for the PyTorch C++ API docs, directly gohere. PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is the TorchScript C++ API used for? ",
            "answer:-": "   Loading serialized TorchScript models saved from Python ",
            "context:-": "   TorchScriptallows PyTorch models defined in Python to be serialized and then loaded and run in C++ capturing the model code via compilation or tracing its execution. You can learn more in theLoading a TorchScript Model in C++ tutorial. This means you can define your models in Python as much as possible, but subsequently export them via TorchScript for doing no-Python execution in production or embedded environments. The TorchScript C++ API is used to interact with these models and the TorchScript execution engine, including",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is one of the ways you can interact with TorchScript? ",
            "answer:-": "   Constructing the input and doing preprocessing using C++ Tensor API ",
            "context:-": "   If you are looking for the PyTorch C++ API docs, directly gohere. PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What language does TorchScript allow PyTorch models to be serialized and then loaded and run in? ",
            "answer:-": "   C++ ",
            "context:-": "   PyTorch provides several features for working with C++, and it’s best to choose from them based on your needs. At a high level, the following support is available",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What does TorchScript allow you to do in production or embedded environments? ",
            "answer:-": "   no-Python execution ",
            "context:-": "   TorchScriptallows PyTorch models defined in Python to be serialized and then loaded and run in C++ capturing the model code via compilation or tracing its execution. You can learn more in theLoading a TorchScript Model in C++ tutorial. This means you can define your models in Python as much as possible, but subsequently export them via TorchScript for doing no-Python execution in production or embedded environments. The TorchScript C++ API is used to interact with these models and the TorchScript execution engine, including",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is one of the ways you can interact with the TorchScript execution engine? ",
            "answer:-": "   Constructing the input and doing preprocessing using C++ Tensor API ",
            "context:-": "   TorchScriptallows PyTorch models defined in Python to be serialized and then loaded and run in C++ capturing the model code via compilation or tracing its execution. You can learn more in theLoading a TorchScript Model in C++ tutorial. This means you can define your models in Python as much as possible, but subsequently export them via TorchScript for doing no-Python execution in production or embedded environments. The TorchScript C++ API is used to interact with these models and the TorchScript execution engine, including",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What language are PyTorch models defined in? ",
            "answer:-": "   Python ",
            "context:-": "   TorchScriptallows PyTorch models defined in Python to be serialized and then loaded and run in C++ capturing the model code via compilation or tracing its execution. You can learn more in theLoading a TorchScript Model in C++ tutorial. This means you can define your models in Python as much as possible, but subsequently export them via TorchScript for doing no-Python execution in production or embedded environments. The TorchScript C++ API is used to interact with these models and the TorchScript execution engine, including",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What can be done if needed? ",
            "answer:-": "   simple model modifications ",
            "context:-": "   Doing simple model modifications if needed (e.g. pulling out submodules) Constructing the input and doing preprocessing using C++ Tensor API TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What can TorchScript be augmented with user-supplied code through? ",
            "answer:-": "   custom operators and custom classes ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  From where can custom operators and classes be invoked in TorchScript code run? ",
            "answer:-": "   Python or from C++ ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What does TheExtending TorchScript with Custom C++ Operatorstutorial walk through interfacing TorchScript with? ",
            "answer:-": "   OpenCV ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What type of interface allows C++ classes and structs to be bound into TorchScript? ",
            "answer:-": "   pybind11 ",
            "context:-": "   Constructing the input and doing preprocessing using C++ Tensor API TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where are most of the tensor and autograd operations available in the C++ API? ",
            "answer:-": "   PyTorch Python API ",
            "context:-": "   Constructing the input and doing preprocessing using C++ Tensor API TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is one of the tensor methods available in the C++ API? ",
            "answer:-": "   torch ",
            "context:-": "   Constructing the input and doing preprocessing using C++ Tensor API TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you find the full list of tensor methods? ",
            "answer:-": "   https",
            "context:-": "   Doing simple model modifications if needed (e.g. pulling out submodules) Constructing the input and doing preprocessing using C++ Tensor API TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What can be augmented with user-supplied code? ",
            "answer:-": "   custom operators and custom classes ",
            "context:-": "   Constructing the input and doing preprocessing using C++ Tensor API TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you find the full list of methods available? ",
            "answer:-": "   https",
            "context:-": "   Constructing the input and doing preprocessing using C++ Tensor API TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  C++ classes and structs can be bound into TorchScript through what interface? ",
            "answer:-": "   pybind11 ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where are most of the tensor and autograd operations in PyTorch Python API available? ",
            "answer:-": "   C++ API ",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is an example of a tensormethod? ",
            "answer:-": "   torch ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you find the full list of methods available in TorchScript? ",
            "answer:-": "   https",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is the name of the C++ API used for tensor and autograd operations? ",
            "answer:-": "   torch ",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What does the C++ tensor indexing API look and behave like? ",
            "answer:-": "   Python API ",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What are crucial for building dynamic neural networks in C++ frontend? ",
            "answer:-": "   tensor autograd APIs and thetorch",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  Where can you find more information about the tensor autograd API? ",
            "answer:-": "   pytorch.org/tutorials/advanced/cpp_autograd.html ",
            "context:-": "   Most of the tensor and autograd operations in PyTorch Python API are also available in the C++ API. These include",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is the name of the Torch method? ",
            "answer:-": "   torch ",
            "context:-": "   torch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What does the C++ tensor indexing API look and behave the same as? ",
            "answer:-": "   Python API ",
            "context:-": "   C++ tensor indexing API that looks and behaves the same as the Python API. For details on its usage, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What workflow requires model authoring to be done in TorchScript? ",
            "answer:-": "   infer in C++ ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What language does the author in TorchScript, infer in C++ workflow require the model to be authored in? ",
            "answer:-": "   C++ ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is undesirable in a workflow where the model has to be authored in C++? ",
            "answer:-": "   a Python component ",
            "context:-": "   torch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  In what language does TorchScript author and train a neural net model? ",
            "answer:-": "   C++ ",
            "context:-": "   C++ tensor indexing API that looks and behaves the same as the Python API. For details on its usage, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What does the \"author in\" workflow require model authoring to be done in? ",
            "answer:-": "   TorchScript ",
            "context:-": "   The tensor autograd APIs and thetorch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  In cases where a Python component is undesirable, the model might have to be authored in what language? ",
            "answer:-": "   C++ ",
            "context:-": "   C++ tensor indexing API that looks and behaves the same as the Python API. For details on its usage, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is an example of a case where a model has to be authored in C++? ",
            "answer:-": "   in workflows where a Python component is undesirable ",
            "context:-": "   C++ tensor indexing API that looks and behaves the same as the Python API. For details on its usage, please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is an overview of? ",
            "answer:-": "   PyTorch C++ model authoring and training API ",
            "context:-": "   The tensor autograd APIs and thetorch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What language does TorchScript require a model to be authored in? ",
            "answer:-": "   C++ ",
            "context:-": "   The tensor autograd APIs and thetorch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is undesirable in workflows where the model has to be authored in C++? ",
            "answer:-": "   Python component ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What does astorch",
            "answer:-": "   Python API ",
            "context:-": "   The tensor autograd APIs and thetorch",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What does astorch",
            "answer:-": "   Python API ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html",
            "undefined": "optim closely resemble? "
        },
        {
            "question:-": "  What is the name of the API that you can find at http",
            "answer:-": "   PyTorch C++ model authoring and training API ",
            "context:-": "   The “author in TorchScript, infer in C++” workflow requires model authoring to be done in TorchScript.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  From what languages can custom operators and classes be invoked in TorchScript code run? ",
            "answer:-": "   Python or from C++ ",
            "context:-": "   TorchScript can be augmented with user-supplied code through custom operators and custom classes.",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is libtorch? ",
            "answer:-": "   the library that contains all of the above C++ APIs ",
            "context:-": "   For guidance on how to install and link with libtorch (the library that contains all of the above C++ APIs), please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is one type of libtorch binaries compiled with? ",
            "answer:-": "   GCC pre-cxx11 ABI ",
            "context:-": "   For guidance on how to install and link with libtorch (the library that contains all of the above C++ APIs), please see",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What is a wrapper around Python's assert? ",
            "answer:-": "   symbolically traceable ",
            "context:-": "   A wrapper around Python’s assert which is symbolically traceable.  ",
            "source:-": "https//pytorch.org/docs/stable/cpp_index.html"
        },
        {
            "question:-": "  What does values represent in the given dimensiondim? ",
            "answer:-": "   thekth smallest element of each row of theinputtensor ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch._assert.html#torch._assert"
        },
        {
            "question:-": "  What does indexes return of each element found? ",
            "answer:-": "   index location ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  When is the last dimension of theinput chosen? ",
            "answer:-": "   Ifdimis not given ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  When are both thevaluesandindicestensors the same size as input? ",
            "answer:-": "   IfkeepdimisTrue ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  What is the difference between thevaluesandindicestensors and theinputtensor? ",
            "answer:-": "   1 fewer dimension ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  Wheninputis a what, this function may nondeterministically returnindices for any of them? ",
            "answer:-": "   CUDA tensor ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  What is the input tensor? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  What is the dimension to find the kth value along keepdim(bool)? ",
            "answer:-": "   k(int) ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Out(tuple,optional) - the output tuple of (Tensor, LongTensor) can ",
            "answer:-": "   output buffers ",
            "context:-": "   Returns a namedtuple(values,indices)wherevaluesis thekth",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  What returns the matrixUis upper-triangular and the decomposition has the form IfupperisFalse? ",
            "answer:-": "   IfupperisTrue ",
            "context:-": "   IfupperisTrue, the returned matrixUis upper-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.kthvalue.html#torch.kthvalue"
        },
        {
            "question:-": "  WhenupperisTrue, the returned tensor will be composed of what? ",
            "answer:-": "   lower-triangular Cholesky factors ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is deprecated in favor oftorch.linalg.cholesky()? ",
            "answer:-": "   Warning torch.cholesky()is ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What should be replaced with L=torch.cholesky(A,upper=True)? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Computes the Cholesky decomposition of a symmetric positive-definite",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the input tensorAAAof size(,n,n)? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What flag indicates whether to return a upper or lower triangular matrix? ",
            "answer:-": "   upper(bool,optional) ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the default value for the return matrix? ",
            "answer:-": "   Default",
            "context:-": "   IfupperisTrue, the returned matrixUis upper-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the form of the decomposition? ",
            "answer:-": "   IfupperisTrue ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What does False out(Tensor,optional) return? ",
            "answer:-": "   output matrix ",
            "context:-": "   IfupperisFalse, the returned matrixLis lower-triangular, and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What is the function that computes the histogram of a tensor? ",
            "answer:-": "   Computes the histogram of a tensor ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.cholesky.html#torch.cholesky"
        },
        {
            "question:-": "  What are the elements sorted into? ",
            "answer:-": "   equal width bins ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  What happens if the elements are sorted into equal width bins betweenminandmax? ",
            "answer:-": "   Ifminandmaxare both zero, the minimum and maximum values of the data are used ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  What elements are ignored? ",
            "answer:-": "   Elements lower than min and higher than max ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  Out(Tensor,optional) is what? ",
            "answer:-": "   output tensor ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  What is a histogram represented as? ",
            "answer:-": "   Tensor ",
            "context:-": "   Computes the histogram of a tensor. The elements are sorted into equal width bins betweenminandmax. Ifminandmaxare both zero, the minimum and",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  What is the library part of? ",
            "answer:-": "   thePyTorchproject ",
            "context:-": "   This library is part of thePyTorchproject. PyTorch is an open source",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.histc.html#torch.histc"
        },
        {
            "question:-": "  What is PyTorch? ",
            "answer:-": "   open source machine learning framework ",
            "context:-": "   This library is part of thePyTorchproject. PyTorch is an open source",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the release status of PyTorch? ",
            "answer:-": "   Stable ",
            "context:-": "   This library is part of thePyTorchproject. PyTorch is an open source",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What do we expect to maintain? ",
            "answer:-": "   backwards compatibility ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is tagged as Beta because the API may change based on user feedback? ",
            "answer:-": "   Beta",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What classification does PyTorch commit to seeing Beta features through? ",
            "answer:-": "   Stable classification ",
            "context:-": "   This library is part of thePyTorchproject. PyTorch is an open source",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What are we not committing to? ",
            "answer:-": "   backwards compatibility ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What feature is typically not available as part of binary distributions like PyPI or Conda? ",
            "answer:-": "   Prototype ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the release status of features described in this documentation? ",
            "answer:-": "   Stable ",
            "context:-": "   Features described in this documentation are classified by release status",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What type of feature is tagged as because the API may change based on user feedback? ",
            "answer:-": "   Beta ",
            "context:-": "   Features described in this documentation are classified by release status",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What classification do we commit to seeing a feature through for Beta features? ",
            "answer:-": "   the Stable classification ",
            "context:-": "   Features described in this documentation are classified by release status",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  Prototype features are typically not available as part of binary distributions like what? ",
            "answer:-": "   PyPI or Conda ",
            "context:-": "   Features described in this documentation are classified by release status",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What consists of data processing utilities and popular datasets for natural language? ",
            "answer:-": "   Thetorchtextpackage ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What does Thetorchtextpackage consist of data processing utilities and popular datasets for natural language? ",
            "answer:-": "   Package Reference ",
            "context:-": "   Features described in this documentation are classified by release status",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the classification of features that will be maintained long-term? ",
            "answer:-": "   Stable ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What classification are Beta features committed to seeing through? ",
            "answer:-": "   the Stable classification ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is a package reference? ",
            "answer:-": "   PyTorch Libraries ",
            "context:-": "   Stable",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the name of the page? ",
            "answer:-": "   Index Module Index Search Page ",
            "context:-": "   Index Module Index Search Page  ",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What can the second argument be? ",
            "answer:-": "   a number or a tensor whose shape isbroadcastablewith the first argument ",
            "context:-": "   Computes element-wise equality The second argument can be a number or a tensor whose shape isbroadcastablewith the first argument. input(Tensor) – the tensor to compare other(Tensororfloat) – the tensor or value to compare out(Tensor,optional) – the output tensor. A boolean tensor that is True whereinputis equal tootherand False elsewhere Example",
            "source:-": "https//pytorch.org/text/stable"
        },
        {
            "question:-": "  What is the tensor to compare out(Tensor,optional)? ",
            "answer:-": "   output tensor ",
            "context:-": "   Computes element-wise equality The second argument can be a number or a tensor whose shape isbroadcastablewith the first argument. input(Tensor) – the tensor to compare other(Tensororfloat) – the tensor or value to compare out(Tensor,optional) – the output tensor. A boolean tensor that is True whereinputis equal tootherand False elsewhere Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.eq.html#torch.eq"
        },
        {
            "question:-": "  What is the value of a boolean tensor? ",
            "answer:-": "   True ",
            "context:-": "   Computes element-wise equality The second argument can be a number or a tensor whose shape isbroadcastablewith the first argument. input(Tensor) – the tensor to compare other(Tensororfloat) – the tensor or value to compare out(Tensor,optional) – the output tensor. A boolean tensor that is True whereinputis equal tootherand False elsewhere Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.eq.html#torch.eq"
        },
        {
            "question:-": "  What does the new tensor return? ",
            "answer:-": "   a dimension of size one inserted at the specified position ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.eq.html#torch.eq"
        },
        {
            "question:-": "  What does the returned tensor share with the returned tensor? ",
            "answer:-": "   shares the same underlying data ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  What value within the range can be used? ",
            "answer:-": "   Adimvalue ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  What corresponds tounsqueeze()applied atdim=dim+input.dim()+1? ",
            "answer:-": "   Negativedimwill ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  What is the index at which to insert the singleton dimension? ",
            "answer:-": "   dim(int) ",
            "context:-": "   Returns a new tensor with a dimension of size one inserted at the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  Returns the initial seed for generating random numbers as what? ",
            "answer:-": "   Pythonlong ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.unsqueeze.html#torch.unsqueeze"
        },
        {
            "question:-": "  Where are the numbers drawn from? ",
            "answer:-": "   the Cauchy distribution ",
            "context:-": "   Fills the tensor with numbers drawn from the Cauchy distribution",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is the torch.special module modeled after? ",
            "answer:-": "   SciPy ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.cauchy_.html#torch.Tensor.cauchy_"
        },
        {
            "question:-": "  What version of PyTorch is the torch.special module in? ",
            "answer:-": "   BETA ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the status of the torch.special module? ",
            "answer:-": "   New functions are still being added ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Where can you find details of the torch.special module? ",
            "answer:-": "   the documentation of each function ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes the entropy oninput? ",
            "answer:-": "   elementwise ",
            "context:-": "   Computes the entropy oninput(as defined below), elementwise. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the name of the input tensor? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Returns True if the data type ofinputis a complex data type i.e.,",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Out(Tensor,optional) - what is the output tensor? ",
            "answer:-": "   output tensor ",
            "context:-": "   This function provides greater precision than exp(x) - 1 for small values of x. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.is_complex.html#torch.is_complex"
        },
        {
            "question:-": "  What does the torch.special module do? ",
            "answer:-": "   Computes the complementary error function ofinput ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the error function of input defined as? ",
            "answer:-": "   input(Tensor) – the input tensor ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is out(Tensor,optional) defined as? ",
            "answer:-": "   output tensor ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the complementary error function of input defined as? ",
            "answer:-": "   input(Tensor) – the input tensor ",
            "context:-": "   The torch.special module, modeled after SciPy’sspecialmodule. This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the inverse error function of input? ",
            "answer:-": "   Computes the inverse error function ofinput ",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is another name for the logistic sigmoid function? ",
            "answer:-": "   the expit ",
            "context:-": "   Computes the expit (also known as the logistic sigmoid function) of the elements ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What version of PyTorch is this module in? ",
            "answer:-": "   BETA ",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Is this module in BETA? ",
            "answer:-": "   New functions are still being added ",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the name of the documentation of each function that may change in future PyTorch releases? ",
            "answer:-": "   the documentation of each function for details ",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the name of the function that computes the error function of input? ",
            "answer:-": "   Computes the error function ofinput ",
            "context:-": "   This module is in BETA. New functions are still being added, and some",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is an example of a complementary error function? ",
            "answer:-": "   Computes the complementary error function ofinput ",
            "context:-": "   input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Out(Tensor,optional) – what? ",
            "answer:-": "   output tensor ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes what? ",
            "answer:-": "   the error function ofinput ",
            "context:-": "   Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the error function of input? ",
            "answer:-": "   complementary error function ofinput ",
            "context:-": "   Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the complementary error function ofinput? ",
            "answer:-": "   inverse error function ofinput ",
            "context:-": "   Computes the entropy oninput(as defined below), elementwise. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes the exponential of the elements minus what ofinput? ",
            "answer:-": "1",
            "context:-": "   Computes the exponential of the elements minus 1",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  The exponential of the elements minus 1 ofinput provides greater precision than what for small values of x? ",
            "answer:-": "   exp(x) - 1 ",
            "context:-": "   Computes the expit (also known as the logistic sigmoid function) of the elements ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the complementary error function of input? ",
            "answer:-": "   inverse error function ofinput ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the expit also known as? ",
            "answer:-": "   the logistic sigmoid function ",
            "context:-": "   Computes the error function ofinput. The error function is defined as follows",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the exponential function of input? ",
            "answer:-": "   base two ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the complementary error function? ",
            "answer:-": "   complementary error function ofinput ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the complementary error function defined as? ",
            "answer:-": "   input(Tensor) – the input tensor ",
            "context:-": "   Computes the complementary error function ofinput.",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the absolute value of the gamma function oninput? ",
            "answer:-": "   natural logarithm ",
            "context:-": "   out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Out(Tensor,optional) - what? ",
            "answer:-": "   output tensor ",
            "context:-": "   out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What type of function is computed for each element of input? ",
            "answer:-": "   exponentially scaled zeroth order modified Bessel function ",
            "context:-": "   Computes the expit (also known as the logistic sigmoid function) of the elements ofinput. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the input(Tensor)? ",
            "answer:-": "   input tensor ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  This function provides greater precision than what for small values of x? ",
            "answer:-": "   exp(x) - 1 ",
            "context:-": "   Note This function provides greater precision than exp(x) - 1 for small values of x. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is an example of a function that computes the base two exponential function of input? ",
            "answer:-": "   Computes the base two exponential function ofinput ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What order modified Bessel function is computed for each element of input? ",
            "answer:-": "   zeroth ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Input is clamped to what when eps is not None? ",
            "answer:-": "   eps ",
            "context:-": "   Computes the exponential of the elements minus 1",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  When eps is None andinput 0 orinput> 1, the function will yield what? ",
            "answer:-": "   NaN ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the output tensor? ",
            "answer:-": "   Computes the base two exponential function ofinput ",
            "context:-": "   out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Computes the natural of what of the absolute value of the gamma function oninput? ",
            "answer:-": "   logarithm ",
            "context:-": "   input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  Inputis clamped to what when eps is not None? ",
            "answer:-": "   eps ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is input(Tensor)? ",
            "answer:-": "   input tensor ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the epsilon for input clamp bound? ",
            "answer:-": "   float ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the default value of the input tensor? ",
            "answer:-": "   Default",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What function provides greater precision for small values of x? ",
            "answer:-": "   exp(x) - 1 ",
            "context:-": "   This function provides greater precision than exp(x) - 1 for small values of x. input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What natural function is computed of the absolute value of the gamma function oninput? ",
            "answer:-": "   logarithm ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is an example of a function that computes the base two exponential function of the gamma function oninput? ",
            "answer:-": "   Computesinput*log1p(other)with the following cases ",
            "context:-": "   input(Tensor) – the input tensor. out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the default value of the output tensor? ",
            "answer:-": "   Default",
            "context:-": "   out(Tensor,optional) – the output tensor. Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is an example of a Computesinput*log1p? ",
            "answer:-": "   Computesinput*log1p(other)with the following cases ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is'sscipy.special.xlog1py' similar to? ",
            "answer:-": "   SciPy ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What does input(NumberorTensor) represent? ",
            "answer:-": "   Multiplier ",
            "context:-": "   Example",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  What is the reverse operation of the manner described ingather()? ",
            "answer:-": "   Writes all values from the tensorsrcintoselfat the indices specified in theindextensor ",
            "context:-": "   Writes all values from the tensorsrcintoselfat the indices",
            "source:-": "https//pytorch.org/docs/stable/special.html#torch.special.exp2"
        },
        {
            "question:-": "  For each value insrc, what is specified by its index insrcfordimension!=dim? ",
            "answer:-": "   output index ",
            "context:-": "   Writes all values from the tensorsrcintoselfat the indices",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the reverse operation of the manner described? ",
            "answer:-": "   ingather() ",
            "context:-": "   Writes all values from the tensorsrcintoselfat the indices",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What should all have the same number of dimensions? ",
            "answer:-": "   self,indexandsrc ",
            "context:-": "   This is the reverse operation of the manner described ingather(). self,indexandsrc(if it is a Tensor) should all have",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  Does indexandsrcdo broadcast? ",
            "answer:-": "   not broadcast ",
            "context:-": "   For a 3-D tensor,selfis updated as",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What must the values of index be? ",
            "answer:-": "   between0andself.size(dim)-1inclusive ",
            "context:-": "   Moreover, as forgather(), the values ofindexmust be",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What happens when indices are not unique? ",
            "answer:-": "   the gradient will be incorrect ",
            "context:-": "   This is the reverse operation of the manner described ingather(). self,indexandsrc(if it is a Tensor) should all have",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the backward pass implemented only? ",
            "answer:-": "   forsrc.shape==index.shape ",
            "context:-": "   Moreover, as forgather(), the values ofindexmust be",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the reverse operation of the manner described for a 3-D tensor? ",
            "answer:-": "   ingather() ",
            "context:-": "   For a 3-D tensor,selfis updated as",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the manner described ingather()? ",
            "answer:-": "   reverse operation ",
            "context:-": "   This is the reverse operation of the manner described ingather(). self,indexandsrc(if it is a Tensor) should all have",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What does indexandsrcdo do? ",
            "answer:-": "   not broadcast ",
            "context:-": "   This is the reverse operation of the manner described ingather(). self,indexandsrc(if it is a Tensor) should all have",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What will be incorrect when indices are not unique? ",
            "answer:-": "   the gradient ",
            "context:-": "   Moreover, as forgather(), the values ofindexmust be",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What allows specification of an optional reduction operation? ",
            "answer:-": "   optionalreduceargument ",
            "context:-": "   Moreover, as forgather(), the values ofindexmust be",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the index inself specified by? ",
            "answer:-": "   index insrcfordimension!=dimand by the corresponding value inindexfordimension=dim ",
            "context:-": "   Moreover, as forgather(), the values ofindexmust be",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the tensor? ",
            "answer:-": "   3-D ",
            "context:-": "   Moreover, as forgather(), the values ofindexmust be",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the axis along which to index? ",
            "answer:-": "   dim(int) ",
            "context:-": "   Moreover, as forgather(), the values ofindexmust be",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the tensor of size? ",
            "answer:-": "   1-D ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep. Step is",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.Tensor.scatter_.html#torch.Tensor.scatter_"
        },
        {
            "question:-": "  What is the gap between two values in the tensor? ",
            "answer:-": "   Step ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep. Step is",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  Warning This function is deprecated and will be removed in a future release because its behavior is inconsistent with what language's range builtin? ",
            "answer:-": "   Python ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep. Step is",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What function produces values in [start, end]? ",
            "answer:-": "   usetorch.arange() ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the starting value for the set of points? ",
            "answer:-": "   start(float) ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the ending value for the set of points? ",
            "answer:-": "   end(float) ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What does out(Tensor,optional) return? ",
            "answer:-": "   output tensor ",
            "context:-": "   Returns a 1-D tensor of size⌊end−startstep⌋+1\\left\\lfloor \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rfloor + 1⌊stepend−start​⌋+1with values fromstarttoendwith stepstep. Step is",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What language's range builtin is inconsistent with this function? ",
            "answer:-": "   Python ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is out(Tensor,optional) used for? ",
            "answer:-": "   output tensor ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the desired data type of returned tensor? ",
            "answer:-": "   dtype ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What uses a global default? ",
            "answer:-": "   ifNone ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What happens when the data type is inferred from the other input arguments? ",
            "answer:-": "   Ifdtypeis not given ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What happens if any ofstart,end, orstopare floating-point? ",
            "answer:-": "   thedtypeis inferred to be the default dtype, seeget_default_dtype() ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the default dtype inferred to if any ofstart,end, orstopare floating-point? ",
            "answer:-": "   betorch.int64 ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the desired layout of returned Tensor? ",
            "answer:-": "   layout(torch.layout, optional) ",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the default for the layout of returned Tensor? ",
            "answer:-": "   Default",
            "context:-": "   Warning This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What is the default for the layout of the returned Tensor? ",
            "answer:-": "   Default",
            "context:-": "   This function is deprecated and will be removed in a future release because its behavior is inconsistent with",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What are two examples of a complex data type? ",
            "answer:-": "   one oftorch.complex64, andtorch.complex128 ",
            "context:-": "   Returns True if the data type ofinputis a complex data type i.e.,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.range.html#torch.range"
        },
        {
            "question:-": "  What happens when you fork the RNG? ",
            "answer:-": "   reset to the state that it was previously in ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.is_complex.html#torch.is_complex"
        },
        {
            "question:-": "  Devices(iterable of CUDA IDs) – for which to fork the RNG? ",
            "answer:-": "   CUDA devices ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is always forked? ",
            "answer:-": "   CPU RNG state ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  When will fork_rng() emit a warning? ",
            "answer:-": "   if your machine has a lot of devices ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  If you explicitly specify devices, this warning will be suppressed what? ",
            "answer:-": "   enabled(bool) ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is the reason for disabling the context manager without having to delete it and unindent your Python code under it? ",
            "answer:-": "   convenience argument ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What does fork_rng() do? ",
            "answer:-": "   Sets the seed for generating random numbers ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What does fork_rng() return? ",
            "answer:-": "   atorch.Generatorobject ",
            "context:-": "   Forks the RNG, so that when you return, the RNG is reset",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is another name for Alias fortorch? ",
            "answer:-": "   Alias fortorch.linalg.pinv ",
            "context:-": "   Alias fortorch.linalg.pinv()  ",
            "source:-": "https//pytorch.org/docs/stable/random.html"
        },
        {
            "question:-": "  What is not guaranteed across PyTorch releases, individual commits, or different platforms? ",
            "answer:-": "   Completely reproducible results ",
            "context:-": "   Completely reproducible results are not guaranteed across PyTorch releases,",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.pinverse.html#torch.pinverse"
        },
        {
            "question:-": "  Results may not be reproducible between what two executions? ",
            "answer:-": "   CPU and GPU executions ",
            "context:-": "   Completely reproducible results are not guaranteed across PyTorch releases,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What can you do to ensure reproducible results across platforms, devices, and PyTorch releases? ",
            "answer:-": "   limit the number of sources of nondeterministic behavior ",
            "context:-": "   Completely reproducible results are not guaranteed across PyTorch releases,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What can cause multiple executions of your application to behave differently? ",
            "answer:-": "   randomness ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  How can you configure PyTorch for some operations? ",
            "answer:-": "   to avoid using nondeterministic algorithms ",
            "context:-": "   Completely reproducible results are not guaranteed across PyTorch releases,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What are often slower than nondeterministic operations? ",
            "answer:-": "   Warning Deterministic operations ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What may save time in development by facilitating experimentation, debugging, and regression testing? ",
            "answer:-": "   determinism ",
            "context:-": "   Deterministic operations are often slower than nondeterministic operations, so",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What can you do for a specific platform, device, and PyTorch release? ",
            "answer:-": "   limit the number of sources of nondeterministic behavior ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What can you configure to avoid using nondeterministic algorithms for some operations? ",
            "answer:-": "   PyTorch ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What library can you use to seed the global NumPy RNG? ",
            "answer:-": "   NumPy ",
            "context:-": "   However, there are some steps you can take to limit the number of sources of",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is slower than nondeterministic operations? ",
            "answer:-": "   Deterministic operations ",
            "context:-": "   Deterministic operations are often slower than nondeterministic operations, so",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What do some applications and libraries need to be seeded consistently? ",
            "answer:-": "   NumPy Random Generator objects ",
            "context:-": "   For custom operators, you might need to set python seed as well",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Where can you find out how to set consistent seeds for other libraries that use random number generators? ",
            "answer:-": "   the documentation ",
            "context:-": "   If you or any of the libraries you are using rely on NumPy, you can seed the global",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Where can you find information about other libraries that use random number generators? ",
            "answer:-": "   the documentation ",
            "context:-": "   For custom operators, you might need to set python seed as well",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Some applications and libraries may use what? ",
            "answer:-": "   NumPy Random Generator objects ",
            "context:-": "   If you or any of the libraries you are using rely on NumPy, you can seed the global",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Where can you find out how to set consistent seeds for libraries that use random number generators? ",
            "answer:-": "   the documentation ",
            "context:-": "   However, some applications and libraries may use NumPy Random Generator objects,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is the cuDNN library used for? ",
            "answer:-": "   CUDA convolution operations ",
            "context:-": "   The cuDNN library, used by CUDA convolution operations, can be a source of nondeterminism",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  When a cuDNN convolution is called with a new set of size parameters, what can run multiple convolution algorithms? ",
            "answer:-": "   an optional feature ",
            "context:-": "   The cuDNN library, used by CUDA convolution operations, can be a source of nondeterminism",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What will be used consistently during the rest of the process for the corresponding set of size parameters? ",
            "answer:-": "   the fastest algorithm ",
            "context:-": "   The cuDNN library, used by CUDA convolution operations, can be a source of nondeterminism",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What causes a benchmark to select different algorithms on subsequent runs? ",
            "answer:-": "   benchmarking noise and different hardware ",
            "context:-": "   However, some applications and libraries may use NumPy Random Generator objects,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What should you do if you are using other libraries that use random number generators? ",
            "answer:-": "   set consistent seeds ",
            "context:-": "   If you are using any other libraries that use random number generators, refer to",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What happens when a benchmark is used on the same machine? ",
            "answer:-": "   benchmark may select different algorithms on subsequent runs ",
            "context:-": "   If you are using any other libraries that use random number generators, refer to",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Why is benchmarking noise and different hardware important? ",
            "answer:-": "   benchmark may select different algorithms on subsequent runs, even on the same machine ",
            "context:-": "   The cuDNN library, used by CUDA convolution operations, can be a source of nondeterminism",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Disabling the benchmarking feature withtorch.backends.cudnn.benchmark=Falsecauses ",
            "answer:-": "   deterministically select an algorithm ",
            "context:-": "   Disabling the benchmarking feature withtorch.backends.cudnn.benchmark=Falsecauses cuDNN to deterministically select an algorithm, possibly at the cost of reduced",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What happens if the benchmarking feature is enabled withtorch.backends.cudnn.benchmark=True? ",
            "answer:-": "   performance might improve ",
            "context:-": "   Disabling the benchmarking feature withtorch.backends.cudnn.benchmark=Falsecauses cuDNN to deterministically select an algorithm, possibly at the cost of reduced",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is the difference between the benchmarking feature and cuDNN? ",
            "answer:-": "   different from thetorch.backends.cudnn.deterministicsetting ",
            "context:-": "   Disabling the benchmarking feature withtorch.backends.cudnn.benchmark=Falsecauses cuDNN to deterministically select an algorithm, possibly at the cost of reduced",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What does torch.use_algorithms do? ",
            "answer:-": "   deterministic ",
            "context:-": "   Disabling the benchmarking feature withtorch.backends.cudnn.benchmark=Falsecauses cuDNN to deterministically select an algorithm, possibly at the cost of reduced",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What might happen if the benchmarking feature is enabled withtorch.backends.cudnn.benchmark=True ",
            "answer:-": "   performance might improve ",
            "context:-": "   However, if you do not need reproducibility across multiple executions of your application,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is the difference between the benchmarking feature and the other setting discussed below? ",
            "answer:-": "   different from thetorch.backends.cudnn.deterministicsetting ",
            "context:-": "   However, if you do not need reproducibility across multiple executions of your application,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What does torch.use_deterministic_algorithms allow PyTorch to use instead of nondeterministic ones? ",
            "answer:-": "   deterministic algorithms ",
            "context:-": "   However, if you do not need reproducibility across multiple executions of your application,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What documentation should you check for a full list of affected operations? ",
            "answer:-": "   fortorch.use_deterministic_algorithms() ",
            "context:-": "   torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  If an operation does not act correctly according to the documentation, or if you need what, please submit an issue",
            "answer:-": "   a deterministic implementation of an operation that does not have one ",
            "context:-": "   However, if you do not need reproducibility across multiple executions of your application,",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is this setting different from? ",
            "answer:-": "   thetorch.backends.cudnn.deterministicsetting ",
            "context:-": "   Note that this setting is different from thetorch.backends.cudnn.deterministicsetting discussed below. torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What does torch.use_deterministic_algorithms() allow PyTorch to use instead of nondeterministic ones? ",
            "answer:-": "   deterministic algorithms ",
            "context:-": "   torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  If an operation does not act correctly according to the documentation, or if you need what, please submit an issue? ",
            "answer:-": "   a deterministic implementation of an operation that does not have one ",
            "context:-": "   Note that this setting is different from thetorch.backends.cudnn.deterministicsetting discussed below. torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  When will the alternative deterministic implementation of bmm() be used? ",
            "answer:-": "   when the deterministic flag is turned on ",
            "context:-": "   torch.use_deterministic_algorithms()lets you configure PyTorch to use",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  Whentorch.bmm() is called with sparse-dense CUDA tensors, it typically uses a ",
            "answer:-": "   deterministic ",
            "context:-": "   Whentorch.bmm()is called with sparse-dense CUDA tensors it typically uses a",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What setting will make other PyTorch operations behave deterministically? ",
            "answer:-": "   unliketorch.use_deterministic_algorithms() ",
            "context:-": "   While disabling CUDA convolution benchmarking (discussed above) ensures that",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What can you use to seed the RNG for all devices? ",
            "answer:-": "   usetorch.manual_seed() ",
            "context:-": "   You can usetorch.manual_seed()to seed the RNG for all devices (both",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What kind of operators might need to set python seed as well? ",
            "answer:-": "   custom operators ",
            "context:-": "   For custom operators, you might need to set python seed as well",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  For custom operators, you might need to set what as well? ",
            "answer:-": "   python seed ",
            "context:-": "   For custom operators, you might need to set python seed as well",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  In some versions of CUDA, RNNs and LSTM networks may have what? ",
            "answer:-": "   non-deterministic behavior ",
            "context:-": "   In some versions of CUDA, RNNs and LSTM networks may have non-deterministic behavior.",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is used for details and workarounds? ",
            "answer:-": "   Seetorch.nn.RNN() ",
            "context:-": "   In some versions of CUDA, RNNs and LSTM networks may have non-deterministic behavior.",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is the name of the website? ",
            "answer:-": "   Alias fortorch.linalg.det ",
            "context:-": "   Alias fortorch.linalg.det()  ",
            "source:-": "https//pytorch.org/docs/stable/notes/randomness.html"
        },
        {
            "question:-": "  What is a view of when a tensor is split into multiple tensors? ",
            "answer:-": "   view ofinput ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.det.html#torch.det"
        },
        {
            "question:-": "  What is the equivalent to calling? ",
            "answer:-": "   torch.tensor_split ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is'snumpy.dsplit()' based on? ",
            "answer:-": "   NumPy ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is the tensor to split? ",
            "answer:-": "   input(Tensor) ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is the name of the tensor to split? ",
            "answer:-": "   indices_or_sections ",
            "context:-": "   Splitsinput, a tensor with three or more dimensions, into multiple tensors",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What does torch.linalg.det() compute? ",
            "answer:-": "   the sign and natural logarithm of the absolute value of the determinant of a square matrix ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.dsplit.html#torch.dsplit"
        },
        {
            "question:-": "  What is the natural logarithm of the modulus of the determinant? ",
            "answer:-": "   logarithmic polar decomposition of the determinant ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What types of inputs does this function support? ",
            "answer:-": "   float, double, cfloat and cdouble dtypes ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What does torch.linalg.det() support? ",
            "answer:-": "   batches of matrices ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  How is this function computed? ",
            "answer:-": "   usingtorch.lu() ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  When inputs are on what device does torch.lu() synchronize that device with the CPU? ",
            "answer:-": "   CUDA device ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is the determinant that can be recovered? ",
            "answer:-": "   * exp(logabsdet) ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  When a matrix has a determinant of what, it returns(0, -inf)? ",
            "answer:-": "   zero ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What computes the determinant of square matrices? ",
            "answer:-": "   torch.linalg.det() ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is a tensor of shape(*, n, n)where*is zero or more batch dimensions? ",
            "answer:-": "   A(Tensor) ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is out(tuple,optional)? ",
            "answer:-": "   output tuple of two tensors ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is ignored? ",
            "answer:-": "   ifNone ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is the default value of the function that computes the sign and logarithm of the absolute value of the determinant of a square ",
            "answer:-": "   Default",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What is the name of the function that computes the sign and logarithm of the absolute value of the determinant of a square matrix ",
            "answer:-": "   tuple ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "question:-": "  What does logabsdet always be? ",
            "answer:-": "   real-valued ",
            "context:-": "   Computes the sign and natural logarithm of the absolute value of the determinant of a square matrix. For complexA, it returns the angle and the natural logarithm of the modulus of the",
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        },
        {
            "source:-": "https//pytorch.org/docs/stable/generated/torch.linalg.slogdet.html#torch.linalg.slogdet"
        }
    ]
}