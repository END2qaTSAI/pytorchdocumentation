[
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    },
    {
        "X": "What is optional for the device type?",
        "Z": "Atorch.deviceis an object representing the device on which atorch.Tensoris\nor will be allocated. Thetorch.devicecontains a device type ('cpu'or'cuda') and optional device\nordinal for the device type. If the device ordinal is not present, this object will always represent\nthe current device for the device type, even aftertorch.cuda.set_device()is called; e.g.,\natorch.Tensorconstructed with device'cuda'is equivalent to'cuda:X'where X is\nthe result oftorch.cuda.current_device(). Atorch.Tensor\u2019s device can be accessed via theTensor.deviceproperty. Atorch.devicecan be constructed via a string or via a string and device ordinal Via a string: Via a string and device ordinal: Note Thetorch.deviceargument in functions can generally be substituted with a string.\nThis allows for fast prototyping of code. Note For legacy reasons, a device can be constructed via a single device ordinal, which is treated\nas a cuda device.  This matchesTensor.get_device(), which returns an ordinal for cuda\ntensors and is not supported for cpu tensors. Note Methods which take a device will generally accept a (properly formatted) string\nor (legacy) integer device ordinal, i.e. the following are all equivalent: ",
        "Y": "device ordinal"
    }
]